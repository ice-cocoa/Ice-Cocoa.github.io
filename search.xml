<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux常见命令记录</title>
    <url>/2022/10/12/%E5%AD%A6%E4%B9%A0/Linux%E7%9B%B8%E5%85%B3/linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>暂时没有开始记录，先创建一下</p>
<span id="more"></span>
<p>linux命令大全<br><a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></p>
<p><a href="https://www.runoob.com/linux/linux-comm-chmod.html">https://www.runoob.com/linux/linux-comm-chmod.html</a></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Linux相关</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2022/10/08/%E5%AD%A6%E4%B9%A0/web%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0--JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>JavaScript 是一种轻量级解释型语言，可以用来创建动态更新的内容，控制多媒体，制作图像动画，其他等等</p>
<ul>
<li>2022-10-17 完成JavaScript基础部分的整理</li>
</ul>
<span id="more"></span>

<h1 id="JavaScript基础介绍"><a href="#JavaScript基础介绍" class="headerlink" title="JavaScript基础介绍"></a>JavaScript基础介绍</h1><h2 id="JavaScript的API"><a href="#JavaScript的API" class="headerlink" title="JavaScript的API"></a>JavaScript的API</h2><p>JavaScript的应用程序接口API通常分为两类：</p>
<ul>
<li>浏览器API<br>  浏览器API内建与web浏览器中。有：<ul>
<li>文档对象模型（DOM，Document Object Model）API、</li>
<li>地理位置API </li>
<li>画布（Canvas）和WebGL API可以创建生动的2D和3D图像</li>
<li>影音类API</li>
</ul>
</li>
<li>第三方API（笔记中不会涉及这些知识）<br>  如Twitter API可以在网站上显示最新的推文，谷歌地图API 可以在网站上嵌入定制的地图</li>
</ul>
<h2 id="JavaScript在页面上工作"><a href="#JavaScript在页面上工作" class="headerlink" title="JavaScript在页面上工作"></a>JavaScript在页面上工作</h2><p>在HTML和CSS集合组装成一个网页后，浏览器的JavaScript引擎将执行JavaScript代码。这样的顺序是比较合理的，因为JavaScript的普遍用处是通过DOM API动态修改HTML和CSS。</p>
<p>实际上在未加载完HTML时就执行Javascript代码是可能的，应要妥善安排脚本调用策略来避免这种情况</p>
<p>每个浏览器标签页就是其自身用来运行代码的独立容器，大多数情况下代码是独立运行的 <em>（以安全方式在不同标签页中传输代码和数据的方式是存在的，笔记中不会涉及）</em></p>
<h2 id="向页面添加JavaScript"><a href="#向页面添加JavaScript" class="headerlink" title="向页面添加JavaScript"></a>向页面添加JavaScript</h2><p>可以像添加CSS一样，用相似的方法添加。CSS使用&lt;link&gt;元素连接外部样式表，用&lt;style&gt;添加内嵌样式表，而JavaScript只需要一个元素&lt;script&gt;</p>
<p>内部JavaScript写在HTML文件中，代码内容包围在 &lt;script&gt; 元素中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>外部JavaScript的代码放在一个外部文件中，在HTML文件中使用内容为空但含有src属性的&lt;script&gt;来引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内部脚本调用策略"><a href="#内部脚本调用策略" class="headerlink" title="内部脚本调用策略"></a>内部脚本调用策略</h3><p>内部JavaScript使用以下结构，实现DOM加载完再执行代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这是一个事件监听器，它监听浏览器的“DOMContentLoaded”事件（即HTML文档提加载、解释完毕），这个事件触发时，才会调用function内的代码。</p>
<h3 id="外部脚本调用策略"><a href="#外部脚本调用策略" class="headerlink" title="外部脚本调用策略"></a>外部脚本调用策略</h3><p>外部JavaScript使用了一项现代技术–async异步属性，它告诉浏览器遇到&lt;script&gt;标签时不要中断后续HTML内容的加载。</p>
<p>但是，async属性仅仅是解决了“顺序调用”问题，与内部代码的“DOMContentLoaded”的意义不同，对于可能引起文档体改变的代码，应该放在body标签的底部</p>
<p>此外，对于相对独立的脚本而言async属性是合适的选择，它不会保证脚本会顺序执行，而对于需要顺序执行的脚本，需要使用defer属性</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释，使用双斜杠添加单行注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>多行注释，在 /* 和 */ 之间添加多行注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是存储值的容器，可以是数字、字符串、函数等</p>
<p>JavaScript是一种“动态类型语言”，这句话的意思是，不需要指定变量包含是什么类型，它会根据<strong>最新的赋值</strong>自动推断</p>
<p>这意味着，即使初始化时赋予了字符串类型，再次赋值时可以赋数值类型，同时变量类型也会变成数值类型</p>
<h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>JavaScript有两种声明变量的方法，使用var关键字和使用let关键字</p>
<p>现在推荐使用let，因为let不会引起变量提升，也不允许重复声明一个变量</p>
<h2 id="变量初始化与更新"><a href="#变量初始化与更新" class="headerlink" title="变量初始化与更新"></a>变量初始化与更新</h2><p>声明变量的同时或者之后，使用赋值符号（&#x3D;）即可对变量初始化</p>
<p><em>可以在控制台通过输入变量名的方式，来验证这个变量是否存在，值是什么。空值的变量会返回 undefined，不存在的变量会得到一个报错信息</em></p>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>由于变量声明（以及其他声明）总是在任意代码执行之前处理的，所以在代码中任意位置声明总是等效于在代码开头声明。<strong>这意味着变量可以在声明之前使用</strong>，这个行为叫做变量提升（hoisting）。</p>
<p>注意，变量提升不会影响变量初始化</p>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>在Javascript中，声明时不需要指定变量类型</p>
<p>变量类型有：</p>
<ul>
<li>Number：数值类型，包括整数和浮点数</li>
<li>String：字符串类型，需要单引号或双引号包围，会视为别的变量名</li>
<li>Boolean：逻辑值类型</li>
<li>Array：数组类型，用方括号括起来，用逗号分隔多个值</li>
<li>Object：对象类型，它是一种代码结构，如 let dog&#x3D;{name:’Spot’,shout:’wangwang’};  定义了一个对象实例</li>
</ul>
<h2 id="数字与运算符"><a href="#数字与运算符" class="headerlink" title="数字与运算符"></a>数字与运算符</h2><p><em>以后再更新记录</em></p>
<h2 id="字符串与文本处理"><a href="#字符串与文本处理" class="headerlink" title="字符串与文本处理"></a>字符串与文本处理</h2><p>关于字符串的创建，引号包围字符串文本，字符串中的转义字符就不介绍了</p>
<h3 id="把字符串当作对象"><a href="#把字符串当作对象" class="headerlink" title="把字符串当作对象"></a>把字符串当作对象</h3><ul>
<li>字符串连接<br>join()方法，字符串字面值和字符串变量之间可以用 + 操作符随意连接。此外，数字也可以和字符串连接</li>
<li>数字转化成字符串<br>Number对象把传递给它的任何东西试图转换成一个数字，如果不可转化则返回 NaN （这也是一个数字类型的值），如 Number(price)</li>
<li>字符串与数字的转化<br>toString() 方法</li>
<li>获取长度<br>length 属性，如 str1.length</li>
<li>查找子字符串<br>indexOf() 方法，会返回子字符串的索引，如 str1.indexOf(‘apple’)</li>
<li>提取子字符串<br>slice() 方法，如 str1.slice(0,3); str1.slice(2);</li>
<li>转换大小写<br>toLowerCase() 方法、 toUpperCase() 方法，将所有字符串分别转为小写或大写，如 str1.toLowerCase();</li>
<li>替换字符串某部分<br>replace() 方法，这个方法只会替换第一次符合匹配条件的地方，如 str1&#x3D;str1.replace(‘beforeStr’,’afterStr’);</li>
<li>字符串分割为数组<br>split() 方法，参数为分隔符号，如 let myArray&#x3D;myData.split(‘,’);</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>数组用方括号包围，内部用逗号分隔元素。数组内的元素不要求类型相同，甚至数组也可以作为元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> randomArr = [<span class="string">&#x27;milk&#x27;</span>, <span class="number">89</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]];</span><br></pre></td></tr></table></figure>
<h3 id="访问和修改数组"><a href="#访问和修改数组" class="headerlink" title="访问和修改数组"></a>访问和修改数组</h3><p>使用索引可以访问和修改数组中的元素，如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问</span></span><br><span class="line">shopping[<span class="number">0</span>];<span class="comment">//控制台会返回该元素值</span></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">shopping[<span class="number">0</span>]=<span class="string">&#x27;milk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组中数组的修改</span></span><br><span class="line">fruitMap[<span class="number">2</span>][<span class="number">2</span>]=<span class="string">&#x27;apple&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="把数组当作对象"><a href="#把数组当作对象" class="headerlink" title="把数组当作对象"></a>把数组当作对象</h3><p>获取数组长度— length属性</p>
<p>把数组组合为字符串— toString() 方法，如 dogNames.toString(); 这个方法会自动产生一个逗号分隔符</p>
<p>把数组组合为字符串，并指定分隔符— join()方法，如 let myNewString &#x3D; myArray.join(‘;’); </p>
<p>添加和删除数组项：</p>
<ul>
<li>push()方法— 如 myArray.push(‘milk’); </li>
<li>pop()方法— 如 let removedItem &#x3D; myArray.pop()</li>
<li>unshift()方法— 作用于数组开始的添加元素</li>
<li>shift()方法— 作用域数组开始的删除元素</li>
</ul>
<h1 id="JavaScript基础要件"><a href="#JavaScript基础要件" class="headerlink" title="JavaScript基础要件"></a>JavaScript基础要件</h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h3><p>JavaScript中的条件判断语句 if…else… 与C外观一致</p>
<p><em>Javascript中判断是否相等使用 &#x3D;&#x3D;&#x3D; 和 ！&#x3D;&#x3D; ，此处与C不同</em></p>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>在JavaScript中switch的用处应该比较多，因为在网页中可能有大量的列表存在，形如以下伪代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (choice) &#123; <span class="comment">//expression可以是表达式或值</span></span><br><span class="line">  <span class="keyword">case</span> <span class="attr">choice1</span>: <span class="comment">//choice1可以是一个表达式或值</span></span><br><span class="line">    run <span class="variable language_">this</span> code;</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">//跳出switch语句，否则继续往下匹配</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="attr">choice2</span>:</span><br><span class="line">    run <span class="variable language_">this</span> code instead;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">default</span>: <span class="comment">//如果没有break，则default总会执行；default句子可以省略</span></span><br><span class="line">    actually, just run <span class="variable language_">this</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch语句中的 choice（上面伪代码中的）经常是一个列表中选择的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> select = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;select&#x27;</span>);</span><br><span class="line">select.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, onChangeFunction);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onChangeFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> choice = select.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">switch</span> (choice)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三元或条件运算符"><a href="#三元或条件运算符" class="headerlink" title="三元或条件运算符"></a>三元或条件运算符</h3><p>三元或条件运算符适用于只有true和else的条件选择，可以向像表达式一样给变量赋值，也可以向代码一样独立成行（这取决于它的返回类型），形如以下伪代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">( condition ) ? (run <span class="variable language_">this</span> code) : (run <span class="variable language_">this</span> code instead);</span><br></pre></td></tr></table></figure>
<p><em>三元或条件运算符的第二、三个操作数可以是表达式或代码块(末尾不带分号)，这会由JavaScript解释器来识别和处理。显然C是无法这样的</em></p>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>JavaScript中for、while、do-while语句循环与C外观一致，只有for语句在初始化迭代变量时使用var&#x2F;let关键字 ，而C中一般用int等具体类型声明</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="浏览器内置函数"><a href="#浏览器内置函数" class="headerlink" title="浏览器内置函数"></a>浏览器内置函数</h3><p>JavaScript有许多内置的函数，它们大多数不是由JavaScript实现的，更像是C++这样更低级的系统语言编写的</p>
<p>这些内置浏览器函数并非JavaScript语言的一部分，而是浏览器API的一部分</p>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>形如 function() {…} 的是一个匿名函数，没有名字，自己也不会做任何事情</p>
<p>匿名函数通常与事件处理程序一起使用，如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myButton.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p><em>匿名函数也被称为函数表达式，它与函数声明有一些区别，不会进行声明提升</em></p>
<h3 id="函数作用域和冲突"><a href="#函数作用域和冲突" class="headerlink" title="函数作用域和冲突"></a>函数作用域和冲突</h3><p>所有函数的最外层被称为全局作用域，全局作用域定义的值可以在任意地方访问</p>
<p>调用外部脚本可能会产生问题，可能会因为外部脚本与本处脚本用同一个名字定义变量。因此将代码所在函数中可以极力避免这个问题</p>
<h3 id="函数内部的函数"><a href="#函数内部的函数" class="headerlink" title="函数内部的函数"></a>函数内部的函数</h3><p>定义函数时，可以调用函数，这可能会导致函数作用域的复杂化，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myBigFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> myValue;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subFunction1</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subFunction1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(myValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面这个例子观察，在定义函数时，内部调用函数还是比较安全的。这个定义的函数不会通过调用函数来访问到不属于它作用域的变量</p>
<p>看上去，JavaScript似乎让函数具有了封装文件级别内容的能力，实际上大量的JavaScript代码都是通过“函数内部的函数”来实现封装</p>
<h2 id="事件介绍"><a href="#事件介绍" class="headerlink" title="事件介绍"></a>事件介绍</h2><p>在Web中可能发生很多事件，如：在某个元素上鼠标点击或悬停，用户按下某个按键，用户调整浏览器大小，一个网页停止加载，提交表单，播放视频，关闭错误</p>
<p><em>网络事件不是JavaScript语言的核心，它们被定义成内置于浏览器的APIs</em></p>
<p>每个可用的事件都会有一个事件处理器，也就是事件触发时会运行的代码块</p>
<p><em>事件处理器也会被叫做事件监听器，因为这块代码既监听事件也处理事件</em></p>
<h3 id="添加事件处理器"><a href="#添加事件处理器" class="headerlink" title="添加事件处理器"></a>添加事件处理器</h3><p>事件处理器代码的“入口地址”可以被赋给元素对象的特定属性并实现监听效果，这样的属性被称为<strong>事件处理属性</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>它明显的缺点是不能添加做个处理器</p>
<p>另一种触发机制是使用监听函数，更建议使用这种方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cliFun</span>(<span class="params"></span>)&#123;...&#125;;</span><br><span class="line">btn,<span class="title function_">addEvebtListener</span>(<span class="string">&#x27;click&#x27;</span>,cliFun);</span><br></pre></td></tr></table></figure>
<p>这种方法在比较大的项目中可以更清楚地添加和删除事件处理器，此外，还能给同一个监听器触发多个处理器</p>
<h3 id="移除处理器"><a href="#移除处理器" class="headerlink" title="移除处理器"></a>移除处理器</h3><p>对于使用事件处理器属性，移除处理器只要对该属性赋空即可</p>
<p>对于使用监听函数添加的处理器，使用removeEventListener函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,cliFun);</span><br><span class="line"><span class="comment">//这里的cliFun表示的是处理器函数，至于究竟是怎样匹配到它的，这里不做研究</span></span><br></pre></td></tr></table></figure>

<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>有时候在事件处理函数内部，会加上一个固定指定名称的参数，例如 event、evt、e或自定义的其他名称，它们的意思是相同的，表示一个<strong>事件对象</strong></p>
<p>e的值是刚刚发生这个事件的元素转化成的JavaScript对象（被称做<strong>事件对象</strong>）</p>
<p>如果要表示一个标签本身，使用 e.taregt ，假如它表示按钮本身，那么 e.target.style.backgroundColor&#x3D;’red’ 就是修改这个按钮的背景色为红色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bgChange</span>(<span class="params">e</span>) &#123; <span class="comment">//e这个参数会自动传递到函数这里</span></span><br><span class="line">  <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;<span class="comment">//修改触发事件的按钮的背景色</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">//输出这个对象的信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, bgChange);</span><br></pre></td></tr></table></figure>

<h3 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h3><p>有些浏览器支持自动的表单验证功能，但这很可能不是想要的，因此需要自己添加一个事件处理程序</p>
<p>在这个处理程序里面，要先显示调用e.preventDefault()来阻止默认行为，然后再写上自定义行为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">form.<span class="property">onsubmit</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (...) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>现代浏览器中，默认情况下，所有事件处理程序都是在冒泡阶段注册的。冒泡是先执行本身事件处理程序，再执行外部的</p>
<p>这会引起讨厌的行为，标准事件对象具有名为 stopPropagation() 的函数，它只会让当前事件处理程序允许，不会再冒泡链上进一步扩大：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">video.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  video.<span class="title function_">play</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>子节点的事件可以委托父节点监听，让这个事件冒泡到父节点上</p>
<p>常用的情形是，想要让每个列表项&lt;li&gt;点击时弹出信息，则可以将click单击事件监听器放在父元素上，这样事件就会冒泡到父元素&lt;ul&gt;上了</p>
<h1 id="JavaScript对象介绍"><a href="#JavaScript对象介绍" class="headerlink" title="JavaScript对象介绍"></a>JavaScript对象介绍</h1><h2 id="创建对象并访问"><a href="#创建对象并访问" class="headerlink" title="创建对象并访问"></a>创建对象并访问</h2><p>创建一个对象的方式为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  name : &#123;</span><br><span class="line">    firstName : <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    lastName : <span class="string">&#x27;Smith&#x27;</span>, </span><br><span class="line">  &#125;,</span><br><span class="line">  age : <span class="number">32</span>,</span><br><span class="line">  greeting : <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;,</span><br><span class="line">  intersts : [<span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;skiing&#x27;</span>]</span><br><span class="line">  all</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问对象可以使用点表示法和括号表示法，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问一般变量</span></span><br><span class="line">person.<span class="property">age</span></span><br><span class="line">person[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"><span class="comment">//访问数组</span></span><br><span class="line">person.<span class="property">intersts</span>[<span class="number">0</span>]</span><br><span class="line">person[intersts][<span class="number">0</span>]</span><br><span class="line"><span class="comment">//访问对象</span></span><br><span class="line">person.<span class="property">name</span>.<span class="property">first</span></span><br><span class="line">person[<span class="string">&#x27;name&#x27;</span>][<span class="string">&#x27;first&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><em>使用括号表示法看上去很像数组–对象做了字符串到值得映射，数组做的是数字到值得映射</em></p>
<p>设置成员对象时，如果该成员本不存在，那么会自动创建</p>
<h2 id="基于原型"><a href="#基于原型" class="headerlink" title="基于原型"></a>基于原型</h2><p>JavaScript的每个对象都拥有一个原型对象，对象以其原型为模板，继承其方法和属性（通过链接）。原型对象也可能拥有一个原型，一层一层继承，形成原型链</p>
<p>JavaScript中，函数可以有属性，且每个函数都有一个特殊属性–原型（prototype）</p>
<p>（更多部分暂时不记录）</p>
<h2 id="JavaScript中的类"><a href="#JavaScript中的类" class="headerlink" title="JavaScript中的类"></a>JavaScript中的类</h2><p>在函数一节中，提到过在JavaScript中，函数具有封装能力。然而类更具有典型的封装能力，本节记录的类的封装和函数实现的封装有何不同，需要细细观察</p>
<p>已经理解的是，函数是一个具体的对象，可以被别的函数继承，别的函数可以通过委托的方式沿着原型链调用函数；类则是一类对象的抽象</p>
<h3 id="声明一个类"><a href="#声明一个类" class="headerlink" title="声明一个类"></a>声明一个类</h3><p>声明一个类有多种方法，一种是是用class关键字声明一个类，进行比较严格的封装；另一种是在“外部环境”下，定义一个与类名相同的构造器函数</p>
<p>在“外部环境”下定义一个构造器，以此定义一个类：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个构造器，来实现声明一个类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Ball</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在“外部环境”使用prototype，定义这个类的方法</span></span><br><span class="line"><span class="title class_">Ball</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">drawBall</span>=<span class="keyword">function</span>&#123;...&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用class关键字，定义一个类：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  some variables</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//实现一个构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">personName</span>)&#123;...&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  some functions</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h3><p>在class关键字定义一个类时，构造函数使用constructor关键字声明，执行这个函数时，它会：</p>
<ul>
<li>创建一个新的对象</li>
<li>将this绑定到这个对象上，然后再构造函数代码中就可以使用this来引用这个对象</li>
<li>执行构造函数中的代码</li>
<li>返回这个新对象</li>
</ul>
<p>使用类的构造函数，创建一个实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用类的名字来调用构造函数</span></span><br><span class="line"><span class="keyword">const</span> jojo = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;jojo&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果不需要特殊的初始内容，可以省略构造函数，而默认的构造函数会被自动生成</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>可以使用extends关键字声明这个类继承自另一个类，注意子类的构造函数的定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Professor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">  teaches;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">personName, professorTeaches</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(personName);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">teaches</span> = professorTeaches;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子类的构造函数的第一件事情，是使用super()来调用父类的构造方法，然后再设置仅属于子类的部分</p>
<h3 id="封装–定义私有变量"><a href="#封装–定义私有变量" class="headerlink" title="封装–定义私有变量"></a>封装–定义私有变量</h3><p>JavaScript定义一个私有变量的方法，是从命名规则上实现的，对于以井号(#)开头的属性或函数，都会被定义为私有的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">  #somePrivateVar;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">somePrivateMethod</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="使用JSON数据"><a href="#使用JSON数据" class="headerlink" title="使用JSON数据"></a>使用JSON数据</h2><p>注意事项：</p>
<ul>
<li>JSON是一种纯数据格式，只包含属性，没有方法；</li>
<li>JSON要求属性名和字符串用双引号包围，单引号无效</li>
<li>JSON文件的容错较低，一个错位的逗号或分号就会导致JSON文件出错</li>
</ul>
<h3 id="在HTML页面中加载json对象"><a href="#在HTML页面中加载json对象" class="headerlink" title="在HTML页面中加载json对象"></a>在HTML页面中加载json对象</h3><p>为了载入json到页面中，需要使用一个名为XMLRequset的API（常称为XHR）</p>
<p>XHR是一个非常有用的JavaScript对象，能够通过代码向服务器请求资源文件（图片、文本、JSON、HTML片段）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> requestURL = <span class="string">&#x27;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,requestURL);</span><br><span class="line">request.<span class="property">responseType</span>=<span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"><span class="comment">//上面都在设置这个请求的参数</span></span><br><span class="line"><span class="comment">//send方法发送请求</span></span><br><span class="line">request.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">//处理返回的数据</span></span><br><span class="line"><span class="comment">//onload事件是浏览器解析完页面之后就会自动触发的</span></span><br><span class="line">request.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> aJsonObj = request.<span class="property">response</span>;<span class="comment">//获得json对象</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  现在已经获取到请求响应的json格式数据</span></span><br><span class="line"><span class="comment">  可以用它修改页面显示，或做其他操作</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，onload事件触发的时机是浏览器解析完页面之后（有个问题，响应的接收和onload代码的触发的时间有无先后关系？）</p>
<h3 id="在HTML页面上显示json数据"><a href="#在HTML页面上显示json数据" class="headerlink" title="在HTML页面上显示json数据"></a>在HTML页面上显示json数据</h3><p>上面的步骤中已经获得了一个json对象，利用它在页面的上添加数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> header = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;header&#x27;</span>);</span><br><span class="line"><span class="comment">//在html页面添加一个h1标签，标签内容为获得的json数据的某部分</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addJsonData</span>(<span class="params">aJsonObj</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> myHearder=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">  myHeader.<span class="property">textContent</span>=aJsonObj[<span class="string">&#x27;foo&#x27;</span>];</span><br><span class="line">  header.<span class="title function_">append</span>(myHeader)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON对象和文本的转换"><a href="#JSON对象和文本的转换" class="headerlink" title="JSON对象和文本的转换"></a>JSON对象和文本的转换</h3><p>对于一个XHR而言，获得json对象只需要设定这个请求的返回格式是json，然后获取“返回报文”即可（此时返回值自动设定为是json对象类型）</p>
<p>但是，有时需要将一些字符串转为json数据，或者把一些数据转为json对象，这时需要使用浏览器内置的两个方法：</p>
<ul>
<li>JSON.parse()：以文本字符串形式接收json数据，返回一个json对象</li>
<li>JSON.stringify()：接受一个对象作为参数，返回一个对应的json字符串</li>
</ul>
<h1 id="对象构建实验–彩色弹球"><a href="#对象构建实验–彩色弹球" class="headerlink" title="对象构建实验–彩色弹球"></a>对象构建实验–彩色弹球</h1><p>（暂时省略）</p>
<h2 id="页面构造"><a href="#页面构造" class="headerlink" title="页面构造"></a>页面构造</h2><p>包含内容为：</p>
<ol>
<li>一个简单的HTML文档，内容包一个h1元素、一个canvas元素</li>
<li>一个简单的CSS样式文件，定位h1元素，填充画面背景</li>
<li>一个JS文件，设置canvas元素</li>
</ol>
<h2 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>实验之彩色弹球<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>彩色弹球<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span>&gt;</span> <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*设定标题样式：</span></span><br><span class="line"><span class="comment">标题位于右上角，字体颜色为白*/</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置画布</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> width = canvas.<span class="property">width</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line"><span class="keyword">const</span> height = canvas.<span class="property">height</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机数的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">random</span>(<span class="params">min,max</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机颜色值的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> color = <span class="string">&#x27;rgb(&#x27;</span> +</span><br><span class="line">                <span class="title function_">random</span>(<span class="number">0</span>, <span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">                <span class="title function_">random</span>(<span class="number">0</span>, <span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">                <span class="title function_">random</span>(<span class="number">0</span>, <span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 Ball 构造器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Ball</span>(<span class="params">x, y, velX, velY, color, size</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">velX</span> = velX;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">velY</span> = velY;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义彩球绘制函数</span></span><br><span class="line"><span class="title class_">Ball</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">draw</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">  ctx.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">size</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">  ctx.<span class="title function_">fill</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义彩球更新函数</span></span><br><span class="line"><span class="title class_">Ball</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">size</span>) &gt;= width) &#123;<span class="variable language_">this</span>.<span class="property">velX</span> = -(<span class="variable language_">this</span>.<span class="property">velX</span>);&#125;</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">size</span>) &lt;= <span class="number">0</span>) &#123;<span class="variable language_">this</span>.<span class="property">velX</span> = -(<span class="variable language_">this</span>.<span class="property">velX</span>);&#125;</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable language_">this</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">size</span>) &gt;= height) &#123;<span class="variable language_">this</span>.<span class="property">velY</span> = -(<span class="variable language_">this</span>.<span class="property">velY</span>);&#125;</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable language_">this</span>.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">size</span>) &lt;= <span class="number">0</span>) &#123;<span class="variable language_">this</span>.<span class="property">velY</span> = -(<span class="variable language_">this</span>.<span class="property">velY</span>);&#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">velX</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">velY</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义碰撞检测函数</span></span><br><span class="line"><span class="title class_">Ball</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">collisionDetect</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; balls.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span> !== balls[j]) &#123;</span><br><span class="line">      <span class="keyword">const</span> dx = <span class="variable language_">this</span>.<span class="property">x</span> - balls[j].<span class="property">x</span>;</span><br><span class="line">      <span class="keyword">const</span> dy = <span class="variable language_">this</span>.<span class="property">y</span> - balls[j].<span class="property">y</span>;</span><br><span class="line">      <span class="keyword">const</span> distance = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (distance &lt; <span class="variable language_">this</span>.<span class="property">size</span> + balls[j].<span class="property">size</span>) &#123;</span><br><span class="line">        balls[j].<span class="property">color</span> = <span class="variable language_">this</span>.<span class="property">color</span> = <span class="title function_">randomColor</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个数组，生成并保存所有的球</span></span><br><span class="line"><span class="keyword">let</span> balls = [];</span><br><span class="line"><span class="keyword">while</span>(balls.<span class="property">length</span> &lt; <span class="number">25</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> size = <span class="title function_">random</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">let</span> ball = <span class="keyword">new</span> <span class="title class_">Ball</span>(</span><br><span class="line">    <span class="comment">// 为避免绘制错误，球至少离画布边缘球本身一倍宽度的距离</span></span><br><span class="line">    <span class="title function_">random</span>(<span class="number">0</span> + size, width - size),</span><br><span class="line">    <span class="title function_">random</span>(<span class="number">0</span> + size, height - size),</span><br><span class="line">    <span class="title function_">random</span>(-<span class="number">7</span>, <span class="number">7</span>),</span><br><span class="line">    <span class="title function_">random</span>(-<span class="number">7</span>, <span class="number">7</span>),</span><br><span class="line">    <span class="title function_">randomColor</span>(),</span><br><span class="line">    size</span><br><span class="line">  );</span><br><span class="line">  balls.<span class="title function_">push</span>(ball);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个循环来不停地播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;rgba(0,0,0,0.25)&#x27;</span>;</span><br><span class="line">  ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; balls.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    balls[i].<span class="title function_">draw</span>();</span><br><span class="line">    balls[i].<span class="title function_">update</span>();</span><br><span class="line">    balls[i].<span class="title function_">collisionDetect</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(loop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loop</span>();</span><br></pre></td></tr></table></figure>


<h1 id="异步JavaScript"><a href="#异步JavaScript" class="headerlink" title="异步JavaScript"></a>异步JavaScript</h1><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>事件处理程序实际上就是异步编程的一种形式，函数会在事件发生的时候调用，而非立即调用</p>
<p>XMLHttpRequest（简称为XHR） API是JavaScript早期的异步API，可以发起HTTP请求，并通过给XHR对象附加事件监视器（以及配套的处理程序），在请求进展、最终完成、或其他时刻执行某些行为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 假定有这样的html文件</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;xhr&quot;&gt;点击发起请求&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;pre readonly class=&quot;event-log&quot;&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> log=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.event-log&#x27;</span>);</span><br><span class="line"><span class="comment">//给点击事件加上监听。（异步）如果点击则发起发起一个http请求</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#xhr&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  log.<span class="property">textContent</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> xhr=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  <span class="comment">//给xhr对象加上监听。（异步）如果获取到返回，则输出相关信息</span></span><br><span class="line">  xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    log.<span class="property">textContent</span>=<span class="string">&#x27;$&#123;log.textcont&#125;完成！状态码：$&#123;xhr.status&#125;&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//发送一个http请求</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;www.baidu.com&#x27;</span>);</span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="使用Promise"><a href="#使用Promise" class="headerlink" title="使用Promise"></a>使用Promise</h2><p><del>Promise是现代JavaScript异步编程的基础，是一个由异步函数返回的对象，这个对象可以指示当前操作所处的状态</del>(比较晦涩，不看它)</p>
<p>Promise是一个对象，往往使用它的then方法、catch方法等来实现异步调用</p>
<p>⭐注意，异步函数总是返回一个Promise，哪怕return的就是一个非常常见的变量。如果有一个返回json变量的函数，加了async关键字，那么它的返回值也会是Promise。如果想要使用这个变量，必须在 .then()中的作为参数的函数内使用，如 xxx.then(json&#x3D;&gt;{console.log(json[0]);}); </p>
<h3 id="fetch-API返回一个Promise"><a href="#fetch-API返回一个Promise" class="headerlink" title="fetch API返回一个Promise"></a>fetch API返回一个Promise</h3><p>fetch API是一个基于Promise的，用以替代XMLHttpRequest的方法（XHR是早期实现异步编程的API）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPromise=<span class="title function_">fetch</span>(<span class="string">&#x27;https://cehsiceshi.com/somedata.json&#x27;</span>);</span><br><span class="line">fetchPromise.<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已收到响应：$&#123;reponse.status&#125;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已发送请求&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在这里的输出应该是这样的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">已发送请求</span><br><span class="line">已收到响应：200</span><br></pre></td></tr></table></figure>

<h3 id="链式使用Promise和错误处理"><a href="#链式使用Promise和错误处理" class="headerlink" title="链式使用Promise和错误处理"></a>链式使用Promise和错误处理</h3><p>一个异步操作往往需要由多个函数构成，为了避免在一个then参数内嵌套多个then，可以使用链式调用的方法</p>
<p>Promise的方便在于，它的方法then本身也会返回一个Promise，并且这个Promise还会指示出作为then参数的函数的完成状态</p>
<p>Promise还有用于错误处理的catch方法，catch往往位于Promise链的最后一个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPromise=<span class="title function_">fetch</span>(<span class="string">&#x27;https://cehsiceshi.com/somedata.json&#x27;</span>);</span><br><span class="line">fetchPromise</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();<span class="comment">//函数返回一个json对象，这个对象之后又会被then构造成一个Promise</span></span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`error：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>( <span class="function"><span class="params">error</span>=&gt;</span>&#123;<span class="comment">//捕获错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;$&#123;error&#125;&#x27;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Promise术语"><a href="#Promise术语" class="headerlink" title="Promise术语"></a>Promise术语</h3><p>Promise有三种状态：</p>
<ul>
<li><strong>待定pending</strong>：这是调用fetch返回的Promise状态，此时请求刚刚发起，不知道能否成功返回</li>
<li><strong>已实现fulfilled</strong>：意味着操作成功“完成”，此时调用then方法，其中的resolved参数对应的函数会被调用</li>
<li><strong>已拒绝rejected</strong>：意味着操作“失败”，此时调用then方法，其中的rejected参数对应的函数会被调用；或者直接被catch捕获</li>
</ul>
<p>注意，这里“成功”或“失败”的含义取决于使用的API，如fetch认为服务器返回404时成功，网络错误为失败</p>
<h3 id="合并使用多个Promise"><a href="#合并使用多个Promise" class="headerlink" title="合并使用多个Promise"></a>合并使用多个Promise</h3><p>如果几个Promise相互间没有依赖关系，那么可以使用all方法，它接收一个Promise数组作为一个参数，返回单一的Promise</p>
<p>这个all方法返回的Promise使用then方法，给予处理函数的参数是一个响应数组（顺序与传入all的Promise的顺序相同）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//省略三个fetch</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([fetchPromise1, fetchPromise2, fetchPromise3])</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">responses</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> response <span class="keyword">of</span> responses) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`status：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>( <span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="comment">//只要有一个fetch失败就会触发错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`获取失败：<span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h3><p>同步变异步：async关键字能够让自定义的一个普通函数成为异步函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>异步变同步：await关键字能够使得代码在该点上等待，直到Promise被完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response=<span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://ceshiceshi.com/ceshi.json&#x27;</span>)</span><br><span class="line">  <span class="comment">//下面的代码会在fetch完成后再执行</span></span><br><span class="line">  <span class="keyword">if</span>(!response.<span class="property">ok</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请求错误：$&#123;response.status&#125;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//注意，json方法也是异步的</span></span><br><span class="line">  <span class="keyword">const</span> ceshiJson=<span class="keyword">await</span> response.<span class="title function_">json</span>(); </span><br><span class="line">  <span class="comment">//添加了await关键字后，ceshiJson是一个普通的json对象；不然它仍然是一个Promise对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(error)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;$&#123;error&#125;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Promise构造器"><a href="#Promise构造器" class="headerlink" title="Promise构造器"></a>Promise构造器</h2><p>Promise构造器使用单个函数作为参数，这个函数被称为执行器，当创建一个新的Promise的时候需要实现这个执行器</p>
<p>执行器本身采用两个参数，这两个参数都是函数，通常称作resolve和reject</p>
<p>执行器本身实现一个异步函数，如果异步函数成功，则会执行在执行器内调用的resolve；如果异步函数失败（包括执行器内的代码），如fetch时网络阻止，主动的throw，，则会<strong>自动</strong>调用reject</p>
<p><em>注意一下理解，作为执行器作为参数，本身是个函数，执行器的两个参数也是函数</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> flag=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#flag&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(flag&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;someting wrong&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">resolve</span>(para1,para2);<span class="comment">//如果之前的异步函数，以及执行器内前面的代码没有出现问题，这里调用了resolve</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>


<h2 id="worker简介"><a href="#worker简介" class="headerlink" title="worker简介"></a>worker简介</h2><p>为了避免多线程环境下的同步问题（尤其是对相同变量的访问），主代码和worker代码永远不能直接访问彼此的变量。这一为了workers不能访问DOM</p>
<p>有三种不同类型的workkers：</p>
<ul>
<li>dedicated workers</li>
<li>shared workers</li>
<li>service workers</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>客户端git配置与使用</title>
    <url>/2022/09/29/%E5%AD%A6%E4%B9%A0/Linux%E7%9B%B8%E5%85%B3/git%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>这篇文章主要记录一些客户端用户使用git的方法</p>
<ul>
<li>2022-10-13 记录了学习的git基础操作，包括：<ul>
<li>git安装与配置</li>
<li>创建仓库和获取仓库</li>
<li>查看当前仓库的状态，是否存在未提交和已修改文件</li>
<li><strong>使用git记录更新</strong>：文件启用和取消追踪，三种文件状态（未修改、已修改、已暂存）的切换，主要涉及add、commit操作</li>
<li>设置忽略追踪</li>
<li>远程仓库的使用，包括设置远程仓库、查看远程仓库、抓取和拉取、推送</li>
<li>打标签，关于标签的创建、查看、共享到远程仓库、删除等</li>
</ul>
</li>
</ul>
<p>关于分支的内容还没有开始记录</p>
<span id="more"></span>
<h1 id="安装和初次配置git"><a href="#安装和初次配置git" class="headerlink" title="安装和初次配置git"></a>安装和初次配置git</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><em>以git 2.8.0为准</em><br>在CentOS上安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<p>注意，下文给出的例子中有些命令已经被替代，以新命令为准（存在新旧差异的命令一般会给出新命令的提示）</p>
<h2 id="初次运行前配置"><a href="#初次运行前配置" class="headerlink" title="初次运行前配置"></a>初次运行前配置</h2><p>git自带一个 git config 工具，帮助设置外观和行为的配置变量。这些变量存储在：</p>
<ol>
<li>&#x2F;etc&#x2F;gitconfig文件：包含系统上每一个用户及他们仓库的通用配置。传递–system参数会读写该文件</li>
<li>~&#x2F;.gitconfig 或 ~&#x2F;.git&#x2F;.gitconfig文件，只针对当前用户。传递–global参数会读写该文件，对系统上当前用户的所有仓库生效</li>
<li>当前使用仓库的的.git&#x2F;config文件，只针对该仓库，传递–local参数会让git强制读写该文件（默认情况下用的就是它）</li>
</ol>
<p>低层配置变量会覆盖上层</p>
<p>可以使用以下命令查看所有配置，以及所在文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list --show-origin</span><br></pre></td></tr></table></figure>

<h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>设置用户名和邮件地址，每一个git提交都会使用这些信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.name &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>
<p><em>通常情况下git config使用–global参数，除非需要对特定项目使用特别的配置</em></p>
<h3 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h3><p>配置默认文本编辑器，当git需要用户输入信息时会调用它，如配置Emacs:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.editor emacs</span><br></pre></td></tr></table></figure>

<h3 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h3><p>列出git当前可以找到的配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<p>git会从不同层级的文件读取配置，最终使用的是低层配置</p>
<p>检查git的某一项配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">git config &lt;key&gt;</span></span><br><span class="line">git config user.name</span><br></pre></td></tr></table></figure>

<h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><p>查看快速参考:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add -h</span><br></pre></td></tr></table></figure>

<h1 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h1><h2 id="获取仓库"><a href="#获取仓库" class="headerlink" title="获取仓库"></a>获取仓库</h2><p>通常有两种获取git仓库的方式：</p>
<ol>
<li>将尚未进行版本控制的本地目录转换为git仓库</li>
<li>从其他服务器克隆一个已经存在的git仓库</li>
</ol>
<h3 id="在本地目录中初始化仓库"><a href="#在本地目录中初始化仓库" class="headerlink" title="在本地目录中初始化仓库"></a>在本地目录中初始化仓库</h3><p>初始化仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先进入项目文件夹，然后再执行初始化命令</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>这样会创.git子目录，包含git仓库的所有必须文件。此时项目里的文件还未被追踪</p>
<p>追踪文件并进行初始提交：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add *.c</span><br><span class="line">git add LICENSE</span><br><span class="line">git commit -m &#x27;initial project version&#x27;</span><br></pre></td></tr></table></figure>
<p>（这些指令后续再解释）现在已经得到了文件被追踪的仓库</p>
<h3 id="克隆现有的仓库"><a href="#克隆现有的仓库" class="headerlink" title="克隆现有的仓库"></a>克隆现有的仓库</h3><p>克隆仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">git <span class="built_in">clone</span> &lt;url&gt; [&lt;自定义本地仓库名称&gt;]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比如克隆git的链接库libgit2</span></span><br><span class="line">git clone https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure>
<p>这会在当前目录下创建一个名为libgit2的目录，在其中初始化一个.git文件夹，并<strong>从远程仓库拉取所有数据</strong>放入.git文件夹，然后从中读取最新版本的文件的拷贝放到libgit2目录下</p>
<p>拉取使用的url可以是https://协议、git://协议、SSH传输协议</p>
<h2 id="记录更新"><a href="#记录更新" class="headerlink" title="记录更新"></a>记录更新</h2><p>工作目录下的每一个文件只有两种状态：<strong>已跟踪</strong>或<strong>未跟踪</strong>，已跟踪的文件有三种状态：未修改（unmodified），已修改（modifeid），已暂存（staged）</p>
<p>文件的状态变化周期：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Untracked    Unmodified    Modified     Staged</span><br><span class="line">    |            |            |           |</span><br><span class="line">    |===add=============================&gt; |</span><br><span class="line">    |            |==edit====&gt; |           |</span><br><span class="line">    |            |            |==stage==&gt; |</span><br><span class="line">    | &lt;==remove==|            |           |</span><br><span class="line">    |            | &lt;============commit====|</span><br><span class="line">    |            |            |           |</span><br></pre></td></tr></table></figure>

<h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><p>可以使用git status命令查看哪些文件处于什么状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>可能会有这样的输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>
<p>这样的输出表示工作目录“相当干净”：</p>
<ol>
<li>显示当前所在分支</li>
<li>同远程服务器对应分支没有偏离（现在是默认分支master）</li>
<li>上次提交后未出现更改，且没有未追踪状态的新文件</li>
</ol>
<p>如果有未追踪的文件，则会给出提示，并列出那些未被追踪的文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;some message&#x27;</span> &gt; README</span></span><br><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">    README</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>

<p>使用选项-s或–short会得到更紧凑的一种格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M README</span><br><span class="line">MM Rakefile</span><br><span class="line">A  lib/git.rb</span><br><span class="line">M  lib/simplegit.rb</span><br><span class="line">?? LICENSE.txt</span><br></pre></td></tr></table></figure>
<p>新添加的未跟踪文件前面有??标记；<br>新添加到暂存区中的文件前面有A标记（原先未追踪，这是第一次添加）；<br>修改过的文件有M标记，左栏M标记表示已修改并暂存（即暂存区有它的已修改文件），右栏M标记表示在工作区中已修改，但未暂存</p>
<h3 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h3><p>使用命令 git add 开始追踪一个文件，或递归地追踪一个目录下所有文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add README</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &#x27;origin/master&#x27;.</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README</span><br></pre></td></tr></table></figure>
<p>只要是在Changes to be committed这行下的，就说明是已暂存状态</p>
<h3 id="暂存已修改文件"><a href="#暂存已修改文件" class="headerlink" title="暂存已修改文件"></a>暂存已修改文件</h3><p>如果修改了一个已被跟踪的文件，那么此时检查文件状态（git status），会有如下输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">    modified:   README.md</span><br></pre></td></tr></table></figure>
<p>Changes not staged for commit这行下面列出了还未暂存的文件，现在使用git add命令就能够实现文件的提交</p>
<p><em>git add是一个多功能命令，可以跟踪新文件，暂存已修改文件，还能把有冲突的文件标记为已解决等。因此这个命令应该理解为“精确地将文件添加到下一次提交中”</em></p>
<p><em>如果同一个文件再提交前进行了两次暂存，那么最终只会提交最新暂存的版本</em></p>
<h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些无需纳入git管理的文件，如日志文件和编译过程中的临时文件，可以创建名为 .gitignore的文件，列出要忽略的文件模式:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">cat</span> .gitignore</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略所有的 .a 文件</span></span><br><span class="line">*.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略任何目录下名为 build 的文件夹</span></span><br><span class="line">build/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure>
<p>（规则就不介绍了）</p>
<h3 id="查看已暂存和未暂存的修改"><a href="#查看已暂存和未暂存的修改" class="headerlink" title="查看已暂存和未暂存的修改"></a>查看已暂存和未暂存的修改</h3><p>命令行中的git diff输出看上去有些繁杂，不记录</p>
<h3 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h3><p><em>每次提交前建议使用git status查看是否有未暂行的文件，若不暂存它们，则提交时不会记录这些尚未暂存的变化</em></p>
<p>提交命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>
<p>运行提交命令后，会启动选择的文本编辑器来输入提交说明</p>
<p>另外也可以在commit命令后添加-m选项，在命令中添加提交信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;commit message&quot;</span></span></span><br><span class="line">[master 463dc4f] Story 182: Fix benchmarks for speed</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 README</span><br></pre></td></tr></table></figure>
<p>提交后会显示当前提交的分支，完整SHA-1校验和，修改了多少文件，多少行添加和修改过</p>
<h3 id="跳过使用暂存区"><a href="#跳过使用暂存区" class="headerlink" title="跳过使用暂存区"></a>跳过使用暂存区</h3><p>在提交时加上-a选项，git会自动把所有跟踪的文件暂存并提交，省略手动git add的步骤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>

<h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p>可以使用git rm命令完成移除文件的工作，并连带从工作目录中删除指定文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm README.md</span><br></pre></td></tr></table></figure>
<p>下次提交时，该文件就不会纳入版本管理</p>
<p>如果已经暂存过该文件，则必须使用-f选项强制删除；如果仅是放弃追踪，希望保留工作目录上的文件，则使用–cached选项</p>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>git对于移动文件使用git rm命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git mv file_from file_to</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等价于</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mv</span> README.md README</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git <span class="built_in">rm</span> README.md</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git add README</span></span><br></pre></td></tr></table></figure>
<p>甚至也使用git rm命令完成文件的重命名</p>
<p>注意理解，git rm的行为git是可以理解为一个移动操作的，但是新位置文件却不存在“旧版本”（严格上说，每次提交都是一个版本，是不存在单独的一个文件的版本记录的，所以对于git来说，它知道迁移行为并且保存了迁移的记录。但是，对于新位置文件而言，它并不知晓旧位置文件的版本记录）</p>
<h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><p>查看提交历史的工具为git log命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p>不传入任何参数的情况下，git log会按照时间先后顺序列出所有的提交</p>
<p>git log的常用选项如下：</p>
<ul>
<li>选项–stat，额外显示每次提交的简略统计信息</li>
<li>选项-p或–patch，以补丁形式显示差异</li>
<li>选项–pretty&#x3D;format:”…” ，可以定制输出格式</li>
<li>更多的限制输出选项：<ul>
<li>选项-<n>，显示最近n条提交</li>
<li>选项–since,–after，如 –since&#x3D;2.weeks</li>
<li>选项–until,–before</li>
<li>选项–author,–committer ，</li>
<li>选项–grep，显示提交说明中包含指定字符串的提交</li>
<li>选项-S，显示添加或删除内容匹配指定字符串的提交</li>
<li>其他</li>
</ul>
</li>
</ul>
<h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>git中任何提交过的东西都是可以恢复的，但是对于在已暂存文件、已修改文件，如果没有妥善操作，丢失后可能再也找不到了</p>
<h3 id="补提交（修改上次提交）"><a href="#补提交（修改上次提交）" class="headerlink" title="补提交（修改上次提交）"></a>补提交（修改上次提交）</h3><p>运行带有–amend选项的提交命令可以重新提交：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">发现漏了一个文件，或需要修改提交信息</span></span><br><span class="line">git add forgotten_file</span><br><span class="line">git commit --amend -m &quot;amend commit&quot;</span><br></pre></td></tr></table></figure>
<p>这个“修补提交”命令，是对上一次提交的补充和覆盖，如果带上-m选项，则会覆盖旧提交信息。</p>
<p>在提交记录里只会存在经过修补的提交记录（更像是一个新提交），旧提交的存在不会被记录</p>
<p><em>这个操作若使用不当，会造成代码丢失</em></p>
<h3 id="取消暂存文件"><a href="#取消暂存文件" class="headerlink" title="取消暂存文件"></a>取消暂存文件</h3><p>取消暂存文件使用git reset命令，注意参考git status给出的提示（不同版本命令不同，以提示为准）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参考给出的提示： git reset HEAD &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行取消暂存命令，取消一个已暂存文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出当取消暂存后文件状态，这里显示“已修改“</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset HEAD CONTRIBUTING.md</span></span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M	CONTRIBUTING.md</span><br></pre></td></tr></table></figure>
<p><em>git reset是一个很危险的命令，如果加上–hard选项更是如此。当在修改了工作目录的文件，又取消了暂存的时候，那么这个暂存的内容将会丢失</em></p>
<h3 id="撤销对文件的修改"><a href="#撤销对文件的修改" class="headerlink" title="撤销对文件的修改"></a>撤销对文件的修改</h3><p>撤销对文件的修改，注意参考git status给出的提示（不同版本命令不同，以提示为准）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参考给出提示，git restore &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行撤销文件修改的命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git restore file2.txt</span></span><br></pre></td></tr></table></figure>
<p><em>撤销对文件修改命令是一个很危险的命令，工作目录的文件会被最近的旧版本覆盖，不会留有记录</em></p>
<h2 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h2><h3 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h3><p>使用git remote命令，可以查看已经配置的远程仓库服务器。加上-v选项可以查看对应的url</p>
<p><em>如果使用clone命令克隆了一个仓库，会自动将其添加为远程仓库，并以orgin简写</em></p>
<h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>使用git remote add命令添加一个新的远程git仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt; </span><br></pre></td></tr></table></figure>
<p>shortname是在本机上自定义的远程仓库名称，以后在拉去和推送代码时，可以使用该名称</p>
<h3 id="从远程仓库抓取与拉取"><a href="#从远程仓库抓取与拉取" class="headerlink" title="从远程仓库抓取与拉取"></a>从远程仓库抓取与拉取</h3><p>命令git fetch &lt;remote&gt;会访问远程仓库，拉取本地仓库还没有的数据。这些数据下载到本地后，需要用户手动合入当前工作</p>
<p>如果你的当前分支设置了跟踪远程分支，命令git pull会自动抓取远程分支并合并到当前分支。默认情况下git clone会自动设置本地master追踪远程仓库master</p>
<h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p>使用git push &lt;remote&gt; &lt;branch&gt;将分支推送至远程服务器。执行这条命令需要的条件是，当前用户具有写入权限，且上次拉取前没有人推送过</p>
<h3 id="查看某个远程仓库的详情"><a href="#查看某个远程仓库的详情" class="headerlink" title="查看某个远程仓库的详情"></a>查看某个远程仓库的详情</h3><p>查看某个远程仓库使用git remote show &lt;remote&gt; 命令</p>
<p>这个命令会列出服务器的分支状态（new、tracked、stale），使用git push推送的目标远程分支，使用git pull拉取后自动合并的目标本地分支</p>
<h3 id="远程仓库的重名"><a href="#远程仓库的重名" class="headerlink" title="远程仓库的重名"></a>远程仓库的重名</h3><p>可以使用git remote rename来修改远程仓库的简写名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote rename pb ppbb</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line">origin</span><br><span class="line">ppdd</span><br></pre></td></tr></table></figure>

<h3 id="远程仓库的移除"><a href="#远程仓库的移除" class="headerlink" title="远程仓库的移除"></a>远程仓库的移除</h3><p>可以使用git remote remove移除一个远程仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote remove ppdd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span></span><br><span class="line">orgin</span><br></pre></td></tr></table></figure>

<h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><p>git可以给仓库历史中某一个提交打上标签，比较有代表性的是，标记发布节点（v1.0、v2.0等）</p>
<h3 id="列出标签"><a href="#列出标签" class="headerlink" title="列出标签"></a>列出标签</h3><p>git tag命令可以列出已有标签，可以带上选项-l或–list：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此时有无-l选项效果一样</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag</span></span><br><span class="line">v1.0</span><br><span class="line">v1.1</span><br><span class="line">v1.2</span><br><span class="line">v2.0</span><br><span class="line">v2.1</span><br><span class="line">v3.0</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">带上-l选项，后面提供一个统配模式</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag -l <span class="string">&quot;v2.*&quot;</span></span></span><br><span class="line">v2.0</span><br><span class="line">v2.1</span><br></pre></td></tr></table></figure>

<h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>git支持两种标签：轻量标签（lightweight）和附注标签（annotated），通常建议创建附注标签</p>
<p>轻量标签项一个不会改变的分支–它只是某个特定提交的引用</p>
<p>附注标签是储存在git数据库中的一个完整对象，是可以被校验的，其中包含打标签者名字、电子邮件、日期时间、标签信息，并且可以使用GPG签名验证</p>
<p>创建<strong>附注标签</strong>最简单的方式是，运行git tag时指定-a选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加附注标签时-m选项指定标签信息是必须的</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">否则git会打开编辑器要求输入信息</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">给当前工作目录所在版本da<span class="string">&#x27;biao&#x27;</span>qian</span></span><br><span class="line">git tag -a v1.4 -m &quot;my version 1.4&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示标签信息，以及对应的提交信息（打标签者名字、电子邮件、日期时间）</span></span><br><span class="line">git show v1.4</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>创建<strong>轻量标签</strong>只需要提供标签名字，轻量标签的本质是将“提交检验和”存储到一个文件中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag v1.4-light</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示提交信息，没有额外的标签信息</span></span><br></pre></td></tr></table></figure>

<h3 id="后期打标签"><a href="#后期打标签" class="headerlink" title="后期打标签"></a>后期打标签</h3><p>可以对过去的提交打标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">假设有这样的提交历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --pretty=online</span></span><br><span class="line">6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch &#x27;experiment&#x27;</span><br><span class="line">0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function</span><br><span class="line">9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile</span><br><span class="line">964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">假设要在 updated rakefile处补打标签</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要在命令的末尾指定提交的检验和（或部分检验和）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag -a v1.2 9fceb02</span></span><br></pre></td></tr></table></figure>

<h3 id="共享标签"><a href="#共享标签" class="headerlink" title="共享标签"></a>共享标签</h3><p>默认情况下，git push命令不会传送标签到远程服务器上，需要使用git push &lt;remote&gt; &lt;tagname&gt;来显示推送标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送一个标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin v1.3</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">加上参数--tags，推送所有不在远程服务器上的标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --tags</span></span><br></pre></td></tr></table></figure>

<h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><p>要删除本地仓库上的标签，可以使用git tag -d &lt;tagname&gt;命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除一个轻量标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag -d v1.4</span></span><br><span class="line">Deleted tag &#x27;v1.4&#x27; (was e7d5add)</span><br></pre></td></tr></table></figure>

<p>上述命令不会移除远程仓库中的标签，有两种方式可以删除远程仓库的分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一种方式，将冒号前面的空值推送到远程标签名，</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/v1.4</span></span><br><span class="line">To /git@github.com:xxx/xxx.git</span><br><span class="line">- [deleted]         v1.4</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第二种更直观的删除远程标签</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --delete v1.5</span></span><br></pre></td></tr></table></figure>

<h3 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h3><p>如果想查看某个标签所指向的文件版本，可以使用git checkout，但这个命令有不少副作用，如分离头指针，因此最好搭配创建分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b branchVersion2 v2.0</span></span><br><span class="line">Switched to a new branch &#x27;branchVersion2&#x27; </span><br></pre></td></tr></table></figure>

<h1 id="分支模型"><a href="#分支模型" class="headerlink" title="分支模型"></a>分支模型</h1><p>git保存的不是文件的变化或者差异，而是一系列不同时刻的<strong>快照</strong></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>记录--centos下vsftpd配置</title>
    <url>/2022/09/27/%E5%AD%A6%E4%B9%A0/Linux%E7%9B%B8%E5%85%B3/%E8%AE%B0%E5%BD%95--centos%E4%B8%8Bvsftp%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>为方便不懂计算机的朋友配置一个博客，启用一个ftp服务来传输文件。配置过程中发现 Xshell + Xftp 工具及其方便（而且更安全），最终没有采用ftp方法，但还是简要记录一下关键地方</p>
<span id="more"></span>
<h1 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y vsftp</span><br></pre></td></tr></table></figure>

<h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><h2 id="配置vdftp-conf"><a href="#配置vdftp-conf" class="headerlink" title="配置vdftp.conf"></a>配置vdftp.conf</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>
<p>修改以下字段：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">anonymous_enable=NO #禁止匿名登录</span><br><span class="line"></span><br><span class="line">local_unmask=750 #便于用户修改</span><br><span class="line"></span><br><span class="line">chroot_local_users=YES #启用这个会让 local_users 文件里的用户无法在ftp客户端更改目录</span><br><span class="line">chroot_list_enable=NO #设置为NO会让 user_list 里的用户无法登录</span><br><span class="line"></span><br><span class="line">local_root=/var/www/ftphome #指定访问ftp时的默认目录</span><br><span class="line"></span><br><span class="line">#配置被动模式</span><br><span class="line">pasv_enabl=YES</span><br><span class="line">pasv_address=服务器的公网ip</span><br><span class="line">pasv_min_port=允许的最小高位端口 #需要在安全组上通过</span><br><span class="line">pasv_min_port=允许的最高高位端口 #需要在安全组上通过</span><br></pre></td></tr></table></figure>

<h2 id="用户和文件管理"><a href="#用户和文件管理" class="headerlink" title="用户和文件管理"></a>用户和文件管理</h2><p>添加用户、修改文件权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd -g 1001 ftpusers</span><br><span class="line">mkdir /var/www</span><br><span class="line">mkdir /var/www/ftphome</span><br><span class="line">useradd -d /var/www/ftphome -g ftpusers -s /sbin/nologin fuser</span><br><span class="line">passwd fuser</span><br><span class="line"></span><br><span class="line">chown -R fuser:ftpusers /var/www/ftphome</span><br><span class="line">chmod -R 770 /var/www/ftphome</span><br></pre></td></tr></table></figure>

<h2 id="需要注意的pam修改"><a href="#需要注意的pam修改" class="headerlink" title="需要注意的pam修改"></a>需要注意的pam修改</h2><p>注意，由于设置了用户无法登录shell，则要修改pam的认证方式：<br>编辑相关文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim  /etc/pam.d/vsftpd</span><br></pre></td></tr></table></figure>
<p>修改配置a uth required pam_shells.so修改为-&gt;auth required pam_nologin.so </p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Linux相关</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>简单介绍firewalld配置</title>
    <url>/2022/09/25/%E5%AD%A6%E4%B9%A0/Linux%E7%9B%B8%E5%85%B3/firewall%E5%9C%A8centos7%E4%B8%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>从centos7开始，默认使用firewalld来配置防火墙（旧版的默认安装iptables）。本文简要记录一下firewalld的简单用法。</p>
<span id="more"></span>

<h1 id="firewalld简介"><a href="#firewalld简介" class="headerlink" title="firewalld简介"></a>firewalld简介</h1><p>firewalld 是由红帽开发的防火墙守护进程， 默认使用 nftables（一个网络过滤器）</p>
<p>firewalld支持动态管理（无需关闭用户连接即可更新），支持使用区域zone来标识可信等级，使用分离的运行时配置和永久设置。</p>
<p>firewall配置文件存储在 &#x2F;usr&#x2F;lib&#x2F;firewalld&#x2F; 和 &#x2F;etc&#x2F;firewall&#x2F; 目录中：</p>
<ol>
<li>系统配置目录，目录中存放定义好的网络服务和端口参数，系统参数，不要修改 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 /usr/lib/firewalld/</span><br><span class="line">2 /usr/lib/firewalld/services</span><br><span class="line">3 /usr/lib/firewalld/zones</span><br></pre></td></tr></table></figure></li>
<li>用户配置目录 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 /etc/firewalld/</span><br><span class="line">2 /etc/firewalld/services</span><br><span class="line">3 /etc/firewalld/zones</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="centos下安装和基本使用"><a href="#centos下安装和基本使用" class="headerlink" title="centos下安装和基本使用"></a>centos下安装和基本使用</h1><ul>
<li>yum install firewalld</li>
<li>启用服务 systemctl start firewalld.service</li>
<li>可以使用控制台工具 firewall-cmd 来控制防火墙规则，firewall-offline-cmd是服务离线时的配置工具</li>
<li>firewall-config命令提供了一个图形界面</li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>使用 firewall-cmd 可用于运行时更改配置，这些大部分配置会在重启后失效，使用–permanent参数可以永久配置（这不会更改运行时配置，可以使用–reload重载规则）</p>
<h2 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h2><p>区域（zone）是一系列可用于指定接口的规则</p>
<h3 id="区域命令"><a href="#区域命令" class="headerlink" title="区域命令"></a>区域命令</h3><p>有关区域的命令：</p>
<ul>
<li>查看当前区域机器应用的接口  firewall-cmd –get-active-zone</li>
<li>列出所有区域的配置  firewall-cmd –list-all-zone</li>
<li>列出指定区域的配置  firewall-cmd –info-zone&#x3D;<em>zone_name</em></li>
<li>更改接口的区域  firewall-cmd –zone&#x3D;<em>zone_name</em> –change-interface&#x3D;<em>interface_name</em></li>
</ul>
<p>一些命令需要传递区域参数 –zone&#x3D;<em>zone_name</em> ，若不指定则使用默认区域</p>
<p>可以查询、更改默认区域：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询默认区域</span></span><br><span class="line">firewall-cmd --get-default-zone</span><br><span class="line"><span class="comment">#更改默认区域为public；注意，这个改变时临时的</span></span><br><span class="line">firewall-cmd --set-default-zone=public</span><br></pre></td></tr></table></figure>

<p>区域特性的规则集为：</p>
<ul>
<li>drop：丢弃任何接收的网络数据包，仅有能发送出的去网络连接</li>
<li>block：任何接收的网络连接都被ipv4的cmp-host-prohibited信息和ipv6的icmp6-adm-prohibited信息拒绝</li>
<li>public：这个是firewalld的默认值，不相信网络内其他计算机，只能接受经过选取的连接</li>
<li>external：似乎与public（，目前查到的资料对这一点描述混乱）</li>
<li>dmz：非军事区</li>
<li>work：可以基本相信网络内其他计算机，仅仅接收经过选择的连接</li>
<li>home：基本相信网络内其他计算机，仅仅接收经过选择的连接</li>
<li>internal：内部，基本相信网络内其他计算机，仅仅接受经过选择的连接</li>
<li>trusted：可接受所有网络连接</li>
</ul>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>服务时为特定守护程序预配置的规则，例如匹配SSH的服务在被分配到一个区域后会开放22端口</p>
<p>列出、查询服务信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出所有可用服务</span></span><br><span class="line">firewall-cmd --get-service</span><br><span class="line"><span class="comment">#查询特定服务的信息</span></span><br><span class="line">firewall-cmd --info-service service_name</span><br></pre></td></tr></table></figure>

<p>添加、移除服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加一个服务到public区域</span></span><br><span class="line">firewall-cmd --zone=public --add-service service_name</span><br><span class="line"><span class="comment">#从public区域移除一个服务</span></span><br><span class="line">firewall-cmd --zone=public --remove-service service_name</span><br></pre></td></tr></table></figure>

<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>可以直接在指定区域上端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给public区域开放10034端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port 10034</span><br><span class="line"><span class="comment">#给public区域移除10034端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port 10034</span><br></pre></td></tr></table></figure>

<h2 id="NAT地址伪装"><a href="#NAT地址伪装" class="headerlink" title="NAT地址伪装"></a>NAT地址伪装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#firewall和iptable都可进行NAT地址伪装的效果；以下两条命令有相同效果</span></span><br><span class="line">firewall-cmd --zone=public --add-masquerade</span><br><span class="line">iptables -t nat -A POSTROUTING -j MASQUERADE</span><br></pre></td></tr></table></figure>

<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>如果在路由器上配置了firewalld，而且还如上开启了NAT地址伪装，则通过firewalld设置端口转发很简单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将外部端口上的 12345/tcp 端口转发到内部网络 10.20.30.40 的 22 （标准 SSH） 端口</span></span><br><span class="line">firewall-cmd --zone=public --add-forward-port=12345:proto=tcp:toport=22:toaddr=10.20.30.40</span><br><span class="line"><span class="comment">#移除此端口转发</span></span><br><span class="line">firewall-cmd --zone=public --remove-forward-port=port=12345:proto=tcp:toport=22:toaddr=10.20.30.40</span><br></pre></td></tr></table></figure>

<h1 id="设置有效时间"><a href="#设置有效时间" class="headerlink" title="设置有效时间"></a>设置有效时间</h1><h2 id="设置端口或服务的有效时间"><a href="#设置端口或服务的有效时间" class="headerlink" title="设置端口或服务的有效时间"></a>设置端口或服务的有效时间</h2><p>使用 –timeout&#x3D;<em>value</em> 可以设置端口或服务的有效时间，默认单位为秒，可添加后缀m（分）、h（小时）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置SSH服务的有效时间为3小时</span></span><br><span class="line">firewall-cmd --add-service ssh --<span class="built_in">timeout</span>=3h</span><br></pre></td></tr></table></figure>
<p>注意， –timeout&#x3D;<em>value</em> 和 –permanent 互斥</p>
<h2 id="将运行时设置配置持久化"><a href="#将运行时设置配置持久化" class="headerlink" title="将运行时设置配置持久化"></a>将运行时设置配置持久化</h2><p>可以将运行时的配置持久化； 添加 –permanent 则是设定持久化规则，并不会生效为运行时规则（除非–reload重载）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --runtime-to-permanent</span><br></pre></td></tr></table></figure>

<h2 id="检查服务配置"><a href="#检查服务配置" class="headerlink" title="检查服务配置"></a>检查服务配置</h2><p>默认支持的服务的配置文件存放在 /usr/lib/firewalld/service/<br>用户创造的服务文件存放在 /etc/firewalld/sercices/</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Linux相关</category>
      </categories>
  </entry>
  <entry>
    <title>CSS排版</title>
    <url>/2022/09/21/%E5%AD%A6%E4%B9%A0/web%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0--CSS%E6%8E%92%E7%89%88/</url>
    <content><![CDATA[<ul>
<li>2022-09-23 暂时搁置CSS排版的整理，预计几天后重启<span id="more"></span></li>
</ul>
<p><strong>引导：</strong></p>
<ol>
<li>介绍布局<br> 重述CSS中关于布局的重要知识点，如display值</li>
<li>正常布局流<br> 没有改变默认布局规则下的页面元素布局方式</li>
<li>弹性盒<br> 弹性盒是一种新技术，允许快速创建实现一些复杂灵活的布局和功能</li>
<li>网格<br> 网格是一个成熟的设计工具，许多现代网站布局是基于规则网格</li>
<li>浮动<br> float属性已经称为在网页上创建多个列布局的最常用工具</li>
<li>定位<br> 定位语序从常规文档布局中取出元素，并使它们有不同的行为</li>
<li>多列布局<br> 提供了一种多列组织方式</li>
<li>响应式设计  </li>
<li>媒体查询入门指南<br> 媒体查询是响应式 Web 设计的一个关键部分，允许根据视区的大小创建不同的布局</li>
<li>传统布局方法</li>
<li>支持旧浏览器</li>
</ol>
<h1 id="介绍布局"><a href="#介绍布局" class="headerlink" title="介绍布局"></a>介绍布局</h1><p>本节设计正常布局流、display属性、弹性盒子、网格、浮动、定位、CSS表格布局、多列布局。它们各有优缺点</p>
<h2 id="正常布局流"><a href="#正常布局流" class="headerlink" title="正常布局流"></a>正常布局流</h2><p>不对页面进行任何布局控制，完全按照源码中出现的先后次序显示元素</p>
<h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><p>在CSS中实现页面布局的主要方法是设定display属性的值。正常流中所有内容都有一个display值，表现为块级设置display:block; ，表现为内联设置为display:inline; </p>
<p>此外 dispaly:flex 可以设置弹性盒子布局模块 </p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式化文本</title>
    <url>/2022/09/18/%E5%AD%A6%E4%B9%A0/web%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0--CSS%E6%A0%B7%E5%BC%8F%E5%8C%96%E6%96%87%E6%9C%AC/</url>
    <content><![CDATA[<ul>
<li>2022-09-22 完成CSS样式化文本的整理</li>
</ul>
<span id="more"></span>

<p><strong>引导：</strong></p>
<ul>
<li>基本文本和字体样式化<br>  文本和字体样式的所有基础，包括设置字体粗细（font weight）、字体系列及样式（family and style）、字体缩写（font shorthand）、文本排列（text alignment）和其他的效果，还有行（line）以及字符间距（letter spacing）</li>
<li>样式化列表<br>  了解一些专门用于列表的样式</li>
<li>样式化链接<br>  理解有效使用伪类取修饰链接的状态，以及怎么去修复不同的接口功能（例如导航菜单所有用的链接）</li>
<li>网络字体<br>  下载自定义字体，实现更为不同的个性化字体样式</li>
</ul>
<h1 id="基本文本和字体样式化"><a href="#基本文本和字体样式化" class="headerlink" title="基本文本和字体样式化"></a>基本文本和字体样式化</h1><p>用于样式文本的CSS属性通常可以分为两类：字体样式和文本布局风格</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h3><p>color属性设置选择元素的前景内容的颜色，通常就是文本，或者是使用 text-decoration 属性放置在文本下方活上方的线，或者是其他东西</p>
<h3 id="字体种类"><a href="#字体种类" class="headerlink" title="字体种类"></a>字体种类</h3><p>font-family属性为浏览器指定一个字体或字体列表。浏览器只会用当前机器上可用的字体应用到当前正在访问的网站上，如果字体不可用则会替代为默认字体</p>
<p>字体栈，形如 font-family: “Trebuchet MS”, Verdana, sans-serif;  从前往后查看是否可用，第一个可用的字体会被应用选中的元素</p>
<h3 id="默认字体"><a href="#默认字体" class="headerlink" title="默认字体"></a>默认字体</h3><p>CSS定义了5个常用的字体名称：serif、sans-serif、 monospace、cursive、fantasy</p>
<p>即使是这些默认字体，实际的使用效果也取决于浏览器。其中 serif、sans-serif 和 monospace 是比较好预测的，默认情况比较合理</p>
<h3 id="字体的大小"><a href="#字体的大小" class="headerlink" title="字体的大小"></a>字体的大小</h3><p>字体大小通过font-size属性设置，常用单位是：</p>
<ul>
<li>px 像素</li>
<li>em 在这里1em等于当前元素的父元素字体大小</li>
<li>rem 在这里1rem等于根元素的字体大小</li>
</ul>
<p>元素的font-size属性是从该元素的父元素继承的，所有所有都是从整个文档的根元素&lt;\html&gt;开始，浏览器的font-size标准设置的值为16px，其他元素如&lt;h1&gt;也许有一个2em（它的最终值为32px）的默认大小</p>
<h3 id="字体样式、文字粗细、文本大小写转换、文本装饰"><a href="#字体样式、文字粗细、文本大小写转换、文本装饰" class="headerlink" title="字体样式、文字粗细、文本大小写转换、文本装饰"></a>字体样式、文字粗细、文本大小写转换、文本装饰</h3><p>CSS提供4种常用的属性来改变文本的样子：</p>
<ul>
<li>font-style 用来打开和关闭文本的斜体，很少使用</li>
<li>font-weight 设置文字粗细，可选值有 normal、bold、lighter、bolder，也可使用 100-900 的数字来控制，具体效果视所选字体而定</li>
<li>text-transform 设置转换字体<ul>
<li>none：防止任何转型</li>
<li>uppercase：所有文本转为大写</li>
<li>lowercase：所有文本转为小写</li>
<li>cappitalize 转换所有单词首字母为大写</li>
<li>full-width：所有字形转为全角，即固定宽度的正方形，允许拉丁字符和亚洲字形对齐</li>
</ul>
</li>
<li>text-decoration 设置或取消文本装饰，可一次性接收多个值<ul>
<li>none：取消已存在的文本装饰</li>
<li>underline：文本下划线</li>
<li>overline：文本上划线</li>
<li>line-throuh：穿过文本的线（对于删除线，应该用元素指定，而非样式）</li>
</ul>
</li>
</ul>
<h3 id="文本阴影"><a href="#文本阴影" class="headerlink" title="文本阴影"></a>文本阴影</h3><p>为文本应用阴影，使用text-shadow属性，最多可以使用四个值，如 text-shadow: 4px 4px 5px red;<br>这四个值的意义为：</p>
<ol>
<li>第一值指定阴影与原始文本水平偏移，必须指定；</li>
<li>第二值指定垂直偏移</li>
<li>第三值指定模糊半径</li>
<li>第四值指定阴影的基础颜色</li>
</ol>
<p>甚至可以应用多个阴影，秩序将它们用逗号分隔</p>
<h2 id="文本布局"><a href="#文本布局" class="headerlink" title="文本布局"></a>文本布局</h2><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><p>使用text-align属性来控制文本如何和它所在的内容盒子对齐，可用值如下：</p>
<ul>
<li>left：左对齐</li>
<li>right：右对齐</li>
<li>center：文字居中</li>
<li>justify：使文本展开，使所有文本行宽度相同（我认为这并不美观）</li>
</ul>
<h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p>使用line-height属性设置文本每行之间的高，它接收一般长度单位，也可设置一个无单位数作为乘数，这也是推荐做法，如 line-height: 1.5; </p>
<h3 id="字母和单词间距"><a href="#字母和单词间距" class="headerlink" title="字母和单词间距"></a>字母和单词间距</h3><p>可以使用letter-spacing设置字母间距，word-spacing设置单词间距</p>
<h1 id="样式化列表"><a href="#样式化列表" class="headerlink" title="样式化列表"></a>样式化列表</h1><p>列表大体上和其他文本一样，此外还有一些特殊属性</p>
<h2 id="列表特定样式"><a href="#列表特定样式" class="headerlink" title="列表特定样式"></a>列表特定样式</h2><p>以下三个列表的特定属性可以在&lt;ul&gt;和&lt;ol&gt;元素上设置：</p>
<ul>
<li>list-style-type 设置列表项目符号类型，以下列举几个常用的：<ul>
<li>upper-roman：大罗马数字</li>
<li>circle：空心原点</li>
<li>didc：实心远点</li>
<li>none：不显示项目符号</li>
<li>使用@counter-style 自定义的counter样式</li>
</ul>
</li>
<li>list-style-position 设置项目符号是出现在列表项内还是列表项外，直观的表现在和父级列表项的对齐方式，可以去值 inside 和 outside</li>
<li>list-style-image 允许为项目符号设置自定义图片  <dd>相比使用自定义图片使用的图片标记，缺少“项目标记”的意义；相比设置none后定义背景background系列，缺少控制效果/dd></li>
</ul>
<p>列表样式简便写法： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 又指定type又设置image，能够在无法加载图像的情况下使用type */</span></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: square <span class="built_in">url</span>(<span class="string">example.png</span>) inside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="在html列表元素种设置项目计数"><a href="#在html列表元素种设置项目计数" class="headerlink" title="在html列表元素种设置项目计数"></a>在html列表元素种设置项目计数</h2><p>在列表元素种可以添加额外属性以设置样式：</p>
<ul>
<li>属性start，它允许从1以外地数字开始计数，如 &lt;ol start&#x3D;”4”&gt; </li>
<li>布尔属性reversed，它启动列表倒计数</li>
<li>属性value，它能够为列表项目指定计数，如 &lt;li value&#x3D;”3”&gt;</li>
</ul>
<h1 id="样式化链接"><a href="#样式化链接" class="headerlink" title="样式化链接"></a>样式化链接</h1><h2 id="链接状态"><a href="#链接状态" class="headerlink" title="链接状态"></a>链接状态</h2><p>链接存在不同状态，每一种状态都可以用一种<strong>伪类</strong>表示：</p>
<ul>
<li>Link 这是链接地默认状态，属于未被访问状态</li>
<li>Visited 这个链接已被访问（存在于浏览器地历史记录），使用 :visited 伪类来应用样式</li>
<li>Hover 用户地鼠标刚好停留在这个链接上，使用 :hover 伪类来应用样式；链接默认地悬停样式是鼠标光标变成小手</li>
<li>Active 一个链接被激活时，比如被点击时，可以使用 :active 伪类来应用样式</li>
</ul>
<p>链接应该设置以下特征：</p>
<ol>
<li>链接有下划线，这是默认地链接格式</li>
<li>悬停或聚焦于链接上时，链接有相应变化，默认地悬停为鼠标变成小手</li>
<li>color 文字颜色，用户可以自定义，默认设置也足够使用</li>
<li>cursor 鼠标光标样式</li>
<li>outline 文字的轮廓，默认设置于悬停伪类</li>
</ol>
<p>注意链接伪类的选择顺序，比如一个链接被激活的时候，也很可能处于悬停状态，所以在添加样式时，要按照 :link –&gt; :visited –&gt; :hover –&gt; :active 的顺序</p>
<h2 id="设置链接图标"><a href="#设置链接图标" class="headerlink" title="设置链接图标"></a>设置链接图标</h2><p>链接图标与为图片元素创建链接不同，链接图标是作为一个链接的背景设置的，如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 为http开头（https也符合条件）的链接创建一个背景图片 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*=<span class="string">&quot;http&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://mdn.mozillademos.org/files/12982/external-link-52.png&#x27;</span>) no-repeat <span class="number">100%</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">16px</span> <span class="number">16px</span>;<span class="comment">/*对于响应式网页有必要调整一下*/</span></span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">19px</span>;<span class="comment">/*为背景图片留出空间，这样不会和文本重叠*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="样式化链接作为按钮"><a href="#样式化链接作为按钮" class="headerlink" title="样式化链接作为按钮"></a>样式化链接作为按钮</h2><p>把链接应用样式，使效果和按钮差不多，这对于设计网站导航菜单十分有用；下面是一个例子</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*对于横向导航栏，设置宽度为外部容器body的100%很有必要*/</span></span><br><span class="line"><span class="selector-tag">ul</span> &#123;<span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br><span class="line"><span class="comment">/*对于横向导航栏，设置内联展示很有必要*/</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;<span class="attribute">display</span>: inline;&#125; </span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;    </span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;<span class="comment">/*设置它能够确保控制内容不超出外部盒子*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">19.5%</span>;<span class="comment">/*容纳5个盒子，适当留出空隙*/</span></span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0.625%</span>;<span class="comment">/*为每个盒子的右侧留出少量空隙*/</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">3</span>;<span class="comment">/*让盒子有一些高度*/</span></span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*删除最右侧按钮的右侧空隙*/</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">a</span> &#123;<span class="attribute">margin-right</span>: <span class="number">0</span>;&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">background</span>: yellow;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">background</span>: orange;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">background</span>: red;<span class="attribute">color</span>: white;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Web字体"><a href="#Web字体" class="headerlink" title="Web字体"></a>Web字体</h2><h3 id="在线下载字体"><a href="#在线下载字体" class="headerlink" title="在线下载字体"></a>在线下载字体</h3><p>在CSS的开始处，有一个 @font-face ，可以指定要下载的字体文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;myFont&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;myFont.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这之后，可以使应用 @font-face 中的字体</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;myFont&quot;</span>, <span class="string">&quot;Bitstream Vera Serif&quot;</span>, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，Web字体一般都不能自由使用，不应当在没有授权的情况下使用字体</p>
<h3 id="打包字体使用"><a href="#打包字体使用" class="headerlink" title="打包字体使用"></a>打包字体使用</h3><ol>
<li>下载字体套件到本地放置到CSS同级目录，并重命名为简易的目录，如 fonts 文件夹</li>
<li>打开 stylesheet.css 文件，把包含在网页中的 @font-face 块复制到你的 web-font-start.css 文件，并放在最上面</li>
<li>每个url()函数指向需要导入到CSS的字体文件夹，确保路径正确</li>
<li>现在可以在字体栈中添加这些字体，就像任何web安全或默认的系统字体一样</li>
</ol>
<h3 id="使用在线字体服务"><a href="#使用在线字体服务" class="headerlink" title="使用在线字体服务"></a>使用在线字体服务</h3><p>在线字体服务通常会为你存储和服务字体，这样你就不用担心写@font-face代码了</p>
<p>使用 Google Fonts 在线字体服务：</p>
<ol>
<li>前往 <a href="https://www.google.com/fonts" title=" Google Fonts">Google Fonts</a></li>
<li>选择并添加喜欢的字体</li>
<li>在生成的屏幕中，复制所显示的HTML代码行，置于现有&#x2F;<link/>元素之上</li>
<li>将CSS声明复制到CSS文件中</li>
</ol>
<h3 id="刀枪不入的-font-face语法"><a href="#刀枪不入的-font-face语法" class="headerlink" title="刀枪不入的@font-face语法"></a>刀枪不入的@font-face语法</h3><p>下面是一个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="comment">/*想要引用的字体名称*/</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;ciclefina&#x27;</span>;</span><br><span class="line">  <span class="comment">/*这些行是指定导入的字体文件路径，以及每种提提文件的格式format（这一部分不是必要，但能让浏览器更快找到）*/</span></span><br><span class="line">  <span class="comment">/*对于eot的两行不太明白意思，但实际使用应该可以忽略它们*/</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/cicle_fina-webfont.eot&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/cicle_fina-webfont.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">&#x27;fonts/cicle_fina-webfont.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">&#x27;fonts/cicle_fina-webfont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">&#x27;fonts/cicle_fina-webfont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">&#x27;fonts/cicle_fina-webfont.svg#ciclefina&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>












<h1 id="额外补充-自定义css-at-rule样式"><a href="#额外补充-自定义css-at-rule样式" class="headerlink" title="额外补充-自定义css-at-rule样式"></a>额外补充-自定义css-at-rule样式</h1><h2 id="counter-style"><a href="#counter-style" class="headerlink" title="@counter-style"></a>@counter-style</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@counter-style" title="MDN上关于@counter-style的使用介绍">MDN上关于@counter-style的使用介绍</a></p>
<p>下面的 @counter-style 规则使用图片标记，这也许在制作导航栏时十分有用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@counter-style</span> winners-list &#123;</span><br><span class="line">  system: fixed; <span class="comment">/*指定算法*/</span></span><br><span class="line">  symbols: <span class="built_in">url</span>(<span class="string">pic1.svg</span>) <span class="built_in">url</span>(<span class="string">pic2.svg</span>) <span class="built_in">url</span>(<span class="string">pic3.svg</span>);</span><br><span class="line">  suffix: <span class="string">&quot; &quot;</span>; <span class="comment">/*指定一个符号添加在标记后面*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>












]]></content>
      <categories>
        <category>学习</category>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium笔记--python实现</title>
    <url>/2022/09/13/%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/Selenium%E7%AC%94%E8%AE%B0--python%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>记录 Selenuim+Python 实现web自动化的基本语法，主要是WebDriver部分，其他的并行测试Grid、IE驱动服务器在此处不会记录</p>
<ul>
<li>2022-09-29 完成了WebDriver常用部分的整理</li>
</ul>
<span id="more"></span>
<h1 id="WebDriver的准备工作"><a href="#WebDriver的准备工作" class="headerlink" title="WebDriver的准备工作"></a>WebDriver的准备工作</h1><p>WebDriver以原生的方式驱动浏览器</p>
<h2 id="安装类库"><a href="#安装类库" class="headerlink" title="安装类库"></a>安装类库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>

<h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><h3 id="用驱动管理软件来初始化驱动（推荐）"><a href="#用驱动管理软件来初始化驱动（推荐）" class="headerlink" title="用驱动管理软件来初始化驱动（推荐）"></a>用驱动管理软件来初始化驱动（推荐）</h3><p>使用管理软件自动更新并使用驱动，因为浏览器会自动更新，但驱动程序不会</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install webdriver-manager</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service <span class="keyword">as</span> ChromeService</span><br><span class="line"><span class="keyword">from</span> webdriver_manager.chrome <span class="keyword">import</span> ChromeDriverManager</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取管理器使用的位置，并传递到服务类中</span></span><br><span class="line">service = Service(executable_path=ChromeDriverManager().install())</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化驱动程序时使用Service实例</span></span><br><span class="line">driver = webdriver.Chrome(service=service)</span><br></pre></td></tr></table></figure>

<h3 id="手动下载驱动并初始化"><a href="#手动下载驱动并初始化" class="headerlink" title="手动下载驱动并初始化"></a>手动下载驱动并初始化</h3><p>在Selenium上下载浏览器驱动（这是由浏览器供应商提供的），并放在可使用位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"></span><br><span class="line">service = Service(executable_path=<span class="string">&quot;/xxx/xxx/chromedriver&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(service=service)</span><br></pre></td></tr></table></figure>
<p>也可以对浏览器驱动程序设置环境变量PATH</p>
<h1 id="驱动参数设置"><a href="#驱动参数设置" class="headerlink" title="驱动参数设置"></a>驱动参数设置</h1><h2 id="设置Options的属性"><a href="#设置Options的属性" class="headerlink" title="设置Options的属性"></a>设置Options的属性</h2><p>初始化WebDriver时可选options参数：driver &#x3D; webdriver.Chrome(service&#x3D;service1, options&#x3D;options1)</p>
<p>一个 Options 实例可以设置这些属性:</p>
<ul>
<li><p>pageLoadStrategy</p>
<p>  可以设置 normal（默认，等待所有资源）、eager（DOM访问就绪即可）、none（完全不阻塞WebDriver）三种页面加载策略</p>
</li>
<li><p>acceptInsecureCerts：如果设置为true，则浏览器将信任无效证书</p>
</li>
<li><p>timeouts：会话生存时间</p>
</li>
<li><p>proxy：设置代理，此处不详细记录</p>
</li>
<li><p>其他许多选项</p>
</li>
</ul>
<h2 id="配置远程webDriver"><a href="#配置远程webDriver" class="headerlink" title="配置远程webDriver"></a>配置远程webDriver</h2><p>暂时不记录</p>
<h1 id="浏览器交互"><a href="#浏览器交互" class="headerlink" title="浏览器交互"></a>浏览器交互</h1><p>本节代码基于 driver 已成功初始化</p>
<h2 id="获取网页信息"><a href="#获取网页信息" class="headerlink" title="获取网页信息"></a>获取网页信息</h2><p>获取网页信息：</p>
<ul>
<li>获取当前页面的标题  driver.title</li>
<li>从浏览器地址栏获取URL  driver.current_url</li>
</ul>
<h2 id="浏览器导航"><a href="#浏览器导航" class="headerlink" title="浏览器导航"></a>浏览器导航</h2><p>浏览器导航操作：</p>
<ul>
<li>打开网站   driver.get(<em>url</em>)</li>
<li>前进      drver.forward()</li>
<li>后退      driver.back()</li>
<li>刷新      driver.refresh()</li>
</ul>
<h2 id="消息弹窗"><a href="#消息弹窗" class="headerlink" title="消息弹窗"></a>消息弹窗</h2><p>Javascript有三种元素消息弹窗</p>
<p>以下的代码实现可以需要导入这些包:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions</span><br></pre></td></tr></table></figure>

<p>Alerts警告框，警告框弹出后（绝大多数浏览器下）会给出一个“确认”按钮</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等待弹窗跳出，并存储</span></span><br><span class="line">alert = wait.until(expected_conditions.alert_is_present())</span><br><span class="line"><span class="comment"># 获取文本</span></span><br><span class="line">text = alert.text</span><br><span class="line"><span class="comment"># “按下”确认按钮</span></span><br><span class="line">alert.accept()</span><br></pre></td></tr></table></figure>

<p>Confirm 确认框，相比警告框，用户还可以选择取消消息，即多一个“取消”按钮；下面的例子还呈现了警告的另一种实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等待弹窗跳出</span></span><br><span class="line">wait.until(expected_conditions.alert_is_present())</span><br><span class="line"><span class="comment"># 把警告实体存储到变量</span></span><br><span class="line">alert = driver.switch_to.alert</span><br><span class="line"><span class="comment"># 获取并存储文本信息</span></span><br><span class="line">text = alert.text</span><br><span class="line"><span class="comment"># 按下“取消”按钮</span></span><br><span class="line">alert.dismiss()</span><br></pre></td></tr></table></figure>

<p>Prompt 提示框，相比确认框，多了文本输入等功能，这与处理表单元素类似，按下取消按钮将不会提交文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等待弹窗跳出</span></span><br><span class="line">wait.until(expected_conditions.alert_is_present())</span><br><span class="line"><span class="comment"># 把警告实体存储到变量</span></span><br><span class="line">alert = Alert(driver)</span><br><span class="line"><span class="comment"># 键入信息</span></span><br><span class="line">alert.send_keys(<span class="string">&quot;ceshi ceshi&quot;</span>)</span><br><span class="line"><span class="comment"># 按下“确认”按钮</span></span><br><span class="line">alert.accept()</span><br></pre></td></tr></table></figure>

<p>官方文档里记录了三种保存警告实体的方法，不知道它们实际有什么区别，分别为：</p>
<ul>
<li>alert &#x3D; wait.until(expected_conditions.alert_is_present())</li>
<li>alert &#x3D; driver.switch_to.alert</li>
<li>alert &#x3D; Alert(driver)</li>
</ul>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>Cookie是从网站发送并存储在计算机中的一小段数据，主要用于识别用户并加载存储的信息</p>
<p>WebDriver API提供了一种内置的方法与Cookie进行交互</p>
<p>添加Cookie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;http://www.example.com&quot;</span>)</span><br><span class="line"><span class="comment"># 在当前浏览器环境添加一条cookie信息</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;bar&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>获取Cookie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取一条指定名称的cookie的数据</span></span><br><span class="line"><span class="built_in">print</span>(driver.get_cookie(<span class="string">&quot;foo&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取全部可获取cookies</span></span><br><span class="line"><span class="built_in">print</span>(driver.get_cookies())</span><br></pre></td></tr></table></figure>


<p>删除Cookie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除指定名称的一条cookie</span></span><br><span class="line">driver.delete_cookie(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前访问上下文的所有cookie</span></span><br><span class="line">driver.delete_all_cookies()</span><br></pre></td></tr></table></figure>

<p>设置sameSite属性，控制是否会和来自第三方网站的请求一起发送，引入这个是为了防止CSRF（跨站请求伪造）攻击。值为 “Strict” 则不允许一起发送，值为 “Lax” 则允许cookie和第三方网站发起的get请求一起发送</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;http://www.example.com&quot;</span>)</span><br><span class="line"><span class="comment"># 添加cookie时，设置这条cookie的sameSite属性</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;value&quot;</span>, <span class="string">&#x27;sameSite&#x27;</span>: <span class="string">&#x27;Strict&#x27;</span>&#125;)</span><br><span class="line">driver.add_cookie(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;foo1&quot;</span>, <span class="string">&quot;value&quot;</span>: <span class="string">&quot;value&quot;</span>, <span class="string">&#x27;sameSite&#x27;</span>: <span class="string">&#x27;Lax&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="内嵌框架"><a href="#内嵌框架" class="headerlink" title="内嵌框架"></a>内嵌框架</h2><p> frame 是一种已经舍弃的方法（不支持HTML5），iframe仍然普遍使用，本节讲述内嵌框架iframe的自动化方法</p>
<p>无法通过 driver.find_element(By.TAG_NAME, ‘button’) 找到在iframe里面的元素，因为Selenium只知道顶层文档中的元素，为了与按钮交互，首先要切换到框架</p>
<p>切换框架首先要选择到框架，框架的“框子”仍然属于原来的文档，这个选择的过程和普通的元素选择没有区别。之后在使用switch_to_frame 方法切换到框架</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择id为modal的元素的直接子元素中的iframe元素；也可以通过iframe的id找到它；</span></span><br><span class="line">selected_iframe = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;#modal &gt; iframe&quot;</span>)</span><br><span class="line"><span class="comment"># 也可以通过选择的iframe索引找到它</span></span><br><span class="line">selected_iframe = driver.find_elements(By.TAG_NAME,<span class="string">&#x27;iframe&#x27;</span>)[<span class="number">0</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到选择的 iframe</span></span><br><span class="line">driver.switch_to.frame(selected_iframe)</span><br><span class="line"><span class="comment"># 离开框架，切回到默认内容</span></span><br><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure>

<h2 id="窗口和标签"><a href="#窗口和标签" class="headerlink" title="窗口和标签"></a>窗口和标签</h2><p>WebDriver <strong>没有区分窗口和标签页</strong>。Selenium允许使用窗口句柄来处理标签页或窗口，它们都有一个唯一的标识符</p>
<p>所有窗口的句柄保存在 driver.window_handles 这个列表中，可以使用对它遍历，或者取长度</p>
<p>获取当前窗口的句柄 driver.current_windows_handle</p>
<h3 id="窗口的建、删与切换"><a href="#窗口的建、删与切换" class="headerlink" title="窗口的建、删与切换"></a>窗口的建、删与切换</h3><p>新建一个标签页，然后切换到它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动驱动程序</span></span><br><span class="line"><span class="keyword">with</span> webdriver.Firefox() <span class="keyword">as</span> driver:</span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">driver.get(<span class="string">&quot;https://seleniumhq.github.io&quot;</span>)</span><br><span class="line"><span class="comment"># 设置等待</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 存储原始窗口的 ID</span></span><br><span class="line">original_window = driver.current_window_handle</span><br><span class="line"><span class="comment"># 检查一下，我们还没有打开其他的窗口</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(driver.window_handles) == <span class="number">1</span></span><br><span class="line"><span class="comment"># 点击连接，然后打开一个新窗口</span></span><br><span class="line">driver.find_element(By.LINK_TEXT, <span class="string">&quot;new window&quot;</span>).click()</span><br><span class="line"><span class="comment"># 等待新窗口或标签页</span></span><br><span class="line">wait.until(EC.number_of_windows_to_be(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 循环执行，直到找到一个新的窗口句柄</span></span><br><span class="line"><span class="keyword">for</span> window_handle <span class="keyword">in</span> driver.window_handles:</span><br><span class="line">    <span class="keyword">if</span> window_handle != original_window:</span><br><span class="line">        driver.switch_to.window(window_handle)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 等待新标签页完成加载内容</span></span><br><span class="line">wait.until(EC.title_is(<span class="string">&quot;SeleniumHQ Browser Automation&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>关闭窗口，且回到之前的标签页：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭当前窗口</span></span><br><span class="line">driver.close()</span><br><span class="line"><span class="comment"># original_window 已经事先获取了原先窗口的句柄</span></span><br><span class="line">driver.switch_to.windows(original_windowl)</span><br></pre></td></tr></table></figure>
<p>注意，关闭后必须及时切回，否则可能触发 “No Such Windows Exception” (无此窗口异常)</p>
<p>在会话结束后退出浏览器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>
<p>退出行为将导致：</p>
<ul>
<li>关闭所有WebDriver会话相关的窗口</li>
<li>结束浏览器进程</li>
<li>结束驱动进程</li>
<li>如果正在使用Grid，通知Grid浏览器不再可用，以便另一个会话使用它</li>
</ul>
<p>调用quit()失败将留下额外的后台进程和端口运行在机器上，在使用WebDriver期间应该保持异常处理</p>
<p>对于python，可以使用上下文管理器（with关键字）来维护这段代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> webdriver.Firefox() <span class="keyword">as</span> driver:</span><br><span class="line">    <span class="comment"># WebDriver 代码 </span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#此缩进位置后WebDriver会自动退出</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="某一窗口的管理"><a href="#某一窗口的管理" class="headerlink" title="某一窗口的管理"></a>某一窗口的管理</h3><p>分辨率会影响web应用的呈现方式，因此WebDriver提供了移动和调整浏览器大小的机制</p>
<p>获取窗口大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">width = driver.get_window_size().get(<span class="string">&quot;width&quot;</span>)</span><br><span class="line">height = driver.get_window_size().get(<span class="string">&quot;height&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者存储尺寸并在以后查询它们</span></span><br><span class="line">size = driver.get_window_size()</span><br><span class="line">width1 = size.get(<span class="string">&quot;width&quot;</span>)</span><br><span class="line">height1 = size.get(<span class="string">&quot;height&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>设置窗口大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.set_windows_size(<span class="number">1024</span>,<span class="number">768</span>)</span><br></pre></td></tr></table></figure>

<p>得到窗口的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">position = driver.get_window_position()</span><br><span class="line">x1 = position.get(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y1 = position.get(<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>移动窗口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将窗口移动到主显示器的左上角</span></span><br><span class="line">driver.set_window_position(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>最大化窗口(等效于浏览器的“最大化”键)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.maximize_window()</span><br></pre></td></tr></table></figure>

<p>最小化窗口，这个命令会精准作用域一个窗口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.minimize_window()</span><br></pre></td></tr></table></figure>

<p>全屏窗口（等效于浏览器中按f11）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.fullscreen_window()</span><br></pre></td></tr></table></figure>

<h3 id="其他屏幕操作"><a href="#其他屏幕操作" class="headerlink" title="其他屏幕操作"></a>其他屏幕操作</h3><p>屏幕截图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以捕获当前“浏览上下文”的屏幕截图，返回Base64格式编码的图片</span></span><br><span class="line">driver.save_screenshot(<span class="string">&#x27;./image.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>元素屏幕截图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#捕获当前“浏览器上下文的元素”的屏幕截图，返回Base64格式编码的图片</span></span><br><span class="line">ele_h1 = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">ele_h1.screenshot(<span class="string">&#x27;./image.png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在当前窗口的上下文中，执行JavaScript代码片段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储h1标签元素</span></span><br><span class="line">header = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;h1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行JavaScript代码：返回h1标签元素的内部文本</span></span><br><span class="line">driver.execute_script(<span class="string">&#x27;return arguments[0].innerText&#x27;</span>, header)</span><br></pre></td></tr></table></figure>

<h2 id="Virtual-Authenticator"><a href="#Virtual-Authenticator" class="headerlink" title="Virtual Authenticator"></a>Virtual Authenticator</h2><p>这一部分缺少Python实现，应该是遗漏了</p>
<h1 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h1><p>为了克服浏览器和WebDriver脚本之间的竞争问题，需要使用wait包进行等待</p>
<h2 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h2><p>显式等待允许代码暂停程序执行，或冻结线程，直到满足条件（这个条件判断会以一定频率调用，直到超时）</p>
<p>可以使用等待来让 findElement 调用等待直到脚本中动态添加的元素被添加到DOM中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待实用程序默认情况下会忽略 no such element 的错误</span></span><br><span class="line">driver.navigate(<span class="string">&quot;file:///race_condition.html&quot;</span>)</span><br><span class="line">el = WebDriverWait(driver, timeout=<span class="number">3</span>).until(<span class="keyword">lambda</span> d: d.find_element(By.TAG_NAME,<span class="string">&quot;p&quot;</span>))</span><br><span class="line"><span class="keyword">assert</span> el.text == <span class="string">&quot;Hello from JavaScript!&quot;</span></span><br></pre></td></tr></table></figure>
<p>这个until()函数内参数最终值是个逻辑值，里面经常是函数或lambda表达式</p>
<p>timeout有默认缺省值，可以显示指定</p>
<p>WebDriverWait的第一个参数应当始终是驱动程序对象的引用</p>
<h2 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h2><p>隐式等待是告诉WebDriver，如果在查找一个或多个不是立即可用的元素时轮询DOM一段时间。这是设置于某个WebDriver的，在它有效期间会一致生效</p>
<p>隐式等待和显示等待不能混用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line">driver = Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)<span class="comment">#隐式等待10s，如果设置为0表示禁用</span></span><br><span class="line">driver.get(<span class="string">&quot;http://somedomain/url_that_delays_loading&quot;</span>)</span><br><span class="line">my_dynamic_element = driver.find_element(By.ID, <span class="string">&quot;myDynamicElement&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="流畅等待"><a href="#流畅等待" class="headerlink" title="流畅等待"></a>流畅等待</h2><p>流畅等待定义了等待条件的最大时间量以及检查条件的频率，且可以配置忽略等待时特定类型异常</p>
<p>此处不详细介绍流畅等待</p>
<h1 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h1><h2 id="查询器"><a href="#查询器" class="headerlink" title="查询器"></a>查询器</h2><p>定位元素时，匹配第一个元素用 find_element ，匹配所有元素（获取一个列表）用 find_elements ，两者在函数名上有是否多一个s的区别</p>
<p>选择定位元素方式的参数有：</p>
<ul>
<li>By.ID             根据标签名</li>
<li>By.CLASS_NAME     根据了类名</li>
<li>By.TAG_NAME       根据标签类型</li>
<li>By.CSS_SELECTOR   根据CSS，可以指定ID、类名等，如CSS选择器一样</li>
<li>其他</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用CSS 选择</span></span><br><span class="line">fruit = driver.find_element(By.CSS_SELECTOR,<span class="string">&quot;#fruits .tomatoes&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用标签类型选择</span></span><br><span class="line">elements = driver.find_elements(By.TAG_NAME, <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前焦点标签，示例中展示的不够全面，慎重参考</span></span><br><span class="line">attr = driver.switch_to.active_element.get_attribute(<span class="string">&quot;title&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="与元素交互"><a href="#与元素交互" class="headerlink" title="与元素交互"></a>与元素交互</h2><p>有五种基本命令可用于元素操作：</p>
<ul>
<li>点击，这是用于任何元素</li>
<li>发送键位，仅适用于可编辑文本的元素</li>
<li>清除，仅适用于可编辑文本的元素</li>
<li>提交，仅适用于表单元素</li>
<li>选择，仅适用于列表元素</li>
</ul>
<p><strong>元素点击命令</strong>执行在<strong>元素中央</strong>，如果元素中央被遮挡，selenium将返回一个“元素点击中断”的错误</p>
<p><strong>元素发送键位命令</strong>将录入提供的键位到可编辑的元素，如果不可编辑返回“无效元素状态”错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">...</span><br><span class="line">driver.find_element(By.NAME, <span class="string">&quot;q&quot;</span>).send_keys(<span class="string">&quot;webdriver&quot;</span> + Keys.ENTER)</span><br></pre></td></tr></table></figure>

<p><strong>元素清除命令</strong>会重置元素的内容，这要求元素可编辑且可重置（通常是文本类型的表单元素），如果不可清楚则返回“无效元素状态”错误</p>
<p>不建议使用<strong>提交命令</strong>，而是点击相应的表单提交按钮</p>
<p><strong>选择命令</strong>将会在在后面的小节提及</p>
<h2 id="内置元素定位器"><a href="#内置元素定位器" class="headerlink" title="内置元素定位器"></a>内置元素定位器</h2><p>在WebDriver中有8种不同的内置元素定位策略：</p>
<ul>
<li>class name    </li>
<li>css selector</li>
<li>id</li>
<li>name  </li>
<li>link text </li>
<li>partial link text </li>
<li>tag name</li>
<li>xpath</li>
</ul>
<p>（这些信息官方文档还在维护中，暂时省略）</p>
<h2 id="相对元素定位器"><a href="#相对元素定位器" class="headerlink" title="相对元素定位器"></a>相对元素定位器</h2><p>相对定位器（Relative Locators）可以比较容易地描述一个元素的空间上的有关元素。Selenium使用 JavaScript 相关函数来决定元素们在页面上的位置，并且可以用这个信息来定位相邻元素</p>
<p>模拟一个布局：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Email Address</span><br><span class="line">+——————————————————————————————————+</span><br><span class="line">|                                  |</span><br><span class="line">+——————————————————————————————————+</span><br><span class="line"></span><br><span class="line">Password</span><br><span class="line">+——————————————————————————————————+</span><br><span class="line">|                                  |</span><br><span class="line">+——————————————————————————————————+</span><br><span class="line"></span><br><span class="line">  +————————+           +————————+</span><br><span class="line">  | Cancel |           | Submit |</span><br><span class="line">  +————————+           +————————+</span><br></pre></td></tr></table></figure>


<p><strong>Above</strong>位置，以下代码描述了“一个在密码元素上方的输入框”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">email_locator = locate_with(By.TAG_NAME, <span class="string">&quot;input&quot;</span>).above(&#123;By.ID: <span class="string">&quot;password&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>Below</strong>位置，以下代码描述了“一个在邮件元素下面的输入框”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">password_locator = locate_with(By.TAG_NAME,<span class="string">&quot;input&quot;</span>).below(&#123;By.ID: <span class="string">&quot;email&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>Left of</strong>位置，<em>方位</em>部分为 to_left_of</p>
<p><strong>Right of</strong>位置，<em>方位</em>部分为 to_right_of</p>
<p>Near位置，自认为可能不够准确，或者无法清晰描述，不记录</p>
<p>这些相对元素定位器可以链式使用，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">locate_with(By.TAG_NAME, <span class="string">&quot;button&quot;</span>).below(&#123;By.ID: <span class="string">&quot;email&quot;</span>&#125;).to_right_of(&#123;By.ID: <span class="string">&quot;cancel&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="元素的信息"><a href="#元素的信息" class="headerlink" title="元素的信息"></a>元素的信息</h2><p>检查元素是否显示  <em>found_element</em>.is_display()</p>
<p>元素是否被选定  <em>found_element</em>.is_selected()</p>
<p>获取元素标签名，有属性 tag_name </p>
<p>获取元素矩形位置，包含元素左上角位置和高度，有属性 rect</p>
<p>获取元素CSS值   <em>found_element</em>.value_of_css_property(‘<em>some_property</em>‘)</p>
<p>获取元素文本，有属性 text</p>
<p>（其余信息处于维护中）</p>
<h2 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h2><p>selenium的support包有一个Select类，可以帮助列表选择</p>
<p>通过 find_element 查询到 &lt;select&gt; 元素，可以使用 Select() 来生成一个Select对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select_element = driver.find_element(By.ID,<span class="string">&#x27;selectElementID&#x27;</span>)</span><br><span class="line">select_object = Select(select_element)</span><br></pre></td></tr></table></figure>

<p>选择其中选项：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基于内部索引选择</span></span><br><span class="line">select_object.select_by_index(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#基于value属性选择</span></span><br><span class="line">select_object.select_by_value(<span class="string">&#x27;value1&#x27;</span>)</span><br><span class="line"><span class="comment">#基于文档文本内容选择</span></span><br><span class="line">select_object.select_by_visible_text(<span class="string">&#x27;Bread&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>检视选项：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回一个所有已选择选项的列表</span></span><br><span class="line">all_selected_options = select_object.all_selected_options</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过遍历DOM选择第一个</span></span><br><span class="line">first_selected_option = select_object.first_selected_option</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回select元素包含的选项的列表</span></span><br><span class="line">all_available_options = select_object.options</span><br></pre></td></tr></table></figure>

<p>取消选择状态：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基于内部索引删除</span></span><br><span class="line">select_object.deselect_by_index(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于value属性删除</span></span><br><span class="line">select_object.deselect_by_value(<span class="string">&#x27;value1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于文本文档内容删除</span></span><br><span class="line">select_object.deselect_by_visible_text(<span class="string">&#x27;Bread&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有项的选择状态</span></span><br><span class="line">select_object.deselect_all()</span><br></pre></td></tr></table></figure>

<p>确认&lt;select&gt;元素是否允许多选，可以观察属性select_object.is_multiple</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>当input元素为文件类型时, 文件上传对话框可以使用Selenium处理</p>
<p>一个完整的实现文件上传的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> webdriver_manager.chrome <span class="keyword">import</span> ChromeDriverManager</span><br><span class="line">driver = webdriver.Chrome(ChromeDriverManager().install())</span><br><span class="line"></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)<span class="comment">#隐式等待</span></span><br><span class="line">driver.get(<span class="string">&quot;https://the-internet.herokuapp.com/upload&quot;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&quot;file-upload&quot;</span>).send_keys(<span class="string">&quot;selenium-snapshot.jpg&quot;</span>)<span class="comment">#查询文件类型元素，并上传文件</span></span><br><span class="line">driver.find_element(By.ID,<span class="string">&quot;file-submit&quot;</span>).submit()</span><br><span class="line"><span class="keyword">if</span>(driver.page_source.find(<span class="string">&quot;File Uploaded!&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;file upload success&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;file upload not successful&quot;</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>



<h1 id="Actions接口"><a href="#Actions接口" class="headerlink" title="Actions接口"></a>Actions接口</h1><p>用于向Web浏览器提供虚拟化设备输入操作的低级接口</p>
<h2 id="键盘行为"><a href="#键盘行为" class="headerlink" title="键盘行为"></a>键盘行为</h2><p>键盘行为只有两种：按下一个键和松开一个键。在Actions链上重复这两种行为以及send_keys()能够快速产生一个组合按键流</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ActionChains(driver)\</span><br><span class="line">    .key_down(Keys.SHIFT)\</span><br><span class="line">    .send_keys(<span class="string">&quot;a&quot;</span>)\</span><br><span class="line">    .key_up(Keys.SHIFT)\</span><br><span class="line">    .send_keys(<span class="string">&quot;b&quot;</span>)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure>

<p>指定一个元素使用send keys：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text_input = driver.find_element(By.ID, <span class="string">&quot;textInput&quot;</span>)</span><br><span class="line">ActionChains(driver)\</span><br><span class="line">    .send_keys_to_element(text_input, <span class="string">&quot;abc&quot;</span>)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure>

<p>复制和粘贴：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Keys.COMMAND是苹果系统使用的，其他平台使用 Keys.CONTROL</span></span><br><span class="line">cmd_ctrl = Keys.COMMAND <span class="keyword">if</span> sys.platform == <span class="string">&#x27;darwin&#x27;</span> <span class="keyword">else</span> Keys.CONTROL</span><br><span class="line"></span><br><span class="line">ActionChains(driver)\</span><br><span class="line">    .send_keys(<span class="string">&quot;Selenium!&quot;</span>)\</span><br><span class="line">    .send_keys(Keys.ARROW_LEFT)\</span><br><span class="line">    .key_down(Keys.SHIFT)\</span><br><span class="line">    .send_keys(Keys.ARROW_UP)\</span><br><span class="line">    .key_up(Keys.SHIFT)\</span><br><span class="line">    .key_down(cmd_ctrl)\</span><br><span class="line">    .send_keys(<span class="string">&quot;xvv&quot;</span>)\</span><br><span class="line">    .key_up(cmd_ctrl)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure>

<h1 id="鼠标行为"><a href="#鼠标行为" class="headerlink" title="鼠标行为"></a>鼠标行为</h1><p>鼠标行为只有三种：按下鼠标一个按键、松开鼠标一个按键和移动鼠标</p>
<h2 id="敲击类行为"><a href="#敲击类行为" class="headerlink" title="敲击类行为"></a>敲击类行为</h2><p><strong>Click and hold</strong>，这个方法结合了移动鼠标到元素中心，然后按下鼠标左键 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clickable = driver.find_element(By.ID, <span class="string">&quot;clickable&quot;</span>)</span><br><span class="line">ActionChains(driver)\</span><br><span class="line">    .click_and_hold(clickable)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure>

<p><strong>Click and release</strong>，这个方法结合了移动鼠标到元素中心，然后按下、松开鼠标左键（左键敲击）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clickable = driver.find_element(By.ID, <span class="string">&quot;click&quot;</span>)</span><br><span class="line">ActionChains(driver)\</span><br><span class="line">    .click(clickable)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure>

<p>对于一个鼠标总共有物种定义的按键：</p>
<ul>
<li>0 – 左键（默认）</li>
<li>1 – 中键（现在不支持）</li>
<li>2 – 右键</li>
<li>3 – X1退回键</li>
<li>4 – X2前进键</li>
</ul>
<p><strong>Context Click</strong>，这个方法结合了移动鼠标到元素中心，然后按下、松开右键（右键敲击）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clickable = driver.find_element(By.ID, <span class="string">&quot;clickable&quot;</span>)</span><br><span class="line">ActionChains(driver)\</span><br><span class="line">    .context_click(clickable)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure>
<p>Back Click，这个方法是按下、松开退回键。不记录详细用法</p>
<p>Forward Click，这个方法是按下、送开前进键。不记录详细用法</p>
<p><strong>Double click</strong>，这个方法结合了移动鼠标到元素中心，然后左键敲击两次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clickable = driver.find_element(By.ID, <span class="string">&quot;clickable&quot;</span>)</span><br><span class="line">ActionChains(driver)\</span><br><span class="line">    .double_click(clickable)\</span><br><span class="line">    .perform()</span><br></pre></td></tr></table></figure>

<h2 id="移动类行为"><a href="#移动类行为" class="headerlink" title="移动类行为"></a>移动类行为</h2><p>根据像素移动鼠标，自认为实用价值不大，暂不就记录</p>
<h1 id="双向协议"><a href="#双向协议" class="headerlink" title="双向协议"></a>双向协议</h1><p>这里包括浏览器开发工具、双向接口等，等到后期再回过来学习</p>
<h1 id="支持的一些功能"><a href="#支持的一些功能" class="headerlink" title="支持的一些功能"></a>支持的一些功能</h1><h2 id="同颜色一起工作–Color类"><a href="#同颜色一起工作–Color类" class="headerlink" title="同颜色一起工作–Color类"></a>同颜色一起工作–Color类</h2><p>需要导入该类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.color <span class="keyword">import</span> Color</span><br></pre></td></tr></table></figure>

<p>创建颜色对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定十六进制颜色，rgb、rgba参数</span></span><br><span class="line">HEX_COLOUR = Color.from_string(<span class="string">&#x27;#2F7ED8&#x27;</span>)</span><br><span class="line">RGBA_COLOUR = Color.from_string(<span class="string">&#x27;rgba(255, 255, 255, 0.5)&#x27;</span>)</span><br><span class="line">RGBA_COLOUR = Color.from_string(<span class="string">&#x27;rgba(40%, 20%, 40%, 0.5)&#x27;</span>)</span><br><span class="line"><span class="comment">#其他hsl、hsla等参数也支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定基本颜色名</span></span><br><span class="line">BLACK = Color.from_string(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">CHOCOLATE = Color.from_string(<span class="string">&#x27;chocolate&#x27;</span>)</span><br><span class="line">HOTPINK = Color.from_string(<span class="string">&#x27;hotpink&#x27;</span>)</span><br><span class="line">TRANSPARENT = Color.from_string(<span class="string">&#x27;transparent&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>查询并获取元素颜色： <em>found_element</em>.value_of_css_property(‘color’)</p>
<p>查询并获取元素背景色： <em>found_element</em>.value_of_css_property(‘background-color’)</p>
<p>然后使用 Color.from_string(<em>color_string</em>) 生成一个Color对象</p>
<p>颜色对象之间，颜色对象与颜色字符串之间可以比较：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#颜色对象与颜色对象比较</span></span><br><span class="line"><span class="keyword">assert</span> color_obj1 == color_obj2</span><br><span class="line"><span class="comment">#颜色和颜色字符串比较</span></span><br><span class="line"><span class="keyword">assert</span> color_obj1.<span class="built_in">hex</span> == <span class="string">&#x27;#ff68b4&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> color_obj1.<span class="built_in">hex</span> == <span class="string">&#x27;rgba(255,105,180,3)&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
        <category>测试工具</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS构建基础</title>
    <url>/2022/09/08/%E5%AD%A6%E4%B9%A0/web%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0--CSS%E6%9E%84%E5%BB%BA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<ul>
<li>2022-09-19 完成CSS构建基础的整理</li>
</ul>
<span id="more"></span>


<h1 id="层叠与继承"><a href="#层叠与继承" class="headerlink" title="层叠与继承"></a>层叠与继承</h1><h2 id="理解继承"><a href="#理解继承" class="headerlink" title="理解继承"></a>理解继承</h2><p>元素样式的继承比较符合直觉，比如，字体很容易被子元素自然继承，但是周围设置的边框就不会被自然继承</p>
<p>CSS 为控制继承提供了五个特殊的属性值，每个 CSS属性都能接收这些值:</p>
<ul>
<li>inherit 开启继承，使子元素和父元素相同</li>
<li>initial 设置属性的初始值</li>
<li>revert 应用于选定元素的属性重置为浏览器默认样式</li>
<li>revert-layer 应用于选定元素的属性重置为上一个层叠层中建立的值</li>
<li>unset 将属性重置为自然值，如果属性是自然继承那就是 inherit，否则和 initial 一样</li>
</ul>
<p> 此外，除了针对某个具体的属性应用以上这些控制继承的值，还可以使用简写属性 all 接收它们，直接应用于选择元素的所有属性；这种方法十分适合撤销样式，如 all&#x3D;unset;</p>
<h2 id="理解层叠"><a href="#理解层叠" class="headerlink" title="理解层叠"></a>理解层叠</h2><p>影响层叠的有三个因素：资源顺序、优先级、重要程度</p>
<h3 id="资源顺序"><a href="#资源顺序" class="headerlink" title="资源顺序"></a>资源顺序</h3><p>资源顺序的影响是：如果有权重相同的两条规则都适用于某类元素，那么后出现的规则会覆盖前面的规则，实际控制这类元素。这是容易理解的</p>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>优先级的影响是：不同选择器同时控制某元素，那么优先级高的选择器会实际控制这类元素。</p>
<p>一个选择器的优先级可以说是由三个不同的分量相加:</p>
<ul>
<li>ID– 选择器中包含ID选择器则百位得一分</li>
<li>类– 选择器包含类选择器、属性选择器或伪类则十位得一分</li>
<li>元素– 选择器中包含元素、伪元素选择器则个位得一分</li>
</ul>
<p>特殊地，内嵌的优先级总是最高</p>
<p>备注：通用选择符(*)，组合符(+  &gt;  ~  ‘’) 和 调整优先级得选择器( :where() ) 不会影响优先级</p>
<p>否定(:not()) 和 任意匹配 (:is()) 伪类本身对优先级没有影响，但是它们得参数会带来影响</p>
<p>以下是几个实际的例子:</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>ID</th>
<th>类</th>
<th>元素</th>
</tr>
</thead>
<tbody><tr>
<td>h1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>h1 + p::first-letter</td>
<td>0</td>
<td>0</td>
<td>3</td>
</tr>
<tr>
<td>li &gt; a[href*&#x3D;”en-US”] &gt; .inline-warning</td>
<td>0</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>#identifier</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>button:not(#mainBtn, .cta)</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<h3 id="重要程度"><a href="#重要程度" class="headerlink" title="重要程度"></a>重要程度</h3><p>更特殊地， 在属性值后面添加 空格和!important 能够覆盖普通规则的层叠，通常不应该使用它</p>
<h2 id="CSS位置影响"><a href="#CSS位置影响" class="headerlink" title="CSS位置影响"></a>CSS位置影响</h2><p>CSS声明的优先级取决于定义它的样式表和级联层</p>
<p>这让用户有机会设定样式表来覆盖开发人员定义的样式（这对视力受损的用户特别有效）</p>
<p>也可以在级联层中声明开发人员定义的样式：让非分层样式覆盖分层样式，或者让后面层声明的样式覆盖先前层的样式（例如，导入外部的样式表到级联层中，以覆盖无法修改的第三方样式表）</p>
<p>覆盖声明的顺序如下，越往后优先级越高:</p>
<ol>
<li>用户代理样式表中的声明，如浏览器默认样式</li>
<li>用户样式表中的常规声明</li>
<li>作者样式表中的常规声明，这是由web开发人员设置的样式</li>
<li>作者样式表中的 !important 声明</li>
<li>用户样式表中的 !important 声明</li>
<li>用户代理样式表中的 !important 声明</li>
</ol>
<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><p>类型(元素)选择器、全局选择器、类选择器、ID选择器、属性选择器、子字符串匹配选择器、伪类选择器</p>
<p>可以使用选择器列表的方式，用逗号隔开选择器们，这让一条规则包含多个选择器；如果这条规则某个选择器出现语法错误，则这条规则里所有选择器都不会应用规则</p>
<p>选择器大概有以下几种分类:</p>
<ul>
<li>类型（元素）选择器</li>
<li>通配符选择器</li>
<li>类选择器</li>
<li>ID选择器</li>
<li>标签属性选择器，选中的是含有这个属性的标签（元素）</li>
<li>伪类选择器</li>
<li>伪元素选择器</li>
<li>后代选择器</li>
<li>子代选择器</li>
<li>相邻兄弟选择器</li>
<li>通用兄弟选择器</li>
<li></li>
</ul>
<h2 id="类型选择器"><a href="#类型选择器" class="headerlink" title="类型选择器"></a>类型选择器</h2><p>类型选择器也被叫做“标签名选择器”，或者是“元素选择器”</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>通配符选择器是由一个星号指代的，选中了文档中所有的内容（或者父元素中所有内容，这发生在它紧随其他元素以及邻带元素之后的时候）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择了作为其他元素的，第一子元素的&lt;article&gt;*/</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:first</span>-child&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*选择了article元素的任何第一子元素*/</span></span><br><span class="line"><span class="selector-tag">article</span> *<span class="selector-pseudo">:first</span>-child&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器以点号（.）开头，加上类名，点号前可以添加特定元素，那么会选择这个元素类型的这个类；一个元素可以标记多个类，那么可以使用连续“点类点类”的方法，具体地指定属于多类的元素（这是否有点像连续赋值）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;p class=&quot;class1&quot;&gt; */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.class1</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;article class=&quot;class1 class2&quot;&gt; */</span></span><br><span class="line"><span class="selector-class">.class1</span><span class="selector-class">.class2</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><p>ID选择器以井号（#）开头，再加上ID名；一篇文档中，一个ID只会用到一次</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;p id=&quot;one&quot;&gt; */</span></span><br><span class="line"><span class="selector-id">#one</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>属性选择器有两种匹配属性值的方法：是否存在某个属性、以各种方式判断属性值是否符合要求。</p>
<h3 id="存在属性、属性值选择器"><a href="#存在属性、属性值选择器" class="headerlink" title="存在属性、属性值选择器"></a>存在属性、属性值选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;a title=&quot;mylink&quot; href=&quot;https://exmaple.com&quot;&gt; */</span></span><br><span class="line"><span class="comment">/* 选择含有这个属性的元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择属性值为指定值得元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;https://example.com&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;li class=&quot;apple basic circle&quot;&gt; */</span></span><br><span class="line"><span class="comment">/* 选择指定值能够匹配至少一个属性的得元素；如果仅仅是  class=&quot;apple&quot; ，则不会选择到 */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-attr">[class~=<span class="string">&quot;apple&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="属性子字符串匹配选择器"><a href="#属性子字符串匹配选择器" class="headerlink" title="属性子字符串匹配选择器"></a>属性子字符串匹配选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;div lang=&quot;zh-CN&quot;&gt; */</span></span><br><span class="line"><span class="comment">/* 匹配属性值开始部分为指定值，后面紧随连字符的元素，也可以直接等于指定值本身 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang|=<span class="string">&quot;zh&quot;</span>]</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang|=<span class="string">&quot;zh-CN&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配属性值开始部分为指定值的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang^=<span class="string">&quot;z&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配属性值结束部分为指定值的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang$=<span class="string">&quot;N&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配属性值存在以部分为指定值的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang*=<span class="string">&quot;h&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h3 id="设定大小写敏感"><a href="#设定大小写敏感" class="headerlink" title="设定大小写敏感"></a>设定大小写敏感</h3><p>在属性值后添加一个标记 i ，如 li[class^&#x3D;”a”i] ，可以匹配类名为 “Abc”</p>
<h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><h3 id="伪类和用户行为伪类"><a href="#伪类和用户行为伪类" class="headerlink" title="伪类和用户行为伪类"></a>伪类和用户行为伪类</h3><p>伪类就是开头为冒号( : )的关键字。它用于处于特定状态的元素，比如某个元素是这一类型的第一个元素，某个鼠标正悬停的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择 &lt;article&gt; 元素下第一个 &lt;p&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child</span><br></pre></td></tr></table></figure>
<p>此外，还可以有 :last-child, :only-child, :invalid （未通过验证的 input 和 form 元素）</p>
<p>一些伪类应用于用户以某种方式和文档交互，这些被称为用户伪类，有时也被叫做动态伪类</p>
<p>常见的用户行为伪类有:</p>
<ul>
<li>:hover – 用户将指针挪到元素上才会激活，一般就是链接元素</li>
<li>:focous – 只会在用户使用键盘，选定元素的时候激活</li>
</ul>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素选择器以双冒号开头( :: )；伪元素并没有额外添加新的元素，而是在选择器中以一定规则选取部分内容，这样的选取让被选内容看上去就像元素一样</p>
<p><em>注意，一些早期的伪元素曾使用单冒号的语法，现代浏览器为保持兼容扔支持它们</em></p>
<p>如 ::first-line 伪元素选择器会选中第一行内容，即使第一行内容发生变化，甚至是拉伸窗口导致的行长度变化，也会被伪元素选择器捕捉</p>
<p>伪元素和伪类可以组合使用，并不冲突，如:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">120%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪元素-before和-after设置特殊内容"><a href="#伪元素-before和-after设置特殊内容" class="headerlink" title="伪元素::before和::after设置特殊内容"></a>伪元素::before和::after设置特殊内容</h3><p>::before和::after这组特别地伪元素，和 content 属性一起使用，将内容插到文档中；它们的推荐用法是插入一个视觉性的提示，示例如下:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;p class=&quot;box&quot;&gt;Content in the box in my HTML page.&lt;/p&gt; */</span></span><br><span class="line"><span class="comment">/* 这些伪元素的更推荐的用法是插入一个图标，例如下面的示例加入的一个小箭头，作为一个视觉性的提示，而且我们并不希望屏幕阅读器读出它。 */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; ➥&quot;</span></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<p>在表单中经常使用这种方法做出红色的星号提示，以及检验不通过后文本框后的红色小字；当然，如果要这么做，仅仅设置content是不够的</p>
<p>下个示例，我们已经用 ::before伪元素加入了个空字符串。我们把它设为了display: block，以让它可以用 width 和 height 进行样式化，这样会在文本内容前面出现个方块</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;p class=&quot;box&quot;&gt;Content in the box in my HTML page.&lt;/p&gt; */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: rebeccapurple;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h3 id="其他伪类或伪元素参考"><a href="#其他伪类或伪元素参考" class="headerlink" title="其他伪类或伪元素参考"></a>其他伪类或伪元素参考</h3><p>伪类:</p>
<ul>
<li>:active–用户激活时匹配，用鼠标交互时代表用户按下和松开之间的时间</li>
<li>:cheked–匹配选择状态的单选或者复选框</li>
<li>:default–匹配一组元素中默认的UI元素</li>
<li>:enabled–匹配处于开启状态的用户界面元素，如没有diable的input元素</li>
<li>:first-child–（也有last版本）选择在一组兄弟元素中的第一个元素</li>
<li>:first-of-type–（也有last版本）选择在父元素中第一个出该这种类型的元素，如 p::first-of-type 表示父元素下第一个p元素</li>
<li>:focus–表示获得焦点的元素，如表单输入，用户点击它是会被触发</li>
<li>:hover–用户悬浮到一个元素之上的时候匹配</li>
<li>:invalid–（也有valid版本）匹配诸如input的未通过校验的元素</li>
<li>:link–匹配未曾访问的链接</li>
<li>:visited–匹配已访问链接</li>
<li>:not()–反伪类，匹配不符合一组选择器的元素，如 :not(p) 则选择所有不是p的元素，里面的一组选择器可以是 元素和类，但不能是伪元素</li>
<li>:nth-child(an+b)–按一定顺序匹配，如 2n+1 匹配一组兄弟元素的第1、3、5、7…个元素</li>
<li>:read-only–匹配用户不可更改的元素</li>
<li>:required–匹配必填form元素</li>
</ul>
<p>伪元素:</p>
<ul>
<li>::after – 匹配出现在原有元素的实际内容之后的一个可样式化元素（实际为在样式表中新添的content）</li>
<li>::before – 匹配出现在原有元素的实际内容之前的一个可样式化元素（实际为在样式表中新添的content）</li>
<li>其余似乎不怎么常用</li>
</ul>
<h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>用单个空格(“ “)组合前后多个选择器，如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 匹配类名为 .box 的元素的子、孙和更下代的元素p */</span></span><br><span class="line"><span class="comment">/* &lt;div class=&quot;box&quot;&gt; &lt;article&gt; &lt;p&gt;xxxxxx&lt;/p&gt; &lt;/article&gt; &lt;/div&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下两个都选择到了内容为xxxxxx的p元素 */</span> </span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="子代关系选择器"><a href="#子代关系选择器" class="headerlink" title="子代关系选择器"></a>子代关系选择器</h3><p>用大于号(&gt;)组合前后选择器，相比后代选择器，它只限定了直接子元素:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 匹配类名为 .box 的元素的子、孙和更下代的元素p */</span></span><br><span class="line"><span class="comment">/* &lt;div class=&quot;box&quot;&gt; &lt;article&gt; &lt;p&gt;xxxxxx&lt;/p&gt; &lt;/article&gt; &lt;/div&gt; */</span></span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>
<h3 id="邻接兄弟选择器"><a href="#邻接兄弟选择器" class="headerlink" title="邻接兄弟选择器"></a>邻接兄弟选择器</h3><p>用加号(+)组合两个选择器，如:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*&lt;article&gt;</span></span><br><span class="line"><span class="comment">    &lt;h1&gt;A heading&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;段落1&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;p&gt;段落2&lt;/p&gt;</span></span><br><span class="line"><span class="comment">  &lt;/article&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 这个指挥选择内容为“段落1”的p元素 */</span></span><br><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> </span><br></pre></td></tr></table></figure>
<h3 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h3><p>用(~)组合兄弟元素，它们可以不直接相邻</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h1 ~ p </span><br></pre></td></tr></table></figure>
<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p>在css种广泛使用**块级盒子(block box)<strong>和</strong>内联盒子(inline box)<strong>，这两种盒子会在</strong>页面流(page flow)**和元素之间表现不同行为</p>
<p>定义为块级(block)盒子会表现以下行为：</p>
<ul>
<li>每个盒子换行</li>
<li>width 和 height 属性可发挥作用</li>
<li>在内联方向上扩展，占据父容器在该方向的所有控空间，这意味着绝大数情况下，盒子与父容器一样宽</li>
<li>内边距padding、外边距margin、边框border会将其他元素推开</li>
</ul>
<p>如果一个盒子对外显示为inline（内联盒子），那么它的行为如下：</p>
<ul>
<li>盒子不会产生换行</li>
<li>width 和 height 属性不会发挥作用</li>
<li>垂直方向的边距边框会被应用，但是不会推开其他inline盒子</li>
<li>水平方向的边距边框会被应用，且会把其他inline盒子推开</li>
</ul>
<p>&lt;a&gt;、&lt;span&gt;、&lt;em&gt;、&lt;strong&gt; 都默认处于 inline 状态</p>
<p>如果设置 display: flex，在一个元素上，外部显示类型是 block，但是内部显示类型修改为 flex。该盒子的所有直接子元素都会成为 flex 元素，会根据弹性盒子（Flexbox）规则进行布局</p>
<h2 id="盒模型各部分"><a href="#盒模型各部分" class="headerlink" title="盒模型各部分"></a>盒模型各部分</h2><p>CSS中组成一个块级盒子需要：内容盒子、内边距盒子、边框盒子、外边距盒子；边框也可以拥有宽度，所有也应该是是盒子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+----------------------------------+</span><br><span class="line">|                           margin |</span><br><span class="line">|                                  |</span><br><span class="line">|  =============================   |</span><br><span class="line">|  ||               padding   ||   |</span><br><span class="line">|  ||   +-------------+       ||&lt;--|--border</span><br><span class="line">|  ||   |    content  |       ||   |</span><br><span class="line">|  ||   |             |       ||   |</span><br><span class="line">|  ||   +-------------+       ||   |</span><br><span class="line">|  ||                         ||   |</span><br><span class="line">|  =============================   | </span><br><span class="line">+----------------------------------+  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>内容盒子、内边距盒子、外边距盒子可以设置属于它区域的上下左右的“距离”，边框盒子可以设置厚度和边框样式等</p>
<p>以上讲述的都是标准盒模型，此外，还有一个替代(IE)盒模型，这个模型中所有宽度都是可见宽度，此处不详细介绍</p>
<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><p>可以使用 padding 属性一次性设置，指定一个值会设置四个方向，指定两个值会设置垂直方向和水平方向</p>
<p>padding-top、padding-right、padding-bottom、padding-left 单独设置四个方向的<strong>内边距宽度</strong></p>
<p>它们设置的值可以是 长度（1px，1em）、百分比(5%，相当于包含快的宽度)、auto(让浏览器选择，一般使元素居中)</p>
<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><p>可以使用 margin 属性一次性设置，指定一个值会设置四个方向，指定两个值会设置垂直方向和水平方向</p>
<p>margin-top、margin-right、margin-bottom、margin-left 单独设置四个方向的<strong>外边距宽度</strong></p>
<p>外边距允许负值，此外，外边距还有<strong>折叠</strong>的特性，两个水平或垂直相邻的盒子，取它们最大的外边距作为公共外边距，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+----------------------------------+</span><br><span class="line">|                          margin1 |</span><br><span class="line">|                                  |</span><br><span class="line">|  ==========================      |</span><br><span class="line">|  ||              padding ||      |</span><br><span class="line">|  ||   +-------------+    ||&lt;-----|--border</span><br><span class="line">|  ||   |    content  |    ||      |</span><br><span class="line">|  ||   |             |    ||      |</span><br><span class="line">|  ||   +-------------+    ||      |</span><br><span class="line">|  ||                      ||      |</span><br><span class="line">|  ==========================      | </span><br><span class="line">|                ^                 |</span><br><span class="line">|  max(margin1-buttom,margin2-top) |</span><br><span class="line">|                v                 |</span><br><span class="line">|  =============================   |</span><br><span class="line">|  ||               padding   ||   |</span><br><span class="line">|  ||   +-------------+       ||&lt;--|--border</span><br><span class="line">|  ||   |    content  |       ||   |</span><br><span class="line">|  ||   |             |       ||   |</span><br><span class="line">|  ||   +-------------+       ||   |</span><br><span class="line">|  ||                         ||   |</span><br><span class="line">|  =============================   | </span><br><span class="line">|                        margin2   |</span><br><span class="line">+----------------------------------+ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>可以使用 border 属性一次性设置四个边框的宽度、颜色和样式，也可以分别设置。</p>
<p>可以使用这些属性设置边框的颜色、样式或宽度:</p>
<ul>
<li>border-width, border-top-width, …</li>
<li>border-style, border-top-style, …</li>
<li>border-color, border-top-color, …</li>
</ul>
<p>如:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;box&quot;&gt;Change my borders.&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">5px</span> dotted green;             </span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">20px</span> double <span class="built_in">rgb</span>(<span class="number">23</span>,<span class="number">45</span>,<span class="number">145</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333333</span>;</span><br><span class="line">  <span class="attribute">border-top-style</span>: dotted;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: hotpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-display-inline-block"><a href="#使用-display-inline-block" class="headerlink" title="使用 display: inline-block"></a>使用 display: inline-block</h2><p>这个值在内联和块之间提供了一个中间状态，这个不会切换到新行<br>，但是可以谁当宽度和高度，避免垂直方向上文档内容重叠</p>
<p>如果一个元素使用 display:inline-block ，那么设置 width 和 height 属性会生效，padding、margin、border 会推开其他元素；普通的内联盒子，垂直方向上不会推开其他元素</p>
<p>对于链接元素，如 &lt;a&gt; ，如果想要有更大命中区域，设置这个属性十分有用</p>
<h1 id="背景与边框"><a href="#背景与边框" class="headerlink" title="背景与边框"></a>背景与边框</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p>background-color 属性定义了CSS中任何元素的背景颜色</p>
<p>CSS数据类型color表示一种标准RGB色彩空间，一个颜色可以包括一个alpha通道的透明值。一个数据类型为color的值可以是如下形式：</p>
<ul>
<li>颜色关键字，如blue、red，建议只使用VGA显卡所显示的颜色集合</li>
<li>透明度关键字transparent</li>
<li>继承父级的color属性–currentcolor关键字</li>
<li>RGB立体坐标(以”#”加十六进制，如我的vscode背景色是#8ddf0928 ，或者rgb()、rgba()函数表达表示)</li>
<li>HSL圆柱坐标(以hsl()和hsla()函数表达式表示)</li>
</ul>
<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><p>使用 background-image: url(xxx.png); 来设置背景图片。背景图片在默认情况下，大图不会缩小以适应容器，小图则会重复平铺填充容器。背景图片位于背景颜色上方。</p>
<p>背景图片是可以指定多个的，如 background-image:  url(big-star.png),url(star.png);  先出现的位于上方，后出现的会在下方</p>
<p>控制背景滚动方式，使用 background-attachment 属性，可以接受以下值：</p>
<ul>
<li>scroll 使背景元素在页面滚动时滚动；但作为元素的背景，滚动元素时不会滚动</li>
<li>fixed 背景固定在视图上</li>
<li>loacl 使背景和元素保持相对固定</li>
</ul>
<p>控制背景平铺，使用 background-repeat 属性，可以取值：</p>
<ul>
<li>no-repeat 不重复</li>
<li>repeat-x  水平重复</li>
<li>repeat-y  垂直重复</li>
<li>repeat    两个方向上重复</li>
</ul>
<p>调整背景图像大小，使用 background-size 属性，可以取值：</p>
<ul>
<li>长度或百分比</li>
<li>关键字cover，使图像完全展示，可能会跳出盒子</li>
<li>关键字contain，一般比较推荐这个，它使图像缩放正好装在盒子内，可能会在一侧留出空隙</li>
</ul>
<p>背景图像定位，使用 background-position 属性设置背景图像在盒子中的位置，框的左上角是（0，0），可以取值：</p>
<ul>
<li>关键字top、center、right的等，如 background-position: top center; </li>
<li>长度值或百分比</li>
<li>关键字搭配长度值，如 background-position: top 20px right 10px; 距顶部20px，距右侧10px</li>
</ul>
<p>也可以分别使用background-position-x ， background-position-y</p>
<h3 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h3><p>让渐变用于背景，可以对 background-image 属性设置。这里的取值应该为一个gradient数据类型，它由渐变函数定义</p>
<p><strong>线性渐变</strong>，颜色值沿直线方向逐渐过渡，由 linear-gardient() 产生，如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.linear-gradient-class</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, orange, yellow, green, blue, indigo, violet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个表示朝右方向，逐渐过渡指出的颜色，这个从左到右的距离由容器决定(当然高度也由容器决定)</p>
<p><strong>径向渐变</strong>，颜色由一个中心点向外扩散过渡到其他颜色，由 radial-gradient() 函数产生，如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.radial-gradient-class</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red, yellow, <span class="built_in">rgb</span>(<span class="number">30</span>,<span class="number">144</span>,<span class="number">255</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重复渐变</strong>，重复多次渐变图案知道填满容器，由 repeating-linear-gradient() 和 repeat-radial-gradient() 函数产生，摘抄的语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 朝45度方向，开始蓝色，在1/3处为蓝色，中间自动填充插值以实现渐变；</span></span><br><span class="line"><span class="comment">重复上面填色区域直至填充满容器（将会重复3次） */</span></span><br><span class="line">repeating-linear-gradient(<span class="number">45deg</span>, blue, red <span class="number">33.3%</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 朝左上方向，开始蓝色，在20px处为红色，中间自动填充插值以实现渐变；</span></span><br><span class="line"><span class="comment">重复上面填色区域直至填充满容器*/</span></span><br><span class="line">repeating-linear-gradient(<span class="selector-tag">to</span> <span class="attribute">left</span> <span class="attribute">top</span>, blue, red <span class="number">20px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 朝0度方向，开始蓝色，在容器40%处为红色，终点为红色；</span></span><br><span class="line"><span class="comment">这个填色区域不会重复，结尾的颜色若不设置位置，默认为终点 */</span></span><br><span class="line">repeating-linear-gradient(<span class="number">0deg</span>, blue, green <span class="number">40%</span>, red);</span><br></pre></td></tr></table></figure>
<h3 id="使用background简写"><a href="#使用background简写" class="headerlink" title="使用background简写"></a>使用background简写</h3><p>自认为不够清晰，不应该使用这种方式</p>
<h2 id="边框-1"><a href="#边框-1" class="headerlink" title="边框"></a>边框</h2><p>使用 border 设置边框的宽度border-width、样式border-style、颜色border-color  </p>
<p>可以使用 border 一次性设置这三个属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">2px</span> dotted blue;</span><br></pre></td></tr></table></figure>

<p>关于边框样式bordr-style，有以下例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 无样式 */</span></span><br><span class="line"><span class="attribute">border-style</span>: none;</span><br><span class="line"><span class="comment">/* 边框为点 */</span></span><br><span class="line"><span class="attribute">border-style</span>: dotted;</span><br><span class="line"><span class="comment">/* 边框有陷入效果 */</span></span><br><span class="line"><span class="attribute">border-style</span>: inset;</span><br><span class="line"><span class="comment">/* 上下方形虚线，左右厚实线 */</span></span><br><span class="line"><span class="attribute">border-style</span>: dashed solid;</span><br></pre></td></tr></table></figure>

<p>设置圆角，可以通过 border-radius 属性，和方框的每个角相关的长边来实现方框的圆角，示例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 盒子的四个角都有10px的圆角半径 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 右上角的水平半径为1em，垂直半径为10% */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">1em</span> <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="处理不同方向文本"><a href="#处理不同方向文本" class="headerlink" title="处理不同方向文本"></a>处理不同方向文本</h1><p>writing-mode 属性能够指定文本的排列方向：</p>
<ul>
<li>horizontal-tb ，tb意思为top-&gt;bottom，块流从上到下，文字方向是水平的的</li>
<li>vertical-rl ，rl的意思为right-&gt;left，块流从右向左，文字方向是垂直的</li>
<li>vertical-lr ，lr的意思是left-&gt;right，块流从左向右，文字方向是垂直的</li>
</ul>
<h2 id="逻辑属性和物理属性"><a href="#逻辑属性和物理属性" class="headerlink" title="逻辑属性和物理属性"></a>逻辑属性和物理属性</h2><p>物理属性不会随着盒子的“块流”方向改变而改变，即使盒子的物理方向变了，物理属性（如 border-top）也不会改变它的位置</p>
<p>如果要实现样式随书写方式改变而改变，那么应该使用逻辑值，如border-top 应该替换为 border-block-start</p>
<p>之前使用的物理属性，有对应的逻辑属性，它们之间的映射为：</p>
<ul>
<li>top     –  block-start</li>
<li>right   –  inline-end</li>
<li>bottom  –  block-end</li>
<li>left    –  inline-start</li>
</ul>
<p>如果没有应用多种书写模式，那么目前仍然使用物理属性比较合适，物理属性在使用弹性布局和网格布局时非常有用</p>
<h1 id="溢出的内容"><a href="#溢出的内容" class="headerlink" title="溢出的内容"></a>溢出的内容</h1><p>我们可以使用给width和height(或者inline-size和block-size)赋值的方式来约束盒子的尺寸，CSS假定你知道在做什么并控制好了文本内容。这时当往盒子里塞太多东西就会溢出，超出盒子的范围</p>
<p>此外，由于盒子里的文本内容并非盒子，它们不会推开其他内容，所以这些文本会占居其他盒子的空间</p>
<p>之所以允许这种“溢出”的方式，是因为CSS要尽力避免数据损失，数据的丢失（如表格中提交按钮被隐藏）可比不整洁的外观问题严重多了</p>
<h2 id="overflow-属性"><a href="#overflow-属性" class="headerlink" title="overflow 属性"></a>overflow 属性</h2><p>overflow属性控制溢出内容的显示方式，它的默认取值为 visible ；如果想要隐藏内容可以设置 overflow: hidden; 但这通常不建议这么做</p>
<p> overflow: scroll; 能让盒子附加一个滚动条（内容没有溢出时也会显示）。 overflow-y: scroll; 能更准确地仅附加垂直方向的滚动条（或者使用 overflow: visible scroll;）</p>
<p> overflow: auto; 能让盒子仅在内容溢出的情况下附加滚动条</p>
<p>在使用诸如scroll或者auto的时候，会建立了一个块级排版上下文</p>
<h1 id="CSS值"><a href="#CSS值" class="headerlink" title="CSS值"></a>CSS值</h1><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>CSS的数值类型有以下几种：</p>
<table>
<thead>
<tr>
<th>数值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;integer&gt;</td>
<td>一个整数；某些属性允许负数</td>
</tr>
<tr>
<td>&lt;number&gt;</td>
<td>一个小数，如 -1.2 ;它也可能仅有整数部分</td>
</tr>
<tr>
<td>&lt;dimension&gt;</td>
<td>这算是一个附加单位的&lt;number&gt;，如 45px</td>
</tr>
<tr>
<td>&lt;percentage&gt;</td>
<td>百分数，它总是有一个参照量</td>
</tr>
</tbody></table>
<p>绝对长度单位：</p>
<table>
<thead>
<tr>
<th>单位</th>
<th>名称</th>
<th>等价换算</th>
</tr>
</thead>
<tbody><tr>
<td>px</td>
<td>像素</td>
<td></td>
</tr>
<tr>
<td>cm</td>
<td>厘米</td>
<td>1cm&#x3D;96px&#x2F;2.54</td>
</tr>
<tr>
<td>in</td>
<td>英寸</td>
<td>1in&#x3D;2.54cm&#x3D;96px</td>
</tr>
<tr>
<td>pt</td>
<td>点</td>
<td>1pt&#x3D;1in&#x2F;72</td>
</tr>
<tr>
<td>在这里像素px最有用，且一般只使用这个</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>相对长度单位：</p>
<table>
<thead>
<tr>
<th>单位</th>
<th>相对于</th>
</tr>
</thead>
<tbody><tr>
<td>em</td>
<td>在font-size中相对于父元素，其他属性中相对于自身字体的大小（如width中使用是相对于字体大小）</td>
</tr>
<tr>
<td>lh</td>
<td>元素的line-height</td>
</tr>
<tr>
<td>rem</td>
<td>根元素的字体大小</td>
</tr>
<tr>
<td>vw</td>
<td>视窗宽度的 1%</td>
</tr>
<tr>
<td>vh</td>
<td>视窗高度的 1%</td>
</tr>
<tr>
<td>···</td>
<td>···</td>
</tr>
<tr>
<td>一般常使用em，网页顶部横幅之类的，应该用vw（且可能是100vw）</td>
<td></td>
</tr>
</tbody></table>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>现代计算机的标准颜色系统是24位，允许通过红、绿、蓝通道的组合显示，每个通道有256个不同的值；此外还有alpha通道能控制透明度</p>
<p>颜色数据类型可以使用颜色关键字，也可以使用16进制rgb值和函数（或者rgba值和函数）</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>图片数据类型可以是一个 url() 函数，也可以是一个渐变函数</p>
<h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><p>位置数据源类型表示一组2D坐标，用以定位一个元素，可以使用关键字（如top、left、bottom、right、center）和像素指定，如 background-position: right 10px; 指定了背景图片的位置</p>
<h2 id="使用函数组合CSS值"><a href="#使用函数组合CSS值" class="headerlink" title="使用函数组合CSS值"></a>使用函数组合CSS值</h2><p>calc()函数能够对CSS值进行简单计算，如 width: calc(20% + 100px);</p>
<h1 id="调整容器尺寸"><a href="#调整容器尺寸" class="headerlink" title="调整容器尺寸"></a>调整容器尺寸</h1><h2 id="原始尺寸（固有尺寸）"><a href="#原始尺寸（固有尺寸）" class="headerlink" title="原始尺寸（固有尺寸）"></a>原始尺寸（固有尺寸）</h2><p>HTML元素有原始的尺寸。对于图像元素，它的长和宽由文件自身确定；对于一个空的div元素，它是没有尺寸的，高度为0</p>
<h2 id="具体尺寸"><a href="#具体尺寸" class="headerlink" title="具体尺寸"></a>具体尺寸</h2><p>给元素指定具体尺寸时，实际指定的是外部尺寸，如我们指定width和height，此后不论放里面是什么内容，容器都都会不改变它的尺寸（这也许会导致内容溢出）</p>
<p>在使用百分数指定尺寸时，百分数是以包含盒子的块为根据解析的，如果一个盒子指定一个百分数作为宽度，那么它的百分比依据是父容器的宽度</p>
<p>在使用百分数指定内外边距时，百分数是以包含快的内联尺寸进行计算的，它的百分比依据是元素的水平宽度</p>
<h2 id="最小和最大尺寸"><a href="#最小和最大尺寸" class="headerlink" title="最小和最大尺寸"></a>最小和最大尺寸</h2><p>对于容量可以变化的盒子，可以设置最大、最小尺寸。这个在避免溢出的同时处理变化容量很有用，在制作适应屏幕大小的响应式网页布局也十分有用</p>
<p>可以使用如 max-width:100%; 限定得图像可以变小，但不会变大（默认是按照图像原文件大小，设定后在较小容器中的图片会自动缩小以展示全貌）；如 min-height：20px; 限定的文档内容的盒子即使是空内容也会占据空间</p>
<p>这个技术不会改变下载的原始图片，对于大尺寸原始图片，应该在img标签内就指定下载的图像大小</p>
<h2 id="视口单位"><a href="#视口单位" class="headerlink" title="视口单位"></a>视口单位</h2><p>视口是浏览器中的“可见屏幕”，可以使用视口单位，制作随用户视口改变而改变的效果</p>
<p>1vw为视口宽度的百分之一，1vh为视口高度的百分之一</p>
<p>特殊地，对于嵌入在iframe中内容，它的视口大小是外部观察的iframe元素的尺寸</p>
<h1 id="样式化表格"><a href="#样式化表格" class="headerlink" title="样式化表格"></a>样式化表格</h1><p>暂时省略记录，等有确实需要再整理</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML构建Web</title>
    <url>/2022/09/08/%E5%AD%A6%E4%B9%A0/web%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0--HTML%E6%9E%84%E5%BB%BAWeb/</url>
    <content><![CDATA[<ul>
<li>2022-09-15 完成HTML构建Web的整理</li>
</ul>
<span id="more"></span>


<h1 id="HTML介绍"><a href="#HTML介绍" class="headerlink" title="HTML介绍"></a>HTML介绍</h1><h2 id="剖析HTML元素"><a href="#剖析HTML元素" class="headerlink" title="剖析HTML元素"></a>剖析HTML元素</h2><h3 id="块级元素和内联元素"><a href="#块级元素和内联元素" class="headerlink" title="块级元素和内联元素"></a>块级元素和内联元素</h3><p>块级元素在页面中以“块”的形式展现：同等级的块会出现在新的一行，通常展示结构化内容，如段落、列表、导航菜单、页脚等。一个以 block 形式展现的块级元素无法嵌套进内联元素，但可以嵌套在块级元素中</p>
<p>内联元素通常出现在块级元素中，作为块级元素一部分：内联元素不会导致文本换行，通常出现在一堆文字中间，如超链接元素&lt;a&gt;或强调元素&lt;em&gt;和&lt;strong&gt;</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性与元素名称和别的属性之间，存在一个空格；属性名称使用等于号赋值，属性值用一对引号包围(布尔属性没有值)</p>
<h4 id="实践–锚元素添加属性"><a href="#实践–锚元素添加属性" class="headerlink" title="实践–锚元素添加属性"></a>实践–锚元素添加属性</h4><p>元素&lt;a&gt;是锚，是被标签包围的内容成为一个超链接，它可以添加以下属性:</p>
<ul>
<li>href， 声明超链接的web地址，如 href&#x3D;”<a href="https://www.ice-cocoa.net&quot;/">https://www.ice-cocoa.net&quot;</a></li>
<li>title， 为链接地址提供额外信息，鼠标悬停时，以工具提示的形式显示；如 title&#x3D;”我的首页”</li>
<li>target， 用于指定链接如何呈现，例如 target&#x3D;”_blank” 将在打开新标签后打开链接</li>
</ul>
<h4 id="布尔属性"><a href="#布尔属性" class="headerlink" title="布尔属性"></a>布尔属性</h4><p>布尔属性没有值，这是合法的，他们有跟属性名一样的属性值。例如 disabled 等价于 disabled&#x3D;”disabled” </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 disabled 属性来防止终端用户输入文本到输入框中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="引号问题"><a href="#引号问题" class="headerlink" title="引号问题"></a>引号问题</h3><p>建议所有的属性都由双引号包括（也使用单引号，但更习惯于双引号），除了布尔属性的省略写法下，没有属性值，无法用引号包围</p>
<h3 id="转义引用"><a href="#转义引用" class="headerlink" title="转义引用"></a>转义引用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 中用 <span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span> 来定义段落元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTML 中用 &lt;p&gt; 来定义段落元素</span><br></pre></td></tr></table></figure>
<p><a href="http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references">XML和HTML字符实体引用列表</a></p>
<h2 id="head-标签–-HTML元数据"><a href="#head-标签–-HTML元数据" class="headerlink" title="head 标签– HTML元数据"></a>head 标签– HTML元数据</h2><p>许多 &lt;mata&gt; 元素包含了 name 和 content属性：</p>
<ul>
<li>name 指定了 &lt;mate&gt; 元素的类型</li>
<li>content 指定了实际的元数据内容 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ice-cocoa&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;The MDN Web Docs site</span></span></span><br><span class="line"><span class="string"><span class="tag">  provides information about Open Web technologies</span></span></span><br><span class="line"><span class="string"><span class="tag">  including HTML, CSS, and APIs for both Web sites and</span></span></span><br><span class="line"><span class="string"><span class="tag">  progressive web apps.&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
指定 author ，能让一些内容管理系统自动获取作者信息；<br>指定 description 的关键字十分有用，能够让搜索引擎的相关搜索出现更多</li>
</ul>
<p>许多 &lt;meta&gt; 特性已不再使用，如 meta-keywords ，这个将被搜索引擎忽略</p>
<h3 id="为站点添加自定义图标–-添加link引用"><a href="#为站点添加自定义图标–-添加link引用" class="headerlink" title="为站点添加自定义图标– 添加link引用"></a>为站点添加自定义图标– 添加link引用</h3><p>添加图标的操作顺序为:</p>
<ol>
<li>保存在与网站的索引页面相同的目录中，以 .ico 格式保存 （大多数支持通用的png和jpg，而ico能兼容像ie6那样的古老浏览器）</li>
<li>使用添加 &lt;link&gt; 引用</br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>现在有很多其他的图标类型可以考虑:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 适用于第三代iPad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;144x144&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/static/img/favicon144.png&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 适用于第一第二代iPad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon-precomposed&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;72x72&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/static/img/favicon72.png&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基本图标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/static/img/favicon32.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在HTML应用CSS和JavaScript–-添加link和script引用"><a href="#在HTML应用CSS和JavaScript–-添加link和script引用" class="headerlink" title="在HTML应用CSS和JavaScript– 添加link和script引用"></a>在HTML应用CSS和JavaScript– 添加link和script引用</h3><p>添加css引用的 &lt;link&gt; 元素，应该位于文档头部； rel&#x3D;”stylesheet” 表明这是文档的样式表，href&#x3D;”my-css-file.css” 表明了路径:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;my-css-file.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加JavaScript引用的 &lt;script&gt; 元素，没有位置限制； src&#x3D;”my-js-file.js” 指明了文件路径， defer 表明解析完HTML后再加载JavaScript；注意，&lt;script&gt;并不是一个空元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;my-js-file.js&quot;</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h1 id="HTML文本基础"><a href="#HTML文本基础" class="headerlink" title="HTML文本基础"></a>HTML文本基础</h1><h2 id="为文档设置诸语言"><a href="#为文档设置诸语言" class="headerlink" title="为文档设置诸语言"></a>为文档设置诸语言</h2><p>为文档设置主语言，能够帮助搜索引擎更好搜索，辅助阅读工具工作更准确:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为文档段设置语言:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Japanese example: <span class="tag">&lt;<span class="name">span</span> <span class="attr">lang</span>=<span class="string">&quot;ja&quot;</span>&gt;</span>ご飯が熱い。<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="HTML结构层次内容"><a href="#HTML结构层次内容" class="headerlink" title="HTML结构层次内容"></a>HTML结构层次内容</h2><p>HTML文本是结构层次的，文本内容从属于所在的标题，一般情况下应该只使用一次 h1  </p>
<h3 id="文本内容元素"><a href="#文本内容元素" class="headerlink" title="文本内容元素"></a>文本内容元素</h3><p>HTML文本内容元素可以有:</p>
<ul>
<li>h1, h2, …</li>
<li>p </li>
<li>span 是短语内容的通用<strong>行内容器</strong>，是行内元素，用来设置包围内容的统一格式</li>
<li>div 是一个通用型的<strong>流内容容器</strong>，是块元素</li>
<li>ul, ol  列表，内部项目为 li</li>
</ul>
<h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><p>文本修饰元素有:</p>
<ul>
<li>粗体强调 &lt;strong&gt;</li>
<li>粗体 &lt;b&gt;</li>
<li>斜体强调 &lt;em&gt;</li>
<li>斜体 &lt;i&gt;</li>
<li>下划线 &lt;u&gt; 尽量不使用，因为它容易与超链接混淆；</li>
<li>删除线 &lt;del&gt; 删除线</li>
</ul>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><h2 id="超链接的创建"><a href="#超链接的创建" class="headerlink" title="超链接的创建"></a>超链接的创建</h2><p>通过将文本（或图片，甚至是块元素）包裹在 &lt;a&gt; 元素内，并给一个 href，可以创建一个超链接 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文本内容超链接<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/zh-CN/&quot;</span>&gt;</span>Mozilla 主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>的超链接。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>创建一个图像内容超链接<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/zh-CN/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;mozilla-image.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;链接至 Mozilla 主页的 Mozilla 标志&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="统一资源定位符URL与路径path"><a href="#统一资源定位符URL与路径path" class="headerlink" title="统一资源定位符URL与路径path"></a>统一资源定位符URL与路径path</h2><p>统一资源定位符(URL:Uniform Resource Locator)，定义了在网络上位置的某个资源的文本字符串  </p>
<h3 id="定位到文件"><a href="#定位到文件" class="headerlink" title="定位到文件"></a>定位到文件</h3><p>网页文件(.html)指向本身所处的文件夹，它可以指向其他文件夹，引用那里的文件:</p>
<ul>
<li>指向当前目录</li>
<li>指向子目录</li>
<li>指向上级目录：返回上级目录使用两个英文点号表示(..)，如：  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击打开<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../pdfs/project-brief.pdf&quot;</span>&gt;</span>项目简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span>。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="定位到文档片段"><a href="#定位到文档片段" class="headerlink" title="定位到文档片段"></a>定位到文档片段</h3><p>超链接可以链接到HTML文档的特定部分，这个特定文档片段必须要分配一个id，才能由超链接找到</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定位到某个网页的某个id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>要提供意见和建议，请将信件邮寄至<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;contactshtml#Mailing_address&quot;</span>&gt;</span>我们的地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定位到当前网页的某个id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>本页面底部可以找到<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#Mailing_address&quot;</span>&gt;</span>公司邮寄地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="绝对URL和相对URL"><a href="#绝对URL和相对URL" class="headerlink" title="绝对URL和相对URL"></a>绝对URL和相对URL</h3><p>绝对URL指明了<strong>协议和域名</strong>，以及“那个”服务器下的路径<br>相对URL仅仅指明了本地路径</p>
<h3 id="下载链接使用download属性"><a href="#下载链接使用download属性" class="headerlink" title="下载链接使用download属性"></a>下载链接使用download属性</h3><p>使用download属性提供一个默认的保存名:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://download.mozilla.org/?product=firefox-latest-ssl&amp;os=win64&amp;lang=zh-CN&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">download</span>=<span class="string">&quot;firefox-latest-64bit-installer.exe&quot;</span>&gt;</span></span><br><span class="line">  下载最新的 Firefox 中文版 - Windows（64位）</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="电子邮件链接"><a href="#电子邮件链接" class="headerlink" title="电子邮件链接"></a>电子邮件链接</h2><p>使用 &lt;a&gt; 元素 和 mailto:URL 方案:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:wangbonsgo@163.com&quot;</span>&gt;</span>向wyc发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此外，还可以添加邮件的额外参数，如，主题subject、抄送cc、暗抄送bcc、主体body；如</p>
<h1 id="高阶文字排版"><a href="#高阶文字排版" class="headerlink" title="高阶文字排版"></a>高阶文字排版</h1><h2 id="描述列表"><a href="#描述列表" class="headerlink" title="描述列表"></a>描述列表</h2><p>描述列表使用:</p>
<ul>
<li>&lt;dl&gt; – description list 描述列表</li>
<li>&lt;dt&gt; – description term 描述语</li>
<li>&lt;dd&gt; – description definition 描述定义，会自动产生四个空格的缩进</li>
</ul>
<p>如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>内心独白<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>戏剧中，某个角色对自己的内心活动或感受进行念白表演，这些台词只面向观众，而其他角色不会听到。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>语言独白<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>戏剧中，某个角色把自己的想法直接进行念白表演，观众和其他角色都可以听到。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>旁白<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>戏剧中，为渲染幽默或戏剧性效果而进行的场景之外的补充注释念白，只面向观众，内容一般都是角色的感受、想法、以及一些背景信息等。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="文本引用"><a href="#文本引用" class="headerlink" title="文本引用"></a>文本引用</h2><h3 id="块引用–-lt-blockquote-gt"><a href="#块引用–-lt-blockquote-gt" class="headerlink" title="块引用– &lt;blockquote&gt;"></a>块引用– &lt;blockquote&gt;</h3><p>如果一个块级内容（一个段落、多个段落、一个列表等）从其他地方被引用，你应该把它用&lt;blockquote&gt;元素包裹起来表示<br>例如，下面的例子引用MDN的页面:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The <span class="tag">&lt;<span class="name">strong</span>&gt;</span>HTML <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>blockquote<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> Element<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> (or <span class="tag">&lt;<span class="name">em</span>&gt;</span>HTML Block</span><br><span class="line">  Quotation Element<span class="tag">&lt;/<span class="name">em</span>&gt;</span>) indicates that the enclosed text is an extended quotation.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>浏览器会默认增加一个四个空格的缩进</p>
<h3 id="行内引用–-lt-q-gt"><a href="#行内引用–-lt-q-gt" class="headerlink" title="行内引用– &lt;q&gt;"></a>行内引用– &lt;q&gt;</h3><p>行内引用使用 &lt;q&gt; 元素，例如下面的标记包含了从MDN页面的引用:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The quote element — <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>q<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> — is <span class="tag">&lt;<span class="name">q</span> <span class="attr">cite</span>=<span class="string">&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q&quot;</span>&gt;</span>intended</span><br><span class="line">for short quotations that don&#x27;t require paragraph breaks.<span class="tag">&lt;/<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="引文元素–-lt-cite-gt"><a href="#引文元素–-lt-cite-gt" class="headerlink" title="引文元素– &lt;cite&gt;"></a>引文元素– &lt;cite&gt;</h3><p>相比 cite 属性， &lt;cite&gt;元素可以显示并且添加链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>According to the </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">cite</span>&gt;</span>MDN blockquote page<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="缩略语"><a href="#缩略语" class="headerlink" title="缩略语"></a>缩略语</h2><p>缩略语元素 &lt;abbr&gt; (Abbreviation)有一个 title 属性，它包围要缩略显示的文档，当鼠标放到这个项目上时会出现提示(内容为title值)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我们使用 <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;超文本标记语言（Hyper text Markup Language）&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> 来组织网页文档。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="标记联系方式"><a href="#标记联系方式" class="headerlink" title="标记联系方式"></a>标记联系方式</h2><p>包含文档编写作者或者网站作者的联系方式，使用元素&lt;address&gt;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Contact the author of this page:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:wangbonsgo@163.com&quot;</span>&gt;</span>wangbonsgo@163.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:949000744@qq.com&quot;</span>&gt;</span>949000744@qq.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试样式时发现，这个元素在结构上应该不能够从属于段落&lt;p&gt;</p>
<h2 id="上标和下标"><a href="#上标和下标" class="headerlink" title="上标和下标"></a>上标和下标</h2><p>上标元素为&lt;sub&gt;，如： H&lt;sub&gt;2&lt;/sub&gt;O —- H<sub>2</sub>O<br>上标元素为&lt;sup&gt;，如： x&lt;sup&gt;3&lt;/sup&gt;3 —- x<sup>3</sup></p>
<h2 id="展示计算机代码"><a href="#展示计算机代码" class="headerlink" title="展示计算机代码"></a>展示计算机代码</h2><p>&lt;code&gt; 元素用来标记通用代码，&lt;pre&gt; 元素用来保留空白字符；一般，&lt;code&gt; 元素需要用 &lt;pre&gt; 元素来包围  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>const para = document.querySelector(&#x27;p&#x27;);</span><br><span class="line"></span><br><span class="line">  para.onclick = function() &#123;</span><br><span class="line">    alert(&#x27;js点击&#x27;);</span><br><span class="line">  &#125;<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试样式时发现，这个元素在结构上应该不能够从属于段落&lt;p&gt;</p>
<h2 id="标记时间和日期"><a href="#标记时间和日期" class="headerlink" title="标记时间和日期"></a>标记时间和日期</h2><p>使用 &lt;time&gt; 元素标记时间和日期</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准简单日期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01-20&quot;</span>&gt;</span>20 January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含年份和月份--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01&quot;</span>&gt;</span>January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含月份和日期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;01-20&quot;</span>&gt;</span>20 January<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含时间，小时和分钟数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;19:30&quot;</span>&gt;</span>19:30<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 还可包含秒和毫秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;19:30:01.856&quot;</span>&gt;</span>19:30:01.856<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日期和时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01-20T19:30&quot;</span>&gt;</span>7.30pm, 20 January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="文档和网站架构"><a href="#文档和网站架构" class="headerlink" title="文档和网站架构"></a>文档和网站架构</h1><p>网页外观多种多样，但都倾向于使用类似的标准组件:</p>
<ul>
<li>页眉<br><dd>通常横跨于整个页面顶部有一个大标题 和/或 一个标志。这是网站的主要一般信息，通常存在于所有网页。</dd></li>
<li>导航栏<br><dd>指向网站各个主要区段的超链接。通常用菜单按钮、链接或标签页表示。</dd></li>
<li>侧边栏<br><dd>一些外围信息、链接、引用、广告等；也可能存在辅助导航系统</dd></li>
<li>主内容</li>
<li>页脚<br><dd>横跨页面底部的狭长区域。和标题一样，页脚是放置公共信息（比如版权声明或联系方式）的，一般使用较小字体，且通常为次要内容。还可以通过提供快速访问链接来进行 SEO。</dd></li>
</ul>
<h2 id="用于构架内容的HTML"><a href="#用于构架内容的HTML" class="headerlink" title="用于构架内容的HTML"></a>用于构架内容的HTML</h2><p>HTML提供了明确这些区段的专用标签:</p>
<ul>
<li>&lt;header&gt; 页眉<br><dd>如果作为 body 子元素，那么就是全局页眉；如果是 article 或 section 的子元素，那么这些部分特有的页眉</dd></li>
<li>&lt;nav&gt; 导航栏</li>
<li>&lt;main&gt; 主内容。著内容下有各种子内容段，如 article、section<br><dd>每个页面上只能用一次 &lt;main&gt;，应该直接位于&lt;body&gt;中</dd><br><dd> &lt;section&gt;适用于组织页面功能，如迷你地图、文章摘要</dd></li>
<li>&lt;aside&gt; 侧边栏，经常嵌套在 &lt;main&gt; 中</li>
<li>&lt;footer&gt; 页脚</li>
</ul>
<p>一般body的组织方式为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">header--h1       本站统一主标题</span><br><span class="line">  |</span><br><span class="line">  |</span><br><span class="line">nav--ul         本站统一导航栏目</span><br><span class="line">    --form       本站统一搜索栏</span><br><span class="line">  |</span><br><span class="line">  |</span><br><span class="line">main--aside--h2--ul   本站统一侧边栏</span><br><span class="line">    --article   帖子</span><br><span class="line">  |</span><br><span class="line">  |</span><br><span class="line">footer--p        本站统一页脚</span><br></pre></td></tr></table></figure>
<h3 id="无语义元素–-div、span"><a href="#无语义元素–-div、span" class="headerlink" title="无语义元素– div、span"></a>无语义元素– div、span</h3><p>&lt;span&gt; 是一个内联(inline)的无语义元素，&lt;div&gt; 是一个块级(block)无语义元素<br>这两个元素应当在找不到更好的语义元素，或不想怎加特定含义时才使用；应该配合class属性，易于设定样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shopping-cart&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>银耳环<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>：$99.95.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../products/3333-0985/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Silver earrings&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>总价：$237.89<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="换行水平分割线–-br、hr"><a href="#换行水平分割线–-br、hr" class="headerlink" title="换行水平分割线– br、hr"></a>换行水平分割线– br、hr</h3><p>换行元素 &lt;br&gt;<br>水平分割线元素 &lt;hr&gt; ，会渲染成一条水平直线</p>
<h3 id="HTML验证"><a href="#HTML验证" class="headerlink" title="HTML验证"></a>HTML验证</h3><p>让网页通过W3C的标记验证服务<a href="https://validator.w3.org/">Markup Validation Service</a></p>
<h1 id="多媒体与嵌入"><a href="#多媒体与嵌入" class="headerlink" title="多媒体与嵌入"></a>多媒体与嵌入</h1><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>像 &lt;img&gt; 和 &lt;video&gt; 这样的元素有时被称为替换元素，因为这样的元素内容和尺寸有外部资源定义，而非元素本身  </p>
<p>图片有以下属性:</p>
<ul>
<li>属性 src ，使用统一资源定位符URL指向外部资源  </li>
<li>属性 alt ，备选文本<br><dd>在图片无法显示或不能被看到的情况下(如辅助阅读)显示；某些备选文本没有意义的情况下，应该赋予空值<br></dd></li>
<li>属性 width height<br><dd>设定图片显示的高度和宽度，会造成拉伸或缩小；如果图片正在加载，则会预留空白，设定图片尺寸可以有效避免因加载图片导致的页面文本“跳动”；然而，如果需要改变图片尺寸，应该使用 CSS ；<br></dd></li>
<li>属性 title ，图片标题，鼠标悬停显示</li>
</ul>
<h3 id="图片搭配文字说明"><a href="#图片搭配文字说明" class="headerlink" title="图片搭配文字说明"></a>图片搭配文字说明</h3><p>&lt;figure&gt; 和 &lt;figcaption&gt; 元素能够更好地为图片提供一个语义容器，建立图片与说明文字的联系</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/test.jpg&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;测试图片&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">height</span>=<span class="string">&quot;341&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>这是一张精美的测试图片，清晰地展示了测试的用途<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此外，&lt;figure&gt; 不一定是一张图片，可以是几张图片、一段代码、音视频、方程或表格等。</p>
<h3 id="CSS背景图片"><a href="#CSS背景图片" class="headerlink" title="CSS背景图片"></a>CSS背景图片</h3><p>使用 CSS 嵌入的背景图片要求不包含语义</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;images/test.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样插入图片的方法能够更好地设置图片</p>
<h2 id="插入视频和音频内容"><a href="#插入视频和音频内容" class="headerlink" title="插入视频和音频内容"></a>插入视频和音频内容</h2><h3 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h3><p>&lt;video&gt;插入视频，关于视频格式和其他问题不记录，此处仅给出样例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autoplay</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">muted</span></span></span><br><span class="line"><span class="tag">       <span class="attr">preload</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">poster</span>=<span class="string">&quot;poster.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;rabbit320.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;rabbit320.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的浏览器不支持 HTML5 视频。可点击<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;rabbit320.mp4&quot;</span>&gt;</span>此链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>观看<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>muted会默认关闭声音；poster指向预览图片；preload用来缓冲文件，”none”表示不缓冲</p>
<h3 id="插入音频"><a href="#插入音频" class="headerlink" title="插入音频"></a>插入音频</h3><p>&lt;audio&gt;插入视频。相比 &lt;video&gt; 元素，它没有预览poster和高宽度的属性</p>
<h3 id="显示音轨文本"><a href="#显示音轨文本" class="headerlink" title="显示音轨文本"></a>显示音轨文本</h3><p>需要准备WebVTT文件(.vtt)，用 &lt;tracks&gt; 标签链接到 .vtt 文件并放在 &lt;audio&gt; 或 &lt;video&gt; 视频中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;example.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;example.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span> <span class="attr">src</span>=<span class="string">&quot;subtitles_en.vtt&quot;</span> <span class="attr">srclang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="嵌入技术"><a href="#嵌入技术" class="headerlink" title="嵌入技术"></a>嵌入技术</h2><p>这里主要记录 &lt;ifarme&gt; 元素，下面是一个嵌入MDN术语表的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://developer.mozilla.org/zh-CN/docs/Glossary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">sandbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/zh-CN/docs/Glossary&quot;</span>&gt;</span></span><br><span class="line">    Fallback link for browsers that don&#x27;t support iframes</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然而，实际嵌入时，报出这样的错误：<br><br>Refused to display … it set ‘X-Frame-Options’ to ‘deny’；如果换成某个静态网站，即没有设置拒绝嵌入的，则可以成功嵌入</p>
<p>由于 &lt;ifarme&gt; 的嵌入技术存在安全问题，其中单击劫持(比如使用透明的外部网页诱导输入或点击)是一种常见的iframe攻击</p>
<p>由于安全和版权的问题，应该仅在有必要的时候嵌入（以及允许嵌入，如设置返回头 X-Frame-Options&#x3D;’deny’），并且始终使用沙盒属性sandbox</p>
<h2 id="矢量图介绍"><a href="#矢量图介绍" class="headerlink" title="矢量图介绍"></a>矢量图介绍</h2><p>SVG 是用于描述矢量图像的XML语言，SVG 用于标记图形，而不是内容<br>以下代码创建一个圆和矩形，把它写在txt文件后，改 .svg 后缀，即可被浏览器识别：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;150&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">r</span>=<span class="string">&quot;90&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于简单的图像，矢量图十分容易编写，且可内嵌文字</p>
<p>在HTML页面中引入矢量图有两种方法，一是使用 &lt;img&gt; 元素，指向 .svg 文件；二是使用 &lt;svg&gt; 元素</p>
<p>以下展示使用 &lt;svg&gt; 元素的方法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方法的明显缺点是无法像普通图片一项缓存内联SVG；不过若是少数使用，则免去了维护文件的麻烦</p>
<h1 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h1><h2 id="切换显示不同大小的图片"><a href="#切换显示不同大小的图片" class="headerlink" title="切换显示不同大小的图片"></a>切换显示不同大小的图片</h2><p>显示相同内容，但仅仅根据设备大小来显示更大或更小的图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-fairy-320w.jpg 320w,</span></span></span><br><span class="line"><span class="string"><span class="tag">             elva-fairy-480w.jpg 480w,</span></span></span><br><span class="line"><span class="string"><span class="tag">             elva-fairy-800w.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">sizes</span>=<span class="string">&quot;(max-width: 320px) 280px,</span></span></span><br><span class="line"><span class="string"><span class="tag">            (max-width: 480px) 440px,</span></span></span><br><span class="line"><span class="string"><span class="tag">            800px&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">&quot;elva-fairy-800w.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Elva dressed as a fairy&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>srcset 定义了浏览器选择的图像集，以及每个图像的大小<br><dd>每项以逗号隔开，每个项目写： 一个文件名，一个空格，图像的固有宽度（480w 以像素为单位，w是宽度描述符）</dd></li>
<li>sizes 定义了一组媒体条件，如窗口宽度，并在条件下为真下指明图片尺寸<br><dd>每项以逗号隔开，每个项目写：一个媒体条件（max-width:480x 表可是窗口宽度480像素或更少），一个空格，图像填充的<strong>槽的宽度</strong></dd></li>
<li>src 这仍是有必要的，部分浏览器可能会忽略自适应特征</li>
</ul>
<p>有了这两个属性，浏览器会查看设备宽度，检查 sizes 列表中真的条件，并查看给与的槽的大小，最后引用 srcset 中最接近所选槽大小的图像</p>
<p>备注：在HTML文件的头部标签了，手机端很可能找到以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这行代码强制让手机浏览器采用真实窗口宽度来加载网页（因为某些手机浏览器会提供不真实的宽度，然后加载大宽度页面后缩小）</p>
<h2 id="相同图片在不同分辨率下缩放"><a href="#相同图片在不同分辨率下缩放" class="headerlink" title="相同图片在不同分辨率下缩放"></a>相同图片在不同分辨率下缩放</h2><p>有些设备具有高分辨率，为了显示同样尺寸，过 srcset 和 x 语法结合 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-fairy-320w.jpg,</span></span></span><br><span class="line"><span class="string"><span class="tag">             elva-fairy-480w.jpg 1.5x,</span></span></span><br><span class="line"><span class="string"><span class="tag">             elva-fairy-640w.jpg 2x&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">&quot;elva-fairy-640w.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Elva dressed as a fairy&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时，以下 CSS 会应用:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">320px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当访问页面设备具有低分辨率，一个设备像素表示一个css像素，elva-fairy-320w.jpg 会被加载；<br>如果访问页面设备的一个设备像素表示两个css像素，elva-fairy-640w.jpg 2x 会被加载</p>
<h2 id="对图片进行美术设计"><a href="#对图片进行美术设计" class="headerlink" title="对图片进行美术设计"></a>对图片进行美术设计</h2><p>在不同访问网页设备上，都能“同样”显示图片重要部分<br>使用 &lt;picture&gt; 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(max-width: 799px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-480w-close-portrait.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 800px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-800w.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;elva-800w.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Chris standing up holding his daughter Elva&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的 media 属性与 sizes类似</p>
<h1 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h1><h2 id="表格基础层次"><a href="#表格基础层次" class="headerlink" title="表格基础层次"></a>表格基础层次</h2><p>表格架构:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>xxxxxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>xxxxxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxxxxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxxxxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxxxxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxxxxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每一个 &lt;tr&gt; 标签将创建一行；包围在 &lt;tr&gt; 内的 多个 &lt;td&gt; 为单元格(单元格为空也会创建一个空的单元格)；如果被包围的是 &lt;hd&gt; 则这个单元格被赋予标题的意义</p>
<p>使用 colspan 属性可以让一个单元格的宽度为多个单元格；同样，使用 rowspan 属性可以让一个单元格高度为多个单元格</p>
<p>此外，html中应用的表格样式很容易被css覆盖，且不好管理，应该使用 CSS 进行样式设置</p>
<h2 id="表格特性"><a href="#表格特性" class="headerlink" title="表格特性"></a>表格特性</h2><h3 id="表格描述"><a href="#表格描述" class="headerlink" title="表格描述"></a>表格描述</h3><p>&lt;caption&gt; 元素为表格增加描述    </p>
<h3 id="注明表格结构的元素"><a href="#注明表格结构的元素" class="headerlink" title="注明表格结构的元素"></a>注明表格结构的元素</h3><p>使用元素标记表格，定义为表头、页脚、正文部分，这有助于 CSS 的应用:</p>
<ul>
<li>&lt;thead&gt; 嵌套在 table 元素中，通常包围表格的标题行</li>
<li>&lt;tbody&gt; 嵌套在 table 元素中，默认会隐式包含</li>
<li>&lt;tfoot&gt; 嵌套在 table 元素中，允许包围 &lt;tr&gt;，包围的 &lt;tr&gt; 会被认定为页脚，放在表格最后一行</li>
</ul>
<p>由于 &lt;tbody&gt; 的隐式包含，实际上我们做的是把表格头和表格页脚额外标注出来</p>
<h3 id="指明行标题、列标题"><a href="#指明行标题、列标题" class="headerlink" title="指明行标题、列标题"></a>指明行标题、列标题</h3><p>&lt;th&gt; 元素表明当前单元格作为标题，如果添加 scope 属性会帮助理解是行标题，还是列标题，这对于辅助阅读十分有帮助</p>
<p>scope 属性可以取值 “col”、”row”、”colgroup”、”rowgroup”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;clogroup&quot;</span>&gt;</span>购物<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>购买地点<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>购买日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>商品评价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>商品价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ... ...</span><br></pre></td></tr></table></figure>

<p>对于每个单元格，也可以指定它从属的标题的id，这要对 &lt;td&gt; 使用 headers 属性，但个人认为不具有实用价值</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>Web入门</title>
    <url>/2022/09/08/%E5%AD%A6%E4%B9%A0/web%E5%89%8D%E7%AB%AF/%E7%AC%94%E8%AE%B0--Web%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="Web入门"><a href="#Web入门" class="headerlink" title="Web入门"></a>Web入门</h1><h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><p>index.html 示例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My test page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/firefox-icon.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;My test image&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明:</p>
<ul>
<li><!DOCTYPE> 指明文档类型；当今仅用于保证文档正常读取</li>
<li>根元素<html></html>，包含住整个也没内容</li>
<li>头部元素<head><head/>，对用户不可见，包含一些元数据(meta)</li>
<li>head内<meta charset="utf-8">，指明编码</li>
<li>head内<title></title>，设置页面标题，也作为浏览器标签显示</li>
<li>主体元素<body></body></li>
</ul>
<h3 id="图像–-元素"><a href="#图像–-元素" class="headerlink" title="图像– 元素"></a>图像– <img>元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/firefox-icon.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;My test image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>属性 src 可以指定地址嵌入图像；属性 alt 是文件的描述内容，在图像不可见时显示</p>
<h3 id="标记文本–-标题、段落、列表"><a href="#标记文本–-标题、段落、列表" class="headerlink" title="标记文本– 标题、段落、列表"></a>标记文本– 标题、段落、列表</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>主标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>顶层标题<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>子标题<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>次子标题<span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>标题对于无障碍访问和搜索引擎优化非常有意义</p>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>无序列表(Unorderd List)、有序列表(Ordered List)内使用列表项目元素(List Item)元素包围:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>科学家<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>哲学家<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>建筑家<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>链接赋予 Web 网络属性，使用元素 &lt;a&gt; (anchor的缩写)来植入链接</p>
<p>将链接植入到文本需要以下步骤:</p>
<ol>
<li>选择文本</li>
<li>把文本包围在 &lt;a&gt;&lt;/a&gt; 元素内，给予文本“锚”的特征</li>
<li>给&lt;a&gt;添加一个 herf (代表hypertext reference)属性，把值设置为所需网址</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>综合以上，应该实现了以下代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My test page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/firefox-icon.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;My test image&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>以下是一个列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>科学家<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>哲学家<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>建筑家<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>阅读<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/zh-CN/about/manifesto/&quot;</span>&gt;</span>Mozilla 宣言<span class="tag">&lt;/<span class="name">a</span>&gt;</span>，了解更多<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="CSS-基础"><a href="#CSS-基础" class="headerlink" title="CSS 基础"></a>CSS 基础</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例中，整个结构称为“规则集”，各个部分释义如下:</p>
<ul>
<li>选择器(Selector)<br>  </br> 选择了需要添加样式的元素(如本例中的 p 元素)，给不同元素添加样式只需要更改选择器</li>
<li>声明(Declaration)–一个单独的规则，如 color: red; </br> 声明与声明之间用“分号”隔开 </li>
<li>属性(Properties)，如 color，是改变 HTML 元素样式的途径</li>
<li>属性的值(Property Value)，它从指定属性的众多外观中指定一个值</li>
</ul>
<p>下面是常用的选择器类型:</p>
<ul>
<li>元素选择器– 指定类型的HTML元素<br>  </br>如: 选择器值为 <em>p, li, h1</em> 这三个用逗号隔开的元素，<strong>同时</strong>选择了 &lt;p&gt; &lt;li&gt; &lt;h1&gt; </li>
<li>ID选择器– 指定具有特定ID的元素<br>  </br>如: 选择器值为 <em>#my-id</em>，可以选择 &lt;p id&#x3D;”my-id”&gt; </li>
<li>类选择器– 指定具有特定类的元素<br>  </br>如：选择器值为 <em>.my-class</em>， 可以选择 &lt;p class&#x3D;’&#x3D;”my-class”&gt;， &lt;a class&#x3D;”my-class”&gt;</li>
<li>元素属性选择器– 指定拥有特定属性的元素<br>  </br>如：选择器值为 *img[src]*， 可以选择 &lt;img src&#x3D;”myimage.png”&gt;这样的含有 src 属性的元素</li>
<li>伪类选择器– 特定状态下的特定元素，如鼠标指针所悬停的链接<br>  </br>如：选择器为 <em>a:hover</em>, 可以选择有鼠标悬停的&lt;a&gt;</li>
<li>其他</li>
</ul>
<h3 id="字体和文本"><a href="#字体和文本" class="headerlink" title="字体和文本"></a>字体和文本</h3><p>备注:中文字体文件不适合直接用于 Web Font </p>
<ol>
<li>为当前网页下载字体，从而使自定义CSS可以对HTML元素应用这个字体，在头部添加如下代码:</br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.font.im/css?family=Open+Sans&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>删除 style.css 中已有规则</li>
<li>在 style.css ，替代 font family 占位行，并给其他元素也设置样式代码如下:</br> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*备注: 注释不可以嵌套，并且不接受单行//注释 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*给整个页面设置字体格式*/</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="comment">/* px 表示“像素（pixels）”: 基础字号为 10 像素 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* Google fonts 输出的 CSS */</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Open Sans&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*给部分元素设置字体格式*/</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>, <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="comment">/* line-height 后面可以跟不同的参数，如果是数字，就是当前字体大小乘上数字 */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h3><p>CSS布局主要就是基于盒子模型的，页面里大部分HTML元素都可以被看作是若干层堆叠的盒子</p>
<p>每个占据页面空间的块都有这样的属性:</p>
<ul>
<li>padding– 内边距</li>
<li>border– 边框</li>
<li>margin– 外边距<br><img src="/box-model.png" alt="CSS盒模型示意图"></li>
</ul>
<p>在这里还使用了:</p>
<ul>
<li>width– 元素宽度</li>
<li>background-color– 背景色</li>
<li>color– 元素内容颜色，一般是文本颜色</li>
<li>display– 元素的演示模式</li>
</ul>
<h4 id="文档体格式设置"><a href="#文档体格式设置" class="headerlink" title="文档体格式设置"></a>文档体格式设置</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#FF9500</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下解释 &lt;body&gt; 元素的css设置:</p>
<ul>
<li>width:600px; – 强制页面保持600像素</li>
<li>margin:0 auto; – 为margin(或padding等属性)设置两个值时，第一个值设置元素上方和下方，第二个值设置左边和右边；这里auto表示水平方向上左右对称</li>
<li>padding:0 20px 20px 20px; – 给出四个值，设置内边距上下左右的像素距离</li>
<li>border:5px solid black; – 直接为body设置5像素的黑色实线边框</li>
<li>background-color: #FF9500; – 为body设置背景色</li>
</ul>
<h4 id="定位页面主题并添加样式"><a href="#定位页面主题并添加样式" class="headerlink" title="定位页面主题并添加样式"></a>定位页面主题并添加样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00539F</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">1px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>text-shadow: 3px 3px 1px black; 中，分别表示阴影的右移像素数、下移像素数、模糊半径、基色</p>
<h4 id="图像居中"><a href="#图像居中" class="headerlink" title="图像居中"></a>图像居中</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt;body&gt; 元素是块级元素，意味着它占据页面的空间，并且能够赋予间距值；而图片是内联的，必须使用 display:block 给予块级行为，才能使图像有外边距</p>
<h2 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>let 和 var 关键字声明变量。注意， let 关键词只可以声明一次同名变量； var 关键字遇到第二次声明时，会执行赋值行为</p>
<p>变量有以下几种数据类型:</p>
<ul>
<li>String – 值需要用单引号或双引号括起来，let v&#x3D;’李雷’;</li>
<li>Number – let v&#x3D;10;</li>
<li>Boolean – true&#x2F;false</li>
<li>Array – let v&#x3D;[1, ‘李雷’, 30]; 引用方法为 v[0], v[1], …</li>
<li>Object – JavaScript一切皆对象，包括上面几个类型</li>
</ul>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>JavaScript 允许单行注释和多行注释:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里的所有内容</span></span><br><span class="line"><span class="comment">都是注释。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> v=<span class="string">&#x27;李雷&#x27;</span>;</span><br><span class="line"><span class="comment">// 这是一条注释</span></span><br></pre></td></tr></table></figure>
<p>注意，CSS与JS一样使用相同的多行注释，但CSS没有单行注释</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li>+</li>
<li>-,*,/</li>
<li>=  </li>
<li>===  测试两个值是否相等，返回布尔值</li>
<li>!=&#x3D;   测时两个值是否不相等，返回布尔值</li>
<li>!    逻辑非</li>
</ul>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fav = <span class="string">&#x27;chocolate&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (fav === <span class="string">&#x27;chocolate&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我最喜欢巧克力&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;我的最爱不是巧克力&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = num1 * num2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">multiply</span>(<span class="number">4</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件能为网页添加交互能力；最简单的事件是点击事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匿名函数的行为绑定(赋值)到 html 的 onclick 属性</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;html&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;别戳我，我怕疼。&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">等价于下面的代码，但前者更简洁</span></span><br><span class="line"><span class="comment">let myHTML = document.querySelector(&#x27;html&#x27;);</span></span><br><span class="line"><span class="comment">myHTML.onclick = function() &#123; alert(&#x27;别戳我，我怕疼。&#x27;);&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">箭头函数写法，与上面等价</span></span><br><span class="line"><span class="comment">document.querySelector(&#x27;html&#x27;).addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span></span><br><span class="line"><span class="comment">  alert(&#x27;别戳我，我怕疼。&#x27;);</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基础语法</title>
    <url>/2022/08/15/%E5%AD%A6%E4%B9%A0/Markdown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录Markdown基本语法</p>
<ul>
<li>2022-07-13 <ul>
<li>重新整理了一些不标准和不合适的markdown语法</li>
<li>试图更新table样式，发现table样式似乎写死，指定样式无用。</li>
</ul>
</li>
</ul>
<span id="more"></span>






<h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><h1 id="Heading-level-1"><a href="#Heading-level-1" class="headerlink" title="Heading level 1"></a>Heading level 1</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Heading level 1//一级标题，注意井号后面有个空格</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">Heading level 1</span></span><br><span class="line"><span class="section">========</span></span><br></pre></td></tr></table></figure>

<h2 id="Heading-level-2"><a href="#Heading-level-2" class="headerlink" title="Heading level 2"></a>Heading level 2</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## Heading level 2//二级标题</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">Heading level 2</span></span><br><span class="line"><span class="section">---------</span></span><br></pre></td></tr></table></figure>

<h3 id="Heading-level-3"><a href="#Heading-level-3" class="headerlink" title="Heading level 3"></a>Heading level 3</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### Heading level 3//三级标题，增加井号数量可继续增加子标题等级</span></span><br></pre></td></tr></table></figure>
<h1 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h1><p>今天天气不错，<br>午饭吃了吗</p>
<p>还没有吃</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">今天天气不错，</span><br><span class="line">午饭吃了吗</span><br><span class="line"></span><br><span class="line">还没有吃</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">段落，用空白行隔开段落，段落前不要用空格或制表符缩进段落</span><br></pre></td></tr></table></figure>
<h1 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h1><p>这是第一行<br><br>这是第二行<br><br>这是第三行</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是第一行<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">这是第二行<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">这是第三行</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">也在行尾使用两个空格作为换行符</span><br></pre></td></tr></table></figure>
<h1 id="强调单词或句子"><a href="#强调单词或句子" class="headerlink" title="强调单词或句子"></a>强调单词或句子</h1><p>今天<strong>天气</strong>真不错啊<br><br>今天<em>天气</em>真不错啊<br><br>今天<em><strong>天气</strong></em>真不错啊<br><br>今天~~ 天气 ~~真不错啊</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">粗体：   </span><br><span class="line"><span class="code">    今天**天气**真不错啊</span></span><br><span class="line"><span class="code">斜体：</span></span><br><span class="line"><span class="code">    今天*天气*真不错啊</span></span><br><span class="line"><span class="code">斜粗体：</span></span><br><span class="line"><span class="code">    今天***天气***真不错啊</span></span><br><span class="line"><span class="code">删去线：</span></span><br><span class="line"><span class="code">    今天~~ 天气 ~~真不错啊</span></span><br></pre></td></tr></table></figure>


<h1 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h1><blockquote>
<p>第一段落：撅草棍儿抽长短</p>
<p>第二段落：谁长谁先干</p>
<blockquote>
<p>这里是子嵌套的</p>
</blockquote>
</blockquote>
<blockquote><p>今天天气不错</p>
</blockquote>


<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;第一段落：撅草棍儿抽长短</span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;第二段落：谁长谁先干</span></span><br><span class="line">&gt;&gt;这里是子嵌套的</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">多个段落的块引用间，空行也要加&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">今天天气不错</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项<ol>
<li>子项</li>
<li>子项</li>
</ol>
</li>
<li>第四项<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项 //注意点后有空格</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br><span class="line"><span class="bullet">    1.</span> 子项</span><br><span class="line"><span class="bullet">    2.</span> 子项</span><br><span class="line"><span class="bullet">4.</span> 第四项</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul>
<li><p>第一项</p>
<blockquote>
<p>今天天气不错</p>
</blockquote>
</li>
<li><p>第二项</p>
<ul>
<li>子项</li>
<li>子项</li>
<li>子项</li>
</ul>
</li>
<li><p>第三项</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt;今天天气不错 //列表中可嵌套其他元素</span></span><br><span class="line"><span class="code">- 第二项</span></span><br><span class="line"><span class="code">    - 子项</span></span><br><span class="line"><span class="code">    - 子项</span></span><br><span class="line"><span class="code">    - 子项</span></span><br><span class="line"><span class="code">- 第三项</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1><p>代码语法的作用是让代码在下面这样的框里显示</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">int a=10;</span><br><span class="line">print(&quot;%d&quot;,a);</span><br><span class="line">//代码结束</span><br></pre></td></tr></table></figure>


<hr>
<p>编辑代码内容</p>
<pre><code><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">int a=10;</span><br><span class="line">print(&quot;%d&quot;,a);</span><br><span class="line">//代码结束   </span><br></pre></td></tr></table></figure>
</code></pre>
<p>或者<br></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock  %&#125;</span><br><span class="line">int a=10;</span><br><span class="line">print(&quot;%d&quot;,a);</span><br><span class="line">//代码结束</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>第一行</p>
<hr>
<p>第二行</p>
<hr>
<p>第三行</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">第一行</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">第二行</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">___</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">第三行</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">独立成行的三个连续的<span class="emphasis">*，或三个连续的下划线可作分隔线</span></span><br></pre></td></tr></table></figure>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="加title的链接"><a href="#加title的链接" class="headerlink" title="加title的链接"></a>加title的链接</h2><p>这是一个链接 <a href="www.baidu.com">百度</a><br><br>这是一个链接 <a href="www.baidu.com" title="百度搜素">百度</a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是一个链接 [<span class="string">百度</span>](<span class="link">www.baidu.com</span>)<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">这是一个链接 [<span class="string">百度</span>](<span class="link">www.baidu.com &quot;百度搜素&quot;</span>)//鼠标放到链接上有“百度搜索”提示</span><br></pre></td></tr></table></figure>
<h2 id="网址和邮箱地址"><a href="#网址和邮箱地址" class="headerlink" title="网址和邮箱地址"></a>网址和邮箱地址</h2><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:&#x66;&#97;&#107;&#101;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#109;">&#x66;&#97;&#107;&#101;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#109;</a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://markdown.com.cn&gt;</span></span><br><span class="line"><span class="language-xml">&lt;fake@example.com&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h2><p>今天天气不错，查看 <em><strong><a href="http://www.weather.com.cn/">中国天气</a></strong></em><br><br>查看<a href="#code"><code>code</code></a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">今天天气不错，查看 <span class="strong">**<span class="emphasis">*[<span class="string">中国天气</span>](<span class="link">http://www.weather.com.cn/</span>)*</span>**</span></span><br><span class="line">查看[<span class="string">`code`</span>](<span class="link">#code</span>)</span><br></pre></td></tr></table></figure>


<h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><p><img src="/../../themes/next_a/source/images/avatars/aoba.jpg" alt="图片1" title="aoba"><br></p>
<p><img src="/assets/images/aoba.jpg" alt="青叶" title="aoba"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">../../themes/next_a/source/images/avatars/aoba.jpg &quot;aoba&quot;</span>)<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>  //以该post的地址作为起始地址，这样的链接是错误的</span><br><span class="line"></span><br><span class="line">![<span class="string">青叶</span>](<span class="link">/assets/images/aoba.jpg &quot;aoba&quot;</span>)  //运行时相对地址的起始为博客的根目录文件夹，这样的链接是正确的</span><br></pre></td></tr></table></figure>

<h2 id="给图片添加链接"><a href="#给图片添加链接" class="headerlink" title="给图片添加链接"></a>给图片添加链接</h2><p><a href="http://newgame-anime.com/assets/character/c4.png" title="hifumi"><img src="/assets/images/hifumi.jpg" alt="日富美" title="hifumi"></a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">![日富美</span>](<span class="link">/assets/images/hifumi.jpg &quot;hifumi&quot;</span>)](<span class="link">http://newgame-anime.com/assets/character/c4.png &quot;hifumi&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><h2 id="可做转义的字符"><a href="#可做转义的字符" class="headerlink" title="可做转义的字符"></a>可做转义的字符</h2><p>以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>反斜线</td>
</tr>
<tr>
<td>&#96;</td>
<td>反引号</td>
</tr>
<tr>
<td>_</td>
<td>下划线</td>
</tr>
<tr>
<td>{}</td>
<td>花括号</td>
</tr>
<tr>
<td>[]</td>
<td>方括号</td>
</tr>
<tr>
<td>()</td>
<td>圆括号</td>
</tr>
<tr>
<td>#</td>
<td>井号</td>
</tr>
<tr>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>-</td>
<td>减号，连字符</td>
</tr>
<tr>
<td>.</td>
<td>圆点</td>
</tr>
<tr>
<td>!</td>
<td>感叹号</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h2><p>如果你使用 &amp; 符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成 &amp;amp;。</p>
<h1 id="内嵌HTML标签"><a href="#内嵌HTML标签" class="headerlink" title="内嵌HTML标签"></a>内嵌HTML标签</h1><h2 id="lt-ruby-gt"><a href="#lt-ruby-gt" class="headerlink" title="&lt;ruby&gt;"></a>&lt;ruby&gt;</h2><p><ruby>拼音<rt>pinyin</rt></ruby></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span>拼音<span class="language-xml"><span class="tag">&lt;<span class="name">rt</span>&gt;</span></span>pinyin<span class="language-xml"><span class="tag">&lt;/<span class="name">rt</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span></span><br></pre></td></tr></table></figure>





<h2 id="lt-detail-gt"><a href="#lt-detail-gt" class="headerlink" title="&lt;detail&gt;"></a>&lt;detail&gt;</h2><details class="note primary no-icon" open="">
<summary><p><strong>总描述</strong></p>
</summary>

<table>
<thead>
<tr>
<th align="left">栏目1</th>
<th align="center">栏目2</th>
<th align="left">栏目 3</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\</td>
<td align="center">反斜线</td>
<td align="left">\</td>
</tr>
<tr>
<td align="left">&#96;</td>
<td align="center">反引号</td>
<td align="left">&#96;</td>
</tr>
<tr>
<td align="left">_</td>
<td align="center">下划线</td>
<td align="left">_</td>
</tr>
</tbody></table>
</details>


<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">details</span> <span class="attr">class</span>=<span class="string">&quot;note primary no-icon&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span>总描述<span class="language-xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">| 栏目1 | 栏目2 | 栏目 3|</span><br><span class="line">| :--- | :----: |:---|  //对齐方式</span><br><span class="line">| \  | 反斜线 | \ |</span><br><span class="line">| <span class="code">`  | 反引号 | `</span> |</span><br><span class="line">| <span class="emphasis">_  | 下划线 | _</span> |</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<details class="note primary no-icon" open="">
<summary><p><strong>总体介绍</strong></p></summary>
<table>
<caption style="text-align: left;">表格标题</caption>
<thead>
<tr class="header">
<th style="text-align: center;">栏目1</th>
<th style="text-align: center;">栏目2</th>
<th style="text-align: center;">栏目3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">a</td>
<td style="text-align: center;">aa</td>
<td style="text-align: center;">aaa</td>
</tr>
<tr class="even">
<td style="text-align: center;">b</td>
<td style="text-align: center;">bb</td>
<td style="text-align: center;">bbb</td>
</tr>
<tr class="odd">
<td style="text-align: center;">b</td>
<td style="text-align: center;">bb</td>
<td style="text-align: center;">bbb</td>
</tr>
</tbody>
</table>
</details>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">class</span>=<span class="string">&quot;note primary no-icon&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>总体介绍<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span> <span class="comment">&lt;!--hexo这里css文件似乎有问题，无法指定格式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span> <span class="attr">style</span>=<span class="string">&quot;text-align: left;&quot;</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>栏目1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>栏目2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>栏目3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;odd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;even&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;odd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>可扩展标记语言XML学习记录</title>
    <url>/2022/08/01/%E5%AD%A6%E4%B9%A0/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80XML%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li>2022-08-02 完成了“XML基础”的更新<span id="more"></span></li>
</ul>
<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>EXtensible Markup Language，XML被设计用来传输和存储数据，HTML被设计用来显示数据。</p>
<h2 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h2><h3 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h3><ul>
<li>XML文本内容是以标签描述的数据信息</li>
<li>XML标签不是预先定义的，以纯文本格式进行存储，独立于软件和硬件，便于在不兼容的系统之间交换数据（这依赖于针对具体XML格式编写的程序）</li>
<li>通过XML可以把数据从HTML中分离（这需要使用JS来读取XML文档）</li>
<li>XML用于创建新的Internet语言：<ul>
<li>WSDL - 用于描述可用的 web service </li>
<li>RSS - 用于 RSS feed 的语言</li>
</ul>
</li>
</ul>
<h3 id="XML树结构"><a href="#XML树结构" class="headerlink" title="XML树结构"></a>XML树结构</h3><p>XML以数结构组织数据内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><span class="comment">&lt;!-- XML声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span> <span class="comment">&lt;!-- 根元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span> <span class="comment">&lt;!-- 一级子元素，指定&quot;category&quot;自定义？属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span>     <span class="comment">&lt;!-- 二级子元素，指定&quot;lang&quot;自定义？属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span>  <span class="comment">&lt;!-- 二级子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> <span class="comment">&lt;!-- 二级子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span>  <span class="comment">&lt;!-- 二级子元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;CHILDREN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="XML基本语法"><a href="#XML基本语法" class="headerlink" title="XML基本语法"></a>XML基本语法</h3><ul>
<li>所有XML元素必须有关闭标签；声明部分不属于XML本身，不需要关闭标签</li>
<li>标签对大小写敏感</li>
<li>必须要有根元素</li>
<li>属性值必须加引号，如<note id="07">xxx</note></li>
<li>部分特殊符号需要使用实体引用来替代<table>
<thead>
<tr>
<th>实体引用</th>
<th>特殊符号</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;lt;</td>
<td>&lt;</td>
</tr>
<tr>
<td>&amp;gt;</td>
<td>&gt;</td>
</tr>
<tr>
<td>&amp;amp;</td>
<td>&amp;</td>
</tr>
<tr>
<td>&amp;apos;</td>
<td>&#39;</td>
</tr>
<tr>
<td>&amp;quot;</td>
<td>&quot;</td>
</tr>
</tbody></table>
  在XML中，直接使用 &lt; 和 &amp; 确实是非法的，直接使用 &gt; 是合法的，但使用实体引用代替是个好习惯 </li>
<li>注释语法  &lt;!– xxx –&gt;</li>
<li>XML中多个空格会被保留，HTML则会把连续多个空格合并为一个</li>
<li>XML以LF(换行符)表示新行</li>
</ul>
<h3 id="XML元素和XML属性"><a href="#XML元素和XML属性" class="headerlink" title="XML元素和XML属性"></a>XML元素和XML属性</h3><ul>
<li>元素命名避免 -  .  :  等字符，支持下划线</li>
<li>元素可扩展，扩展元素后的XML文档能够适应旧XML文档</li>
<li>在XML中，除了 id&#x3D;’07’ 此类源数据应当存储为属性，其余数据应避免成为属性</li>
<li>可以拆分的元素应拆分成子元素，如以下代码：  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">day</span>&gt;</span>02<span class="tag">&lt;/<span class="name">day</span>&gt;</span>       <span class="comment">&lt;!-- date=&#x27;2022/08/02&#x27;拆分为年月日三个子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">month</span>&gt;</span>08<span class="tag">&lt;/<span class="name">month</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2022<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>属性值必须加引号，单引号双引号均可；如果属性值本身包含双引号，那么必须用单引号包围它（或使用实体引用）</li>
</ul>
<h3 id="XML验证"><a href="#XML验证" class="headerlink" title="XML验证"></a>XML验证</h3><p>W3C 的 XML 规范声明：如果 XML 文档存在错误，那么程序就不应当继续处理这个文档。理由是，XML 软件应当轻巧，快速，具有良好的兼容性。<br>如果浏览器打开了某个有错误的 XML 文件，那么它会报告错误</p>
<p>XML文档可以声明用来遵守文档类型定义（DTD，Document Type Definition）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;Note.dtd&quot;</span>&gt;</span> <span class="comment">&lt;!-- DOCTYPE声明是对外部DTD文件的引用,其中note.dtd是自定义的DTD文件 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>此外，W3C 支持一种基于 XML 的 DTD 代替者，它名为 XML Schema：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3school.com.cn&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.w3school.com.cn note.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  对XML Schema 的引用，其中note.xsd是自定义的XML Schema文件 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="XML-JavaScript"><a href="#XML-JavaScript" class="headerlink" title="XML JavaScript"></a>XML JavaScript</h2><h3 id="XML-Http-Request"><a href="#XML-Http-Request" class="headerlink" title="XML Http Request"></a>XML Http Request</h3><p>XMLHttpRequest对象用于在后台与服务器交换数据，它能够:</p>
<ul>
<li>在不重新加载页面的情况下更新网页</li>
<li>在页面已加载后从服务器请求数据</li>
<li>在页面已加载后从服务器接收数据</li>
<li>在后台向服务器发送数据</li>
</ul>
<h2 id="XML-进阶内容"><a href="#XML-进阶内容" class="headerlink" title="XML 进阶内容"></a>XML 进阶内容</h2><h1 id="SOAP——基于XML的建议协议"><a href="#SOAP——基于XML的建议协议" class="headerlink" title="SOAP——基于XML的建议协议"></a>SOAP——基于XML的建议协议</h1><p>SOAP 是基于 XML 的简易协议，可使应用程序在 HTTP 之上进行信息交换<br><strong>什么是 SOAP？</strong></p>
<ul>
<li>SOAP 指简易对象访问协议</li>
<li>SOAP 是一种通信协议</li>
<li>SOAP 用于应用程序之间的通信</li>
<li>SOAP 是一种用于发送消息的格式</li>
<li>SOAP 被设计用来通过因特网进行通信</li>
<li>SOAP 独立于平台</li>
<li>SOAP 独立于语言</li>
<li>SOAP 基于 XML</li>
<li>SOAP 很简单并可扩展</li>
<li>SOAP 允许您绕过防火墙</li>
<li>SOAP 将被作为 W3C 标准来发展</li>
</ul>
<h3 id="SOAP语法"><a href="#SOAP语法" class="headerlink" title="SOAP语法"></a>SOAP语法</h3><p>一条SOAP消息就是一个普通的XML文档，包含以下元素:</p>
<ul>
<li>必要的 Envelope 元素，可把此 XML 文档标识为一条 SOAP 消息</li>
<li>可选的 Header 元素，包含头部信息</li>
<li>必要的的 Body 元素，包含所有的调用和响应信息</li>
<li>可选的 Fault 元素，提供有关在处理此消息所发生错误的信息</li>
<li>不能包含 DTD 引用</li>
<li>不能包含 XML 处理指令</li>
</ul>
<p>所有以上的元素均被声明于针对 SOAP 封装的默认命名空间中：<a href="http://www.w3.org/2001/12/soap-envelope">http://www.w3.org/2001/12/soap-envelope</a><br>以及针对 SOAP 编码和数据类型的默认命名空间：<a href="http://www.w3.org/2001/12/soap-encoding">http://www.w3.org/2001/12/soap-encoding</a></p>
<p>SOAP消息基本结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:soap</span>=<span class="string">&quot;http://www.w3.org/2001/12/soap-envelope&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">soap:encodingStyle</span>=<span class="string">&quot;http://www.w3.org/2001/12/soap-encoding&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Header</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">soap:Fault</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap:Fault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SOAP-Envelope-元素"><a href="#SOAP-Envelope-元素" class="headerlink" title="SOAP Envelope 元素"></a>SOAP Envelope 元素</h3><p>添加命名空间  xmlns:soap&#x3D;”<a href="http://www.w3.org/2001/12/soap-envelope&quot;">http://www.w3.org/2001/12/soap-envelope&quot;</a><br>添加编码方式属性  soap:encodingStyle&#x3D;”<a href="http://www.w3.org/2001/12/soap-encoding&quot;&gt;">http://www.w3.org/2001/12/soap-encoding&quot;&gt;</a></p>
<h3 id="SOAP-Header-元素"><a href="#SOAP-Header-元素" class="headerlink" title="SOAP Header 元素"></a>SOAP Header 元素</h3><p>如果 Header 元素被提供，则它必须是 Envelope 元素的第一个子元素。它可包含有关 SOAP 消息的应用程序专用信息（比如认证、支付等）</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>《自控力》阅读</title>
    <url>/2022/08/01/%E9%98%85%E8%AF%BB/%E3%80%8A%E8%87%AA%E6%8E%A7%E5%8A%9B%E3%80%8B%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<ul>
<li>2022-08-03 记录第一章到第三章的阅读体会</li>
</ul>
<span id="more"></span>

<h2 id="“我要做”、“我不要做”、“我想要”是意志力的三种力量。"><a href="#“我要做”、“我不要做”、“我想要”是意志力的三种力量。" class="headerlink" title="“我要做”、“我不要做”、“我想要”是意志力的三种力量。"></a>“我要做”、“我不要做”、“我想要”是意志力的三种力量。</h2><p>这三种力量在生理上有迹可循，由大脑前额灰质的三个区域掌控。</p>
<p>大脑保存了原始生存本能，比如，在原始社会，爱吃甜食和暴饮暴食可能是因为多储存脂肪能更容易生存下去，爱偷懒睡觉可能是为了节省能量，以备不测。这些原始生存本能显然已经不能适应现代社会了。</p>
<p>自控的过程，一定程度上是意志力三种力量和不适应现代社会的原始生存本能之间的对抗，是理性的自我和冲动的自我的对抗。冲动的自我希望你放弃思考，遵循本能行动：比如看到美味的蛋糕，大脑会释放多巴胺，通过某些化学反应降低血糖，从而让身体强烈的希望你摄入糖分。此时并不是真正地缺少能量。<br>理性的自我则会让你思考，你“要做什么”、“不要做什么”、“想要做什么”。</p>
<h3 id="意志力挑战的第一法则是：认识自己"><a href="#意志力挑战的第一法则是：认识自己" class="headerlink" title="意志力挑战的第一法则是：认识自己"></a>意志力挑战的第一法则是：认识自己</h3><p>意识到、认识到自己当前正在做选择，让理性的自我参与“选择”，避免让冲动本能直接决定结果。<br>这部分难点在于，注意力很容易被分散，比如商场的大喇叭和吵闹音乐就是让你分散注意力，让你难以集中注意力思考；看到美味蛋糕，身体通过一系列生理反应降低血糖，也让你难以集中注意力思考。它们让你在做决定时没有意识到，自己正在做出抉择。</p>
<h3 id="“认识自己”的方法："><a href="#“认识自己”的方法：" class="headerlink" title="“认识自己”的方法："></a>“认识自己”的方法：</h3><p>可以做出标记提醒自己要做出抉择，可以在冰箱上贴上标签，明确告知自己此处将会发生意志力挑战。<br>人的大脑会一定程度上适应训练，训练大脑增强专注力是可行的。书中提供的方法是每天冥想5分钟。</p>
<h2 id="面对“诱惑”需要”三思而后行”"><a href="#面对“诱惑”需要”三思而后行”" class="headerlink" title="面对“诱惑”需要”三思而后行”"></a>面对“诱惑”需要”三思而后行”</h2><p>书中举了两种“威胁”，一个是剑齿虎，一个是草莓奶酪蛋糕。剑齿虎是直接威胁，身体直接感知并认定为威胁，这与你的理性认知一致；草莓奶酪蛋糕是间接威胁，你的理性认知中会把它当作间接威胁，但是你的身体却会把它当作“多多益善”的资源。</p>
<p>看到剑齿虎会让人产生应激反应，阻止你的前额皮质发挥作用，呼吸加粗血流加大，能量会进入血液，集中所有能量用于身体力量的管理；哪怕一瞬间做出的决定不是最佳策略，大脑也没有多余的能量让你重新思考。举个例子：</p>
<p>学校里有人在转角处扔出来一只玩具大老虎，尽管我知道这是在学校里，周围也有很多同学，但这些疑问仅仅是一闪而过，我大脑一瞬间的想法是“别管了，盯住这只老虎”，然后身体处于备战状态，死死盯住这只玩具老虎。</p>
<p>看到草莓奶酪蛋糕，则大脑会释放多巴胺，通过复杂化学反降低血糖，那么身体就会强烈希望你去摄取糖分，吃下这个蛋糕。此时你能够面对的敌人是内心。面对草莓奶酪蛋糕，我们需要“三思而后行”，“心率变异度”则是衡量能否有效进行思考的生理学测量指标。疼痛、压力、焦虑、垃圾食品、糟糕的空气都会影响心率变异度。</p>
<h3 id="提高“心率变异度”的方法："><a href="#提高“心率变异度”的方法：" class="headerlink" title="提高“心率变异度”的方法："></a>提高“心率变异度”的方法：</h3><p>除了主动集中注意力，尝试思考意外，我们还需要外力来帮助降低心率变异度（较低的有助于自控）。改善心情、健康良好的饮食、放松身心都可以降低心率变异度；此外充足的睡眠能够也能有所帮助，因为睡眠不足会影响葡萄糖吸收，降低你的血糖。</p>
<h2 id="自控力和肌肉一样有极限"><a href="#自控力和肌肉一样有极限" class="headerlink" title="自控力和肌肉一样有极限"></a>自控力和肌肉一样有极限</h2><p>意志力有“肌肉一样的模式”:<br>    - 长时间的使用会无力<br>    - 睡一觉或睡几觉会恢复<br>    - 有节制地使用和锻炼会增强力量<br>    - 拥有潜能，可以在某些条件下激发，如“加油”<br>    - 避免“意志力肌肉拉伤”</p>
<p>这四点特性要求我们有方向地锻炼意志力，除了锻炼自己地意志力意外，还要合理利用当前的意志力。</p>
<p><strong>长时间使用会无力，它的对策是合理分配意志力能量。</strong>要先做消耗“力量”的，再做消耗“耐力”的。比如，做完引体向上后能有余力再跑一千五百米，但是跑完一千五百米后却没有余力再做引体向上（适用于体能一般的人，比我如）。在意志力仍有余力地时候，人总是会不自觉地加大投入以完善当前任务，哪怕它可能不需要太多意志力地投入。此外琐事也可能大量消耗你的意志力，不要在它们上面重复消耗你的意志力，有序地处理可以避免因琐事“失控”（有时不得不立刻处理它们，此时希望你尽量保持内心平静吧）。</p>
<p><strong>休息后意志力会恢复，以及锻炼会增强意志力，这两点特性告诉我们，勤于锻炼意志力（尽管锻炼过程中会消耗意志力）而不必过度担忧意志力的丧失。</strong>当然，锻炼意志力需要你合理分配意志力能量，当留有你需要集中精力去处理的事务的时候，应该避免任何意志力的消耗。锻炼意志力需要你在“不会失控”的环境中进行，平时做些“微小的自控力锻炼”也是很有效的方法，它们对自控力的消耗微乎其微但却能有效锻炼，比如每天起床时用左手打开房门，不说特定语句的脏话（当然全都不说最好，但这或许有些难度），这些事情消耗的仅仅是当下一瞬间的意志力，因为你从意识到到抉择完毕只需要一瞬间，甚至习惯后后不需要消耗意志力，又培养了一个好习惯。</p>
<p>接下来会探讨意志力有类似肌肉模式的原因，了解原因后，你会对激发意志力潜能和避免“意志力肌肉拉伤”有更加深入的了解。</p>
<p>回想一下你沉下心，专注学习的过程，起初你全神贯注，对书中任何一个问题都进行仔细地分析；学习一段时间后（也许时半小时，也许是两个小时），你会发现脑袋有些难受，你告诉自己专注专注，可是看了一会书，不自觉的又发起呆来。此时你应该很想吃些甜食，或者打会游戏放松一下，但理智的你告诉自己，一旦松懈下来，今天就再也无法再静下心看书了。这本书的作者的所了解的研究表明，大脑专注学习时消耗的能量远不如运动时消耗的能量，但是为什么你的大脑会出现“能量短缺”？</p>
<p>因为大脑在自作主张地帮你管理能量，它是个小气鬼，一旦发现能量有流失的趋势，就开始削减预算。就像银行一样，资金充裕就会始放贷（考虑长远利益），尽管有时候利率比较低，但它也想着不能浪费每一分每一秒，迫不及待地开始放贷。因此在“资金充裕”的时候，尽管大脑会谋划长期利益，也需要你考虑一下，到底给谁放贷收益更高，贷多少资金比较合适。银行在资金紧缩时，哪怕利益再高也不会放贷，因为一旦储备掏空就会面临破产，比起长远利益，保住当下更为重要。银行的这种行为符合“原始生存本能”，但是到了现代社会，银行所谓的“资金紧缩”并不是真正地紧缩，因为我们总是会按时吃饭来补充“能量资金”。所以我们要想办法让大脑多掏出一些“意志力储备资金”，有时候也需要适当补充“意志力”资金，给大脑一个资金充裕的印象，诱使大脑放贷（但这不是随意饮食的理由，暴饮暴食反而会冲垮你的意志力）。</p>
<p>书中给出的“适当补充意志力资金”的方法是，低血糖饮食。低血糖饮食给了大脑，这是不多但是长期的“能量”投资，这种方法或许会让大脑掏出更多比率的“意志力储备金”。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>python基本语法记录</title>
    <url>/2022/07/18/%E5%AD%A6%E4%B9%A0/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li>2022-08-23 完成官方文档上，教程部分的初步记录</li>
</ul>
<span id="more"></span>


<h1 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h1><p>python源文件的开头建议指出调用解释器，声明默认编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br></pre></td></tr></table></figure>
<h1 id="Python数字、字符、列表速览"><a href="#Python数字、字符、列表速览" class="headerlink" title="Python数字、字符、列表速览"></a>Python数字、字符、列表速览</h1><h2 id="数字用于计算"><a href="#数字用于计算" class="headerlink" title="数字用于计算"></a>数字用于计算</h2><ol>
<li>运算符+、-、*、/(除法，返回浮点数)、//（除法，向下取整）、%、**(乘方)、&#x3D;  </li>
<li>混合运算中整数会自动转为float</li>
</ol>
<h2 id="字符串–immutable"><a href="#字符串–immutable" class="headerlink" title="字符串–immutable"></a>字符串–immutable</h2><ol>
<li>单引号与双引号标注结果相同，一般在单引号里使用双引号无需转义，反之亦然  </li>
<li>原始字符串标记r,在单引号或双引号面前添加r即可   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r&#x27;C:\some\name&#x27;</span>)</span><br><span class="line">C:\some\name</span><br></pre></td></tr></table></figure></li>
<li>字符串与字符串，字符串与变量可以使用 +  *  运算符拼合 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>prefix = <span class="string">&#x27;Py_&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>prefix + <span class="number">3</span> * <span class="string">&#x27;un&#x27;</span> + <span class="string">&#x27;ium&#x27;</span></span><br><span class="line"><span class="string">&#x27;Py_unununium&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>字符串也可以使用空符分隔来合并，这一功能在拆分长字符串换行显示是特别有用；但不能用于变量和字符串的合并 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = (<span class="string">&#x27;Put several strings within parentheses &#x27;</span></span><br><span class="line"><span class="meta">... </span>        <span class="string">&#x27;to have them joined together.&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">&#x27;Put several strings within parentheses to have them joined together.&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>字符串支持索引，索引从0开始，支持负数索引，负数索引中0和-0一样</li>
<li>字符串支持切片，形如 word[start:end]，若省略start的默认0，省略end则默认len(word);切片越界会自动处理，但索引会报错</li>
</ol>
<h2 id="列表–sequence，mutable"><a href="#列表–sequence，mutable" class="headerlink" title="列表–sequence，mutable"></a>列表–sequence，mutable</h2><ol>
<li>方括号分隔，元素之间使用逗号隔开，列表内元素可以不同类型，元素可以是列表</li>
<li>支持索引和切片，列表是mutable类型，可以通过索引和切片改变内容</li>
<li>支持使用 + 合并列表，支持list.append(e)添加元素，支持使用切片赋值、扩展、缩小、情况列表 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>] <span class="comment">#使用切片扩展列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[:<span class="number">0</span>]=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="基本编程语句"><a href="#基本编程语句" class="headerlink" title="基本编程语句"></a>基本编程语句</h2><ol>
<li>条件值判断标准：Python 和 C 一样，任何非零整数都为真，零为假。这个条件也可以是字符串或列表的值，事实上，任何序列都可以；长度非零就为真，空序列则为假。</li>
<li>print()函数输出给定参数的值，能实现格式化操作 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">256</span>*<span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;The value of i is&#x27;</span>, i)   <span class="comment"># 指定参数i</span></span><br><span class="line">The value of i <span class="keyword">is</span> <span class="number">65536</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a, end=<span class="string">&#x27;,&#x27;</span>)   <span class="comment"># end替换默认换行符</span></span><br><span class="line">a,</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="其他流程控制工具"><a href="#其他流程控制工具" class="headerlink" title="其他流程控制工具"></a>其他流程控制工具</h1><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line">Please enter an integer: <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;负数&#x27;</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">elif</span> :</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;非负&#x27;</span>)</span><br><span class="line">如果要把一个值与多个常量进行比较，或者检查特定类型或属性，match 语句更实用。</span><br></pre></td></tr></table></figure>

<h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = &#123;<span class="string">&#x27;Hans&#x27;</span>: <span class="string">&#x27;active&#x27;</span>, <span class="string">&#x27;Éléonore&#x27;</span>: <span class="string">&#x27;inactive&#x27;</span>, <span class="string">&#x27;景太郎&#x27;</span>: <span class="string">&#x27;active&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#若存在修改集合的操作，迭代时应该使用集合的副本进行遍历</span></span><br><span class="line"><span class="keyword">for</span> user, status <span class="keyword">in</span> users.copy().items():   </span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">&#x27;inactive&#x27;</span>:</span><br><span class="line">        <span class="keyword">del</span> users[user]</span><br></pre></td></tr></table></figure>

<h2 id="range-函数-–-range可以生成list序列，但迭代时返回可迭代对象"><a href="#range-函数-–-range可以生成list序列，但迭代时返回可迭代对象" class="headerlink" title="range() 函数 – range可以生成list序列，但迭代时返回可迭代对象"></a>range() 函数 – range可以生成list序列，但迭代时返回可迭代对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>range可以不从0开始，可以指定步长，以下几种都是range()函数的正确用法:</p>
<ul>
<li>range(10)             # 等价于range(0,10)</li>
<li>range(4,len(list))    # 可以与len结合，但一般enumerate() 函数更便捷</li>
<li>range(1,10,3)  </li>
<li>range(-10,-100,-30)</li>
<li>sum(range(4))         # 0+1+2+3</li>
</ul>
<p>range() 返回对象的操作和列表很像，但其实这两种对象不是一回事。<strong>迭代时</strong>，该对象基于所需序列返回可迭代对象 iterable，函数或程序结构可通过该对象获取连续项，直到所有元素全部迭代完毕。<br>for 语句就是这样的架构，sum() 是一种把可迭代对象作为参数的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">4</span>))  <span class="comment"># 0 + 1 + 2 + 3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="循环中break、continue、else子句"><a href="#循环中break、continue、else子句" class="headerlink" title="循环中break、continue、else子句"></a>循环中break、continue、else子句</h2><p>break、continue借鉴自C，break用于终止本层循环，continue用于跳过本层循环当前迭代。<br>在python中，else除了可以用于if-else，可也用于for-else，在未运行break时执行else子句。<br>（for-else也许没有实用价值）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">7</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(n, <span class="string">&#x27;=&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n//x)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(n, <span class="string">&#x27;is a prime number&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">2</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">3</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">4</span> = <span class="number">2</span> * <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">6</span> = <span class="number">2</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h2><p>pass 语句不执行任何操作。语法上需要一个语句，但程序不实际执行任何动作时，可以使用该语句。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建了最小的类</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">MyEmptyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">#用作函数或条件子句的占位符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initlog</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">pass</span>   </span><br></pre></td></tr></table></figure>

<h2 id="match语句"><a href="#match语句" class="headerlink" title="match语句"></a>match语句</h2><p>match语句的匹配，有字面值模式、变量模式、以及变量解包模式。</p>
<p>变量名 _ 被作为通配符比被匹配成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">case _:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>字面值模式中，一个匹配项可以使用 | 或者 or 来组合多个字面值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">case <span class="number">401</span> | <span class="number">403</span> | <span class="number">404</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;不允许访问&quot;</span></span><br></pre></td></tr></table></figure>

<p>变量解包模式，可以嵌套匹配，如匹配列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    x: <span class="built_in">int</span></span><br><span class="line">    y: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">where_is</span>(<span class="params">point</span>):</span><br><span class="line">    match point:</span><br><span class="line">        case Point(x=<span class="number">0</span>, y=<span class="number">0</span>):               <span class="comment">#Point解析，匹配x，y都为0</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;原点&quot;</span>)               </span><br><span class="line">        case Point(x=<span class="number">0</span>, y=y):               <span class="comment">#Point解析，匹配x==0，捕获并y</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Y=<span class="subst">&#123;y&#125;</span> 这个点在Y轴上&quot;</span>)</span><br><span class="line">        case Point(x=x, y=<span class="number">0</span>):               <span class="comment">#Point解析，捕获x，匹配y==0</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span> 这个点在X轴上&quot;</span>)</span><br><span class="line">        case Point():                       <span class="comment">#Point解析，匹配Point类型</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;这个点位于平面其他位置&quot;</span>)</span><br><span class="line">        case [Point(<span class="number">0</span>,y1),Point(<span class="number">0</span>,y2)]      <span class="comment">#Point列表解析，y1，y2被赋值</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;两点位于Y轴的<span class="subst">&#123;y1&#125;</span>,<span class="subst">&#123;y2&#125;</span>位置&quot;</span>)   </span><br><span class="line">        case _:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不是点类型&quot;</span>)</span><br><span class="line"></span><br><span class="line">location(Point(<span class="number">0</span>,<span class="number">3</span>))    <span class="comment">#输出 &quot;Y=3 这个点在Y轴上&quot;</span></span><br><span class="line">location([Point(<span class="number">0</span>,<span class="number">6</span>),Point(<span class="number">0</span>,<span class="number">7</span>)])    <span class="comment">#输出 &quot;两点位于Y轴的6，7位置&quot;</span></span><br></pre></td></tr></table></figure>

<p>添加守护项if，如果守护项为假，则match继续匹配下一个语句块。值的捕获发生在守护项被求值之前。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">match point:</span><br><span class="line">    case Point(x, y) <span class="keyword">if</span> x == y:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Y=X at <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">    case Point(x, y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;不在斜线上&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其他match特性：<br>    - 元组和列表模式的匹配，但不能匹配迭代器或字符串<br>    - 序列模式支持扩展解包操作<br>    - 映射模式<br>    - 使用as关键字<br>    - 模式使用命名常量enum类型</p>
<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>函数内的第一条语句是字符串时，该字符串就是文档字符串，也称为 docstring</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):  <span class="comment"># return Fibonacci series up to n</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">&quot;&quot;&quot;返回斐波那契数列（文档字符串）&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">... </span>    result = []</span><br><span class="line"><span class="meta">... </span>    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> a &lt; n:</span><br><span class="line"><span class="meta">... </span>        result.append(a)    <span class="comment"># see below</span></span><br><span class="line"><span class="meta">... </span>        a, b = b, a+b</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f100 = fib2(<span class="number">100</span>)    <span class="comment"># call it</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f100                <span class="comment"># write the result</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br></pre></td></tr></table></figure>

<p>定义符号作为函数名指向函数对象，解释器把函数名指向的对象作为用户自定义函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib</span><br><span class="line">&lt;function fib at 10042ed0&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">100</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span></span><br></pre></td></tr></table></figure>

<h1 id="函数定义详解"><a href="#函数定义详解" class="headerlink" title="函数定义详解"></a>函数定义详解</h1><h2 id="默认值参数、关键字参数、位置参数"><a href="#默认值参数、关键字参数、位置参数" class="headerlink" title="默认值参数、关键字参数、位置参数"></a>默认值参数、关键字参数、位置参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ask_ok</span>(<span class="params">prompt,retries=<span class="number">4</span>,reminder=<span class="string">&#x27;default_c&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ok = <span class="built_in">input</span>(prompt)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;ye&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>):    <span class="comment">#关键字 in 用于确认序列中是否包含某个值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;nop&#x27;</span>, <span class="string">&#x27;nope&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        retries = retries - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> retries &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;invalid user response&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(reminder)</span><br></pre></td></tr></table></figure>
<p>其中 retries 和 reminder 设置了默认值参数，调用 ask_ok 时可以按序省略参数，但不能跳过省略。  </p>
<p>函数的默认值参数是在，形如 def f(arg&#x3D;i) 中的，默认值只计算一次，轮到<strong>定义</strong>这个函数时就永远决定好的。<br>所以:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">arg=i</span>):    <span class="comment">#在这一步，arg的默认参数永远决定为是 5</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(arg)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><strong>重要警告</strong>默认值只计算一次。但是当默认值为列表、字典、或者类实例等可变对象时，会产生“不同结果”。例如下面默认值为列表，则每次调用都会积累传递参数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,L=[]</span>):       </span><br><span class="line"><span class="meta">... </span>    L.append(a)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> L</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f(<span class="number">1</span>))</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f(<span class="number">2</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f(<span class="number">3</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>基于默认值“只计算一次”的原理，可知L初始化为列表时，就被赋予了一个“列表制作（也许描述不够准确）”，因此列表调用append方法会积累后续调用参数。如果不想在后续调用之间共享默认值，应该在函数内部来初始化一个列表，这样列表区域的生存时间到函数结束为止。</p>
<h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>在调用含有默认值参数的函数时，可以指出参数名，包括非默认值参数。<br>一旦使用关键字参数形式调用函数，所有调用的默认值参数都必须指出参数名，也不能对同一个参数名多次赋值；如果非默认值参数不是前排位置，也必须要指出参数名。  </p>
<p>对于含有元组参数，字典参数的函数，调用参数中的元组元素和字典元素可以平铺出来:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cheeseshop</span>(<span class="params">kind, *arguments, **keywords</span>):   <span class="comment"># 第二个参数为元组，第三个参数为字典</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#元组参数和字典参数可以平铺出来调用</span></span><br><span class="line">cheeseshop(<span class="string">&quot;Limburger&quot;</span>, </span><br><span class="line">            <span class="string">&quot;It&#x27;s very runny, sir.&quot;</span>,            <span class="comment"># 元组arguments第1个元素</span></span><br><span class="line">           <span class="string">&quot;It&#x27;s really very, VERY runny, sir.&quot;</span>,<span class="comment"># 元组arguments第2个元素</span></span><br><span class="line">           shopkeeper=<span class="string">&quot;Michael Palin&quot;</span>,      <span class="comment"># 字典keywords第1个元素</span></span><br><span class="line">           client=<span class="string">&quot;John Cleese&quot;</span>,            <span class="comment"># 字典keywords第2个元素</span></span><br><span class="line">           sketch=<span class="string">&quot;Cheese Shop Sketch&quot;</span>)     <span class="comment"># 字典keywords第3个元素</span></span><br></pre></td></tr></table></figure>


<h2 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h2><p>比较规范的函数定义方式如下：<br>def f(pos1, pos2, &#x2F;, pos_or_kwd, *, kwd1, kwd2):<br>      ———–    ———-     ———-<br>        |               |                |<br>        |         位置或关键字参数         |<br>        |                                 |<br>  仅仅是位置参数                     仅仅是关键字参数</p>
<p>特殊参数 / 和 * 是可选的，这两个符号表明形参如何把参数值传递给函数。<br>在可能存在歧义的地方。<br>如以下代码，kwds 把 name 当作键，关键字 ‘name’ 又与第一个形参绑定：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name, **kwds</span>):</span><br><span class="line">···    <span class="keyword">return</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwds</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>, **&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: foo() got multiple values <span class="keyword">for</span> argument <span class="string">&#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>
<p>因为这种调用方法等同于 foo(name&#x3D;1, name&#x3D;2) ,这里第一个是位置参数制定了参数名的形式，第二个是 kwds 里的键名</p>
<p>加上特殊参数后，函数定义会把 name 当作位置参数，’name’ 也可以作为关键字参数的键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name, /, **kwds</span>):</span><br><span class="line">···    <span class="keyword">return</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwds</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>, **&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>


<h2 id="任意实参列表"><a href="#任意实参列表" class="headerlink" title="任意实参列表"></a>任意实参列表</h2><p>函数定义时，可以使用“固定数量形参+形参列表(形如*args **args)”。<br>调用时要求独立给出参数,即一个一个给出实参列表中的每一个元素，然后 *args 和 **args 会按照规则收集这些实参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_multiple_items</span>(<span class="params">file, separator, *args</span>):</span><br><span class="line">    file.write(separator.join(args))</span><br></pre></td></tr></table></figure>
<p>尾部的 *args 会收集调用时的所有剩余参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">concat</span>(<span class="params">*args, sep=<span class="string">&quot;/&quot;</span></span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> sep.join(args)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>concat(<span class="string">&quot;earth&quot;</span>, <span class="string">&quot;mars&quot;</span>, <span class="string">&quot;venus&quot;</span>)</span><br><span class="line"><span class="string">&#x27;earth/mars/venus&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>concat(<span class="string">&quot;earth&quot;</span>, <span class="string">&quot;mars&quot;</span>, <span class="string">&quot;venus&quot;</span>, sep=<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;earth.mars.venus&#x27;</span></span><br></pre></td></tr></table></figure>
<p>*args 会自动收集实参；在实参列表后的位置参数或默认参数，调用时需要指定参数名</p>
<h2 id="解包实参列表"><a href="#解包实参列表" class="headerlink" title="解包实参列表"></a>解包实参列表</h2><p>对于定义时，指定了形如 *args  **args的参数，调用时可以对元组类型或字典类型解包，把他们变成独立的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(*args))</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>这种调用方法把元组类型args&#x3D;[3,6] 解包成两个参数 3和6 ，效果等同于 range(3, 6)</p>
<p>同样地，也可以对字典类型解包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parrot</span>(<span class="params">voltage, state=<span class="string">&#x27;a stiff&#x27;</span>, action=<span class="string">&#x27;voom&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">d = &#123;<span class="string">&quot;voltage&quot;</span>: <span class="string">&quot;four million&quot;</span>, <span class="string">&quot;state&quot;</span>: <span class="string">&quot;bleedin&#x27; demised&quot;</span>, <span class="string">&quot;action&quot;</span>: <span class="string">&quot;VOOM&quot;</span>&#125;</span><br><span class="line">parrot(**d)</span><br></pre></td></tr></table></figure>
<p>这种调用方法等同于 parrot(voltage&#x3D;”four million”, state&#x3D;”bleedin’ demised”, action&#x3D;”VOOM”)</p>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>此处不记述。自认为，在python中，使用lambda的场合较少。</p>
<h2 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h2><p>function.<strong>doc</strong> 属性返回函数的文档字符串</p>
<p>下面是多行文档字符串的一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line"><span class="meta">... </span>    <span class="string">&quot;&quot;&quot;Do nothing, but document it.</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    No, really, it doesn&#x27;t do anything.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(my_function.__doc__)</span><br><span class="line">Do nothing, but document it.</span><br><span class="line"></span><br><span class="line">    No, really, it doesn<span class="string">&#x27;t do anything.</span></span><br></pre></td></tr></table></figure>
<p>第一行应为对象用途的简短摘要,以大写字母开头，以句点结尾;文档字符串为多行时，第二行应为空白行，在视觉上将摘要与其余描述分开。</p>
<h2 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h2><p>函数注解是可选的用户自定义函数类型的元数据完整信息。<br>标注以字典的形式存放在函数的 <strong>annotations</strong> 属性中：</p>
<ul>
<li>形参标注的定义方式是在形参名后加冒号，后面跟一个表达式，该表达式会被求值为标注的值</li>
<li>返回值标注的定义方式是加组合符号 -&gt;，后面跟一个表达式，该标注位于形参列表和表示 def 语句结束的冒号之间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">ham: <span class="built_in">str</span>, eggs: <span class="built_in">str</span> = <span class="string">&#x27;eggs&#x27;</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;Annotations:&quot;</span>, f.__annotations__)</span><br><span class="line">···     <span class="keyword">return</span> ham + <span class="string">&#x27; and &#x27;</span> + eggs</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">&#x27;spam&#x27;</span>)</span><br><span class="line">Annotations: &#123;<span class="string">&#x27;ham&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, <span class="string">&#x27;return&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, <span class="string">&#x27;eggs&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;&#125;</span><br><span class="line"><span class="string">&#x27;spam and eggs&#x27;</span></span><br></pre></td></tr></table></figure>


<h1 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h1><p>Python 项目大多都遵循以下风格:</p>
<ul>
<li>缩进，用 4 个空格，不要用制表符。</li>
<li>4 个空格是小缩进（更深嵌套）和大缩进（更易阅读）之间的折中方案。制表符会引起混乱，最好别用。</li>
<li>换行，一行不超过 79 个字符。</li>
<li>用空行分隔函数和类，及函数内较大的代码块。</li>
<li>最好把注释放到单独一行。</li>
<li>使用文档字符串。</li>
<li>运算符前后、逗号后要用空格，但不要直接在括号内使用： a &#x3D; f(1, 2) + g(3, 4)。</li>
<li>类和函数的命名要一致；按惯例，命名类用 UpperCamelCase，命名函数与方法用 lowercase_with_underscores。命名方法中第一个参数总是用 self (类和方法详见 初探类)。</li>
<li>编写用于国际多语环境的代码时，不要用生僻的编码。Python 默认的 UTF-8 或纯 ASCII 可以胜任各种情况。</li>
</ul>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="列表详解"><a href="#列表详解" class="headerlink" title="列表详解"></a>列表详解</h2><p>方法,形如(<em>x,[i]</em>)的参数，表示 i 为可选参数:</p>
<ul>
<li>list.append(<em>x</em>)      尾部添加一个元素</li>
<li>list.extend(<em>iterable</em>) 使用可迭代对象的元素扩展列表，相当于 a[len(a):]&#x3D;iterable</li>
<li>list.insert(<em>i,x</em>)    指定位置插入元素</li>
<li>list.remove(<em>x</em>)      删除列表中第一个值为x的元素；未找到则触发 ValueError异常</li>
<li>list.pop([<em>i</em>])     删除并返回指定位置元素，未指定位置时操作列表最后一个元素             </li>
<li>list.clear()          清空列表</li>
<li>list.index(<em>x, [start, [end]]</em>)   返回指定索引范围内第一个值为x的零基索引（返回的索引是基于整个list序列，而非start参数的），未找到则触发 ValueError 异常</li>
<li>list.count(<em>x</em>)       返回列表中x的出现次数</li>
<li>list.sort(<em>*, key&#x3D;None, reverse&#x3D;False</em>)    就地排序列表中的元素，；列表元素没有定义排序方法的，无法使用sort</li>
<li>list.reverse()        翻转列表元素</li>
<li>list.copy()           返回列表浅拷贝</li>
</ul>
<p>insert、remove、sort 、reverse等方法只修改列表（非副本），不返回列表对象，返回默认None，；pop方法仅仅是返回删除的元素，也不会返回列表对象。<br><strong>这是所有Python可变数据结构设计原则。</strong></p>
<h3 id="列表实现堆栈"><a href="#列表实现堆栈" class="headerlink" title="列表实现堆栈"></a>列表实现堆栈</h3><p>列表使用 append 和 pop 方法很容易实现堆栈。  </p>
<h3 id="不应该使用列表实现队列"><a href="#不应该使用列表实现队列" class="headerlink" title="不应该使用列表实现队列"></a>不应该使用列表实现队列</h3><p>列表实现队列的效率很低，最好使用 collections.deque (deque意思是“双向队列”)，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue = deque([<span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Michael&quot;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">&quot;Terry&quot;</span>)           </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">&quot;Graham&quot;</span>)          </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 </span><br><span class="line"><span class="string">&#x27;Eric&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 </span><br><span class="line"><span class="string">&#x27;John&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue                           </span><br><span class="line">deque([<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Terry&#x27;</span>, <span class="string">&#x27;Graham&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>列表推导式创建列表的方式更简洁，对序列或者可迭代对象中的每个元素应用某种操作，用生成的结果创建新的列表；或用满足特定条件的元素创建子序列。</p>
<p>使用可迭代对象，用满足条件的生成的结果创建新的临时列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意元组 (x, y) 必须加上括号</span></span><br><span class="line"><span class="comment">#如 [x, y for x in [1,2,3] for y in [3,1,4] if x != y] 会报语法错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure>

<p>用列表推导式生成的临时列表来创建列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure>

<h3 id="嵌套的列表推导式"><a href="#嵌套的列表推导式" class="headerlink" title="嵌套的列表推导式"></a>嵌套的列表推导式</h3><p>列表推导式中的初始表达式可以是另外一个列表推导式。</p>
<p>下面的列表推导式可以转置行列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>matrix = [</span><br><span class="line"><span class="meta">... </span>    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line"><span class="meta">... </span>    [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line"><span class="meta">... </span>    [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<p>它等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>transposed = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="meta">... </span>    transposed.append([row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix])</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>transposed</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<p>实际一般使用内置函数zip来替代复杂的流程语句。</p>
<h3 id="内置函数-zip-替代复杂列表推导式"><a href="#内置函数-zip-替代复杂列表推导式" class="headerlink" title="内置函数 zip 替代复杂列表推导式"></a>内置函数 zip 替代复杂列表推导式</h3><p><strong>zip(<em>*iterables, strict&#x3D;False</em>)</strong><br>zip的第一个参数列表接收多个迭代对象，第二个参数strict用来限制可迭代对象长度是否相同，不相同会报错 ValueError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># zip方法把多个列表组合成一个元组列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(x, y))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># zip(*zip(x, y)) 可以元组列表拆解成列表x和列表y</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 注意，这里的  zip(x, y) 表示的是一个(xi, yi)的元组列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x2, y2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(x, y))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == <span class="built_in">list</span>(x2) <span class="keyword">and</span> y == <span class="built_in">list</span>(y2)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h2 id="del-语句"><a href="#del-语句" class="headerlink" title="del 语句"></a>del 语句</h2><p>del 语句按索引、切片从列表删除元素，或者直接删除变量；pop方法仅能删除一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">0</span>]    <span class="comment"># 按索引删除元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">2</span>:<span class="number">4</span>]  <span class="comment"># 使用切片删除元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[:]    <span class="comment"># 清空列表元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a   <span class="comment"># 删除整个变量，此后再引用 a 就会报错</span></span><br></pre></td></tr></table></figure>


<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组由多个用逗号隔开的值组成。输入时，圆括号可有可无，不过经常是必须的(当元组是更大表达式的一部分)。例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>  <span class="comment"># 元组由多个用逗号隔开的值组成</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)      <span class="comment"># 元组可以嵌套</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u</span><br><span class="line">((<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<p>元组是immutable(不可变的)，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">0</span>] = <span class="number">88888</span>                <span class="comment"># 元组是不可变的</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure>
<p>不过列表可以作为元组的元素，我们不能在元组中修改列表对象，但是可以修改列表中的元素(因为存档在元组中的是列表的引用，修改列表中的元素并不会改变元组中的“物理内容”)</p>
<p>构建0个或1个元素的元组:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty = ()              <span class="comment"># 创建一个空元素元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>singleton = <span class="string">&#x27;hello&#x27;</span>,    <span class="comment"># 需要指定一个逗号，来明确这是一个元组</span></span><br></pre></td></tr></table></figure>


<p>元组解包:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = t     <span class="comment"># 元组解包，序列解包时，左侧数量应该与右侧数量相等</span></span><br></pre></td></tr></table></figure>


<h2 id="集合-—-set-frozenset"><a href="#集合-—-set-frozenset" class="headerlink" title="集合 — set, frozenset"></a>集合 — set, frozenset</h2><p>集合有可变集合(set)和不可变集合(frozenset)<br>集合是由不重复元素组成的无序容器。基本用法包括成员检测、重复元素消除，还指出合集、交集、差集、对称差分等数学运算。</p>
<p>创建集合使用花括号或 set() 函数。注意，创建空集合只能使用 set() ,使用 {} 创建的是空字典。</p>
<p>成员检测和重复消除:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>basket = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(basket)                   <span class="comment"># 重复元素会删除</span></span><br><span class="line">&#123;<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;orange&#x27;</span> <span class="keyword">in</span> basket              <span class="comment"># 成员检测</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>数学中的集合操作:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  <span class="comment"># a中字母</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># 差集</span></span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># 合集</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># 交集</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># 对称差分，等价于 (a-b)&amp;(b-a)</span></span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>集合也支持列表推导式创建:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>set方法有以下相关运算，注意，部分方法不适用于frozenset:</p>
<ul>
<li>x in s , x not in s</li>
<li>s &lt;&#x3D; other    检测集合s中每个元素是都在other之中</li>
<li>s.copy()      返回原集合的浅拷贝</li>
<li>s.updata(<em>*others</em>)  添加others中元素，注意解包的使用</li>
<li>s.add(<em>elem</em>)     添加新元素</li>
<li>s.remove(<em>elem</em>)  移除元素；如果集合不存在elem元素，在则引发 KeyError</li>
<li>s.discard(<em>elem</em>) 如果集合存在elem元素则将其移除</li>
<li>s.clear()     从集合删除所有元素</li>
</ul>
<h2 id="映射类型-—-dict-字典"><a href="#映射类型-—-dict-字典" class="headerlink" title="映射类型 — dict(字典)"></a>映射类型 — dict(字典)</h2><p>字典的键几乎可以是任值，非hashable的值，即包含列表、字典或其他可变类型的值不可用作键。<br><em>数字1和数字1.0可以用来引用同一条字典条目，但由于计算机对于浮点数的存储知识近似值，因此将其作为字典键是不明智的</em></p>
<h3 id="字典类型创建"><a href="#字典类型创建" class="headerlink" title="字典类型创建"></a>字典类型创建</h3><p>字典可以使用多种方式创建:</p>
<ul>
<li><p>花括号内以逗号分隔 key:val 对，如 {‘jack’: 4098, ‘sjoerd’: 4127}</p>
</li>
<li><p>使用字典推导式，如 {x: x ** 2 for x in range(10)}</p>
</li>
<li><p>使用类型构造器dict</p>
<p>class <strong>dict</strong>(<em>**kwargs</em>)<br>class <strong>dict</strong>(<em>mapping, **kwargs</em>)<br>class <strong>dict</strong>(<em>iterable, **kwargs</em>)</p>
</li>
</ul>
<p>以下演示几种创建字典的方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;    <span class="comment"># 使用花括号创建字典映射列表，并赋予a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>)         <span class="comment"># dict使用参数列表作为参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))   <span class="comment"># dict通过使用(keyi, vali)二元元组列表作为参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>([(<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;three&#x27;</span>, <span class="number">3</span>)])    <span class="comment"># dict (keyi, vali)二元元组列表作为参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = <span class="built_in">dict</span>(&#123;<span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>&#125;)          <span class="comment"># dict 参数是花括号表示的字典映射列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">dict</span>(&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;, two=<span class="number">2</span>)             <span class="comment"># dict 参数可以是花括号表示的字典映射列表和参数列表的混合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b == c == d == e == f</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="字典类型常见操作"><a href="#字典类型常见操作" class="headerlink" title="字典类型常见操作"></a>字典类型常见操作</h3><p>字典支持的常见操作:</p>
<ul>
<li>list(d)       返回字典d中所有键的列表</li>
<li>d[key]        返回以 key 为键的项，不存在则引发 KeyError</li>
<li>d[key]&#x3D;val    新建或修改键值为 key 的项的值</li>
<li>key in d, key not in d</li>
<li>iter(d)       返回以字典的键为元素的迭代器，等价于 iter(d.keys())</li>
<li>d.items()     返回“键值对”动态视图；可以用作迭代器</li>
<li>d.key()       </li>
<li>d.values()</li>
<li>d.get(<em>key[, default]</em>)   返回键key对应的值，否则返回default；default默认None，不会引发KeyError</li>
<li>d.pop(<em>key[, default]</em>)   </li>
<li>d.popitem()   python3.7版本后以LIFO(后进先出)顺序弹出”键值对”，空则引发 KeyError</li>
</ul>
<h2 id="循环技巧-—-字典、集合"><a href="#循环技巧-—-字典、集合" class="headerlink" title="循环技巧 — 字典、集合"></a>循环技巧 — 字典、集合</h2><h3 id="字典中循环"><a href="#字典中循环" class="headerlink" title="字典中循环"></a>字典中循环</h3><p>在字典中循环时，用 items() 方法可以同时取出键、值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>knights = &#123;<span class="string">&#x27;gallahad&#x27;</span>: <span class="string">&#x27;the pure&#x27;</span>, <span class="string">&#x27;robin&#x27;</span>: <span class="string">&#x27;the brave&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> knights.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(k, v)</span><br><span class="line">...</span><br><span class="line">gallahad the pure</span><br><span class="line">robin the brave</span><br></pre></td></tr></table></figure>
<h3 id="序列中循环"><a href="#序列中循环" class="headerlink" title="序列中循环"></a>序列中循环</h3><p>在序列中循环时，用 enumerate 函数可以同时取出位置索引、值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;tic&#x27;</span>, <span class="string">&#x27;tac&#x27;</span>, <span class="string">&#x27;toe&#x27;</span>]):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, v)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> tic</span><br><span class="line"><span class="number">1</span> tac</span><br><span class="line"><span class="number">2</span> toe</span><br></pre></td></tr></table></figure>
<p>在多个序列中“同序”循环时，应该使用 zip 函数，将其内元素按索引顺序匹配:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>questions = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;quest&#x27;</span>, <span class="string">&#x27;favorite color&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>answers = [<span class="string">&#x27;lancelot&#x27;</span>, <span class="string">&#x27;the holy grail&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> q, a <span class="keyword">in</span> <span class="built_in">zip</span>(questions, answers):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;What is your &#123;0&#125;?  It is &#123;1&#125;.&#x27;</span>.<span class="built_in">format</span>(q, a)) </span><br><span class="line">...</span><br><span class="line">What <span class="keyword">is</span> your name?  It <span class="keyword">is</span> lancelot.</span><br><span class="line">What <span class="keyword">is</span> your quest?  It <span class="keyword">is</span> the holy grail.</span><br><span class="line">What <span class="keyword">is</span> your favorite color?  It <span class="keyword">is</span> blue.</span><br></pre></td></tr></table></figure>
<h3 id="指定顺序循环"><a href="#指定顺序循环" class="headerlink" title="指定顺序循环"></a>指定顺序循环</h3><p>逆向循环序列可以调用 reversed 函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>按指定顺序可以用 sorted 函数，返回一个排序好的副本而不改变原有序列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>basket = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">set</span>(basket)):   <span class="comment"># 其中特别使用 set 来去除重复元素</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">orange</span><br><span class="line">pear</span><br></pre></td></tr></table></figure>

<h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><p>while 和 if 的条件句可以配合以下运算符使用:</p>
<ul>
<li>in 、 not in      执行成员检测，确定一个对象是否存在于某个容器内</li>
<li>is 、 is not      用来比较两个对象是否是同一个对象</li>
<li>and 、 or         </li>
<li>:&#x3D;                海象运算符，在表达式内部赋值使用；这和C不同</li>
</ul>
<h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>模块是包含 Python 定义和语句的文件。其文件名是模块名加后缀名 .py ，在模块内部，通过全局变量 <strong>name</strong> 可以获取模块名字符串</p>
<h2 id="模块详解"><a href="#模块详解" class="headerlink" title="模块详解"></a>模块详解</h2><h3 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h3><p>模块包含可执行语句以及函数定义，仅会在 import语句第一次遇到时执行，除非某个模块作为脚本运行。<br>例如在当前目录下创建 fibo.py 文件，编辑好内容后，可以进入python解释器用以下命令导入该模块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br></pre></td></tr></table></figure>
<p>import 的几个使用方法:</p>
<ul>
<li>导入一整个模块(相当于执行一次模块文件)，如 import fibo</li>
<li>导入模块中的几个，或满足条件的函数，如 from fibo import fib1， fibo2</li>
<li>导入模块或函数，并用as名称绑定，如 from fibo import fib1 as fibonacci</li>
</ul>
<h3 id="以脚本方式执行模块"><a href="#以脚本方式执行模块" class="headerlink" title="以脚本方式执行模块"></a>以脚本方式执行模块</h3><p>命令行里输入 python fibo.py <arguments>  可以运行python模块，这项操作会执行模块里的代码，还会把 <strong>name</strong> 赋值为 “<strong>main</strong>“ </p>
<p>为了区别出专门用来执行脚本的部分，应该在模块末尾添加以下代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    fib(<span class="built_in">int</span>(sys.argv[<span class="number">1</span>])) <span class="comment"># 如果调用掉本，就以这种参数调用方式执行函数   </span></span><br></pre></td></tr></table></figure>

<p>以下是在bash中调用的脚本的代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python fibo.py <span class="number">50</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span></span><br></pre></td></tr></table></figure>
<h3 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h3><p>按照以下优先级搜索模块:</p>
<ol>
<li>解释器首先搜索具有该名称的内置模块，它们的名字列在 sys.builtin_module_names 中</li>
<li>在变量 sys.path 给出的目录列表中搜索这个模块文件(模块名.py)； sys.path 从这些位置初始化:<ul>
<li>当前目录  (它的搜索位置在标准库之前)</li>
<li>PYTHONPATH</li>
<li>依赖于安装的默认值(包括一个 site-packages 目录，由 site 模块处理)</li>
</ul>
</li>
</ol>
<p>初始化后python程序可以更改 sys.path ,如 sys.path.append(‘&#x2F;ufs&#x2F;guido&#x2F;lib&#x2F;python’)</p>
<h3 id="“已编译的”python文件"><a href="#“已编译的”python文件" class="headerlink" title="“已编译的”python文件"></a>“已编译的”python文件</h3><p>为了快速加载模块，Python 把模块的编译版缓存在 <strong>pycache</strong> 目录中，文件名为 module.version.pyc，version 对编译文件格式进行编码，一般是 Python 的版本号。这种方法可以让不同python版本的已编译模块共存</p>
<p>例如，CPython 的 3.3 发行版中，spam.py 的编译版本缓存为 <strong>pycache</strong>&#x2F;spam.cpython-33.pyc</p>
<h2 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir 函数"></a>dir 函数</h2><p>内置函数 dir 用于查找模块定义的名称(模块名、函数名、变量名):</p>
<ul>
<li>dir()         没有参数时，列出当前(代码执行到此处)定义的名称</li>
<li>dir(fibo)     查找fibo模块内定义的名称</li>
<li>dir(builtins) 内置函数和变量的名称定义在标准模块 builtins</li>
</ul>
<p>dir空参数，列出当前定义的名称:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib = fibo.fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>()</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;fib&#x27;</span>, <span class="string">&#x27;fibo&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>dir指定模块名，列出这个模块定义的名称:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo, sys, builtins</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(fibo)</span><br><span class="line">[<span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;fib&#x27;</span>, <span class="string">&#x27;fib2&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(sys)  </span><br><span class="line">[<span class="string">&#x27;__breakpointhook__&#x27;</span>, <span class="string">&#x27;__displayhook__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__excepthook__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__interactivehook__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__stderr__&#x27;</span>, <span class="string">&#x27;__stdin__&#x27;</span>, <span class="string">&#x27;__stdout__&#x27;</span>, <span class="string">&#x27;__unraisablehook__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;_clear_type_cache&#x27;</span>, <span class="string">&#x27;_current_frames&#x27;</span>, <span class="string">&#x27;_debugmallocstats&#x27;</span>, <span class="string">&#x27;_framework&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;_getframe&#x27;</span>, <span class="string">&#x27;_git&#x27;</span>, <span class="string">&#x27;_home&#x27;</span>, <span class="string">&#x27;_xoptions&#x27;</span>, <span class="string">&#x27;abiflags&#x27;</span>, <span class="string">&#x27;addaudithook&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;api_version&#x27;</span>, <span class="string">&#x27;argv&#x27;</span>, <span class="string">&#x27;audit&#x27;</span>, <span class="string">&#x27;base_exec_prefix&#x27;</span>, <span class="string">&#x27;base_prefix&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;breakpointhook&#x27;</span>, <span class="string">&#x27;builtin_module_names&#x27;</span>, <span class="string">&#x27;byteorder&#x27;</span>, <span class="string">&#x27;call_tracing&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;callstats&#x27;</span>, <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;displayhook&#x27;</span>, <span class="string">&#x27;dont_write_bytecode&#x27;</span>, <span class="string">&#x27;exc_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;excepthook&#x27;</span>, <span class="string">&#x27;exec_prefix&#x27;</span>, <span class="string">&#x27;executable&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;flags&#x27;</span>, <span class="string">&#x27;float_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;float_repr_style&#x27;</span>, <span class="string">&#x27;get_asyncgen_hooks&#x27;</span>, <span class="string">&#x27;get_coroutine_origin_tracking_depth&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getallocatedblocks&#x27;</span>, <span class="string">&#x27;getdefaultencoding&#x27;</span>, <span class="string">&#x27;getdlopenflags&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getfilesystemencodeerrors&#x27;</span>, <span class="string">&#x27;getfilesystemencoding&#x27;</span>, <span class="string">&#x27;getprofile&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getrecursionlimit&#x27;</span>, <span class="string">&#x27;getrefcount&#x27;</span>, <span class="string">&#x27;getsizeof&#x27;</span>, <span class="string">&#x27;getswitchinterval&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gettrace&#x27;</span>, <span class="string">&#x27;hash_info&#x27;</span>, <span class="string">&#x27;hexversion&#x27;</span>, <span class="string">&#x27;implementation&#x27;</span>, <span class="string">&#x27;int_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;intern&#x27;</span>, <span class="string">&#x27;is_finalizing&#x27;</span>, <span class="string">&#x27;last_traceback&#x27;</span>, <span class="string">&#x27;last_type&#x27;</span>, <span class="string">&#x27;last_value&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;maxsize&#x27;</span>, <span class="string">&#x27;maxunicode&#x27;</span>, <span class="string">&#x27;meta_path&#x27;</span>, <span class="string">&#x27;modules&#x27;</span>, <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;path_hooks&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path_importer_cache&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;prefix&#x27;</span>, <span class="string">&#x27;ps1&#x27;</span>, <span class="string">&#x27;ps2&#x27;</span>, <span class="string">&#x27;pycache_prefix&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;set_asyncgen_hooks&#x27;</span>, <span class="string">&#x27;set_coroutine_origin_tracking_depth&#x27;</span>, <span class="string">&#x27;setdlopenflags&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;setprofile&#x27;</span>, <span class="string">&#x27;setrecursionlimit&#x27;</span>, <span class="string">&#x27;setswitchinterval&#x27;</span>, <span class="string">&#x27;settrace&#x27;</span>, <span class="string">&#x27;stderr&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;stdin&#x27;</span>, <span class="string">&#x27;stdout&#x27;</span>, <span class="string">&#x27;thread_info&#x27;</span>, <span class="string">&#x27;unraisablehook&#x27;</span>, <span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;version_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;warnoptions&#x27;</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="built_in">dir</span>(builtins)  </span><br><span class="line">[<span class="string">&#x27;ArithmeticError&#x27;</span>, <span class="string">&#x27;AssertionError&#x27;</span>, <span class="string">&#x27;AttributeError&#x27;</span>, <span class="string">&#x27;BaseException&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;BlockingIOError&#x27;</span>, <span class="string">&#x27;BrokenPipeError&#x27;</span>, <span class="string">&#x27;BufferError&#x27;</span>, <span class="string">&#x27;BytesWarning&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ChildProcessError&#x27;</span>, <span class="string">&#x27;ConnectionAbortedError&#x27;</span>, <span class="string">&#x27;ConnectionError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ConnectionRefusedError&#x27;</span>, <span class="string">&#x27;ConnectionResetError&#x27;</span>, <span class="string">&#x27;DeprecationWarning&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;EOFError&#x27;</span>, <span class="string">&#x27;Ellipsis&#x27;</span>, <span class="string">&#x27;EnvironmentError&#x27;</span>, <span class="string">&#x27;Exception&#x27;</span>, <span class="string">&#x27;False&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;FileExistsError&#x27;</span>, <span class="string">&#x27;FileNotFoundError&#x27;</span>, <span class="string">&#x27;FloatingPointError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;FutureWarning&#x27;</span>, <span class="string">&#x27;GeneratorExit&#x27;</span>, <span class="string">&#x27;IOError&#x27;</span>, <span class="string">&#x27;ImportError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ImportWarning&#x27;</span>, <span class="string">&#x27;IndentationError&#x27;</span>, <span class="string">&#x27;IndexError&#x27;</span>, <span class="string">&#x27;InterruptedError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;IsADirectoryError&#x27;</span>, <span class="string">&#x27;KeyError&#x27;</span>, <span class="string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="string">&#x27;LookupError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;MemoryError&#x27;</span>, <span class="string">&#x27;NameError&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;NotADirectoryError&#x27;</span>, <span class="string">&#x27;NotImplemented&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;NotImplementedError&#x27;</span>, <span class="string">&#x27;OSError&#x27;</span>, <span class="string">&#x27;OverflowError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="string">&#x27;PermissionError&#x27;</span>, <span class="string">&#x27;ProcessLookupError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ReferenceError&#x27;</span>, <span class="string">&#x27;ResourceWarning&#x27;</span>, <span class="string">&#x27;RuntimeError&#x27;</span>, <span class="string">&#x27;RuntimeWarning&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;StopIteration&#x27;</span>, <span class="string">&#x27;SyntaxError&#x27;</span>, <span class="string">&#x27;SyntaxWarning&#x27;</span>, <span class="string">&#x27;SystemError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;SystemExit&#x27;</span>, <span class="string">&#x27;TabError&#x27;</span>, <span class="string">&#x27;TimeoutError&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;TypeError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;UnboundLocalError&#x27;</span>, <span class="string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="string">&#x27;UnicodeEncodeError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;UnicodeError&#x27;</span>, <span class="string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="string">&#x27;UnicodeWarning&#x27;</span>, <span class="string">&#x27;UserWarning&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ValueError&#x27;</span>, <span class="string">&#x27;Warning&#x27;</span>, <span class="string">&#x27;ZeroDivisionError&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;__build_class__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__debug__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;abs&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;any&#x27;</span>, <span class="string">&#x27;ascii&#x27;</span>, <span class="string">&#x27;bin&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;bytearray&#x27;</span>, <span class="string">&#x27;bytes&#x27;</span>, <span class="string">&#x27;callable&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;chr&#x27;</span>, <span class="string">&#x27;classmethod&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;complex&#x27;</span>, <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;delattr&#x27;</span>, <span class="string">&#x27;dict&#x27;</span>, <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;divmod&#x27;</span>, <span class="string">&#x27;enumerate&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;frozenset&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>, <span class="string">&#x27;hasattr&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hash&#x27;</span>, <span class="string">&#x27;help&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;isinstance&#x27;</span>, <span class="string">&#x27;issubclass&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;iter&#x27;</span>, <span class="string">&#x27;len&#x27;</span>, <span class="string">&#x27;license&#x27;</span>, <span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;locals&#x27;</span>, <span class="string">&#x27;map&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;memoryview&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;oct&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;ord&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;property&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;quit&#x27;</span>, <span class="string">&#x27;range&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;reversed&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;setattr&#x27;</span>, <span class="string">&#x27;slice&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;sorted&#x27;</span>, <span class="string">&#x27;staticmethod&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;super&#x27;</span>, <span class="string">&#x27;tuple&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;vars&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;zip&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包是一种用“点式模块名”构造 Python 模块命名空间的方法。<br>下面这个分级文件树展示了 sound 这个包的架构：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sound/                          Top-level package</span><br><span class="line">      __init__.py               Initialize the sound package</span><br><span class="line">      formats/                  Subpackage for file format conversions</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              wavwrite.py</span><br><span class="line">              aiffread.py</span><br><span class="line">              aiffwrite.py</span><br><span class="line">              auread.py</span><br><span class="line">              auwrite.py</span><br><span class="line">              ...</span><br><span class="line">      effects/                  Subpackage for sound effects</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              surround.py</span><br><span class="line">              reverse.py</span><br><span class="line">              ...</span><br><span class="line">      filters/                  Subpackage for filters</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br><span class="line">              vocoder.py</span><br><span class="line">              karaoke.py</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure>
<p>只有包含 _<em>init</em>.py 文件的目录会被当成包。  </p>
<p>可以从包中导入单个模块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sound.effects.echo       <span class="comment"># 导入单个模块，引用函数时需要子模块全名</span></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo  <span class="comment"># 导入单个模块，引用函数时需要子模块名(无需前缀)</span></span><br><span class="line"><span class="keyword">from</span> sound.effects.echo <span class="keyword">import</span> echofilter     <span class="comment"># 导入单个函数，它同样也会加载这个子模块，但引用函数无需子模块名</span></span><br></pre></td></tr></table></figure>

<p>使用通配符导入所有模块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p>使用显示索引，在包内 <strong>init</strong>.py 定义 <strong>all</strong>&#x3D; [“echo”,”surround”.”reverse”] 能够让通配符导入这三个子模块；如果没有定义 <strong>all</strong> 变量，则不把吧所有子模块加载到当前命名空间。<br>实际上不推荐使用该方法，花费时间且可能产生副作用。  </p>
<h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="比较复杂的输出格式"><a href="#比较复杂的输出格式" class="headerlink" title="比较复杂的输出格式"></a>比较复杂的输出格式</h2><h3 id="简单显示变量进行调试"><a href="#简单显示变量进行调试" class="headerlink" title="简单显示变量进行调试"></a>简单显示变量进行调试</h3><p>不需要花哨输出的可以使用 repr() 和 str() 函数把<strong>值转变为字符串</strong>。<br>repr() 生成的值更加适用于解释器读取；一般情况下，数字、列表或字典等结构两个函数输出表现一致，面对字符串有不同表现(如转义字符的显示)。</p>
<p>几个 repr 的使用示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hellos = <span class="built_in">repr</span>(<span class="string">&#x27;hello, world\n&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(hellos)</span><br><span class="line"><span class="string">&#x27;hello, world\n&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># repr 的参数可以是任意python对象</span></span><br><span class="line"><span class="meta">... </span><span class="built_in">repr</span>((x, y, (<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)))</span><br><span class="line"><span class="string">&quot;(32.5, 40000, (&#x27;spam&#x27;, &#x27;eggs&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="格式化字符串字面值"><a href="#格式化字符串字面值" class="headerlink" title="格式化字符串字面值"></a>格式化字符串字面值</h3><p>格式化字符串字面值(简称 f-字符串)在字符串前加前缀 f 或 F，通过花括号写入包含格式的变量。<br>常见的几个表达式格式控制:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 在冒号后面指定“宽度”和变量类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&#x27;pi的值大约是 <span class="subst">&#123;math.pi:<span class="number">.3</span>f&#125;</span>.&#x27;</span>)</span><br><span class="line">pi的值大约是 <span class="number">3.142</span>.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 一些修饰符可以在格式化前转换值</span></span><br><span class="line"><span class="meta">... </span><span class="comment"># &#x27;!a&#x27; 应用 ascii() ，&#x27;!s&#x27; 应用 str()，&#x27;!r&#x27; 应用 repr()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animals = <span class="string">&#x27;rabbit&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&#x27;兔子的英文是 <span class="subst">&#123;animals&#125;</span>.&#x27;</span>)</span><br><span class="line">兔子的英文是 eels.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&#x27;兔子的英文是 <span class="subst">&#123;animals!r&#125;</span>.&#x27;</span>)</span><br><span class="line">兔子的英文是 <span class="string">&#x27;eels&#x27;</span>.</span><br></pre></td></tr></table></figure>
<h3 id="字符串format方法"><a href="#字符串format方法" class="headerlink" title="字符串format方法"></a>字符串format方法</h3><p>str.format 方法的使用与函数的定义与调用十分“相似”。</p>
<p>常见 str.format 方法的参数使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用空内容花括号占位，按序传递参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫 &#123;&#125; ，小名 &quot;&#123;&#125;!&quot;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;IceCocoa&#x27;</span>, <span class="string">&#x27;Cocoa&#x27;</span>))</span><br><span class="line"><span class="comment"># 在花括号内添加数字，指定参数顺序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;1&#125; and &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)) </span><br><span class="line"><span class="comment"># 在花括号内添加关键字，使用关键字引用参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;This &#123;food&#125; is &#123;adjective&#125;.&#x27;</span>.<span class="built_in">format</span>(food=<span class="string">&#x27;banana&#x27;</span>, adjective=<span class="string">&#x27;delicious&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>位置参数和关键字参数可以任意组合，它们也可以在字符串中多次出现。</p>
<p>包含字典类型参数的 str.format 方法使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Sjoerd&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;Jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;Dcab&#x27;</span>: <span class="number">8637678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 传递字典可以使用 &#123;位置参数[关键字]:格式&#125; 来引用</span></span><br><span class="line">··· <span class="built_in">print</span>(<span class="string">&#x27;Jack: &#123;0[Jack]:d&#125;; Sjoerd: &#123;0[Sjoerd]:d&#125;; &#x27;</span></span><br><span class="line">··· <span class="string">&#x27;Dcab: &#123;0[Dcab]:d&#125;&#x27;</span>.<span class="built_in">format</span>(table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 可以使用 **dic 解包一个字典类型，引用时仅需要 &#123;关键字:格式&#125;</span></span><br><span class="line">··· <span class="built_in">print</span>(<span class="string">&#x27;Jack: &#123;Jack:d&#125;; Sjoerd: &#123;Sjoerd:d&#125;; &#x27;</span></span><br><span class="line">··· <span class="string">&#x27;Dcab: &#123;Dcab:d&#125;&#x27;</span>.<span class="built_in">format</span>(**table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br></pre></td></tr></table></figure>
<h3 id="旧式字符串格式化方法"><a href="#旧式字符串格式化方法" class="headerlink" title="旧式字符串格式化方法"></a>旧式字符串格式化方法</h3><p>是 printf 风格的字符串格式化方法，与 C 中的打印方法比较相似，不详细记录。</p>
<h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><h3 id="打开文件函数open"><a href="#打开文件函数open" class="headerlink" title="打开文件函数open"></a>打开文件函数open</h3><p>open 函数返回一个 file object:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;workfile&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打开文件的模式一般有:</p>
<ul>
<li>r,  rb        只读，这是默认模式</li>
<li>w,  wb        只写，以覆盖原文件方式</li>
<li>a,  ab        追加写</li>
<li>r+, rb+       读写</li>
<li>a+, ab+       读和追加写</li>
</ul>
<p>后面加b的版本以二进制模式打开文件，以 bytes 对象的形式读写，此时不能指定 encoding</p>
<p>在文本模式下读取文件时，默认把平台特定的行结束符（Unix 上为 \n, Windows 上为 \r\n）转换为 \n。在文本模式下写入数据时，默认把 \n 转换回平台特定结束符。</p>
<p>行结束符的转换不会影响文本文件，但是会破坏 JPEG 或 EXE 等二进制文件数据，读写非文本文件一定要使用二进制模式。</p>
<h3 id="使用with关键字健壮地打开和关闭文件"><a href="#使用with关键字健壮地打开和关闭文件" class="headerlink" title="使用with关键字健壮地打开和关闭文件"></a>使用with关键字健壮地打开和关闭文件</h3><p>打开文件时使用 with 关键字，句子结束后，文件会正确关闭或触发异常；如果没有使用with关键字，必须使用 f.close() 来关闭文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;workfile&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    read_data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 检验文件是否自动关闭</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.closed</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h2><p>假定已经使用 f &#x3D; open(‘workfile’, ‘w’, encoding&#x3D;”utf-8”) 创建好了文件对象，则有以下方法:</p>
<ul>
<li>f.read([<em>size</em>])   </li>
<li>f.readline()</li>
<li>f.write(string)</li>
<li>f.tell()</li>
<li>f.seek(offset, whence)</li>
</ul>
<h3 id="读取文件-f-read-size"><a href="#读取文件-f-read-size" class="headerlink" title="读取文件 f.read([size])"></a>读取文件 f.read([<em>size</em>])</h3><p>省略size或size为负时，读取并返回整个文件内容(文件大小不能为内存两倍)；指定非负size时读取并返回最多 size 个字符&#x2F;字节。<br>如果到达文件末尾，则返回空字符串(‘’)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;文件所有内容\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="读取文本行-f-readline"><a href="#读取文本行-f-readline" class="headerlink" title="读取文本行 f.readline()"></a>读取文本行 f.readline()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">&#x27;文件第一行\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">&#x27;文件第二行\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用读取文本行的方式循环遍历整个文件对象:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(line, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">文件第一行</span><br><span class="line">文件第二行</span><br></pre></td></tr></table></figure>
<h3 id="写文件-f-write-string"><a href="#写文件-f-write-string" class="headerlink" title="写文件 f.write(string)"></a>写文件 f.write(<em>string</em>)</h3><p>把字符串内容写入文件，并返回写入字符数；写入其他类型的对象前，要转化成字符串(文本模式)或字节对象(二进制模式)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;This is a test\n&#x27;</span>)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>
<h3 id="返回文件位置-f-tell"><a href="#返回文件位置-f-tell" class="headerlink" title="返回文件位置 f.tell()"></a>返回文件位置 f.tell()</h3><p>返回一个整数，表示为二进制模式下，文件开始到当前位置的字节数；这个返回值对于文本模式没有意义</p>
<h3 id="改变文件对象位置-f-seek-offset-whence"><a href="#改变文件对象位置-f-seek-offset-whence" class="headerlink" title="改变文件对象位置 f.seek(offset, whence)"></a>改变文件对象位置 f.seek(<em>offset, whence</em>)</h3><p>参数 whence 指定参考点，0表示文件开头，1表示文件当前位置，2表示文件末尾；默认为0<br>参数 offset 以参考点为基准偏移的<strong>字节数</strong>；由此可知 seek 一般用于二进制模式打开的文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;workfile&#x27;</span>, <span class="string">&#x27;rb+&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">b&#x27;0123456789abcdef&#x27;</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(-<span class="number">3</span>, <span class="number">2</span>)  </span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)       </span><br><span class="line"><span class="string">b&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用json保存结构化数据"><a href="#使用json保存结构化数据" class="headerlink" title="使用json保存结构化数据"></a>使用json保存结构化数据</h2><p>把python数据层次结构转换为字符串表示形式，这个过程称为序列化(serializing)；<br>从字符串形式重建为数据，称为解序化(deserializing)</p>
<p>此处详细描述待实用时补充</p>
<h1 id="句法错误"><a href="#句法错误" class="headerlink" title="句法错误"></a>句法错误</h1><p>句法错误又称解析错误，会提出 SyntaxError: invalid syntax</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span> <span class="built_in">print</span>(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> <span class="built_in">print</span>(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">                   ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>
<p>解析器会复现出现句法错误的代码行，并用小“箭头”指向行里检测到的第一个错误</p>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常是执行时检测到的错误，异常的类型会作为错误信息的一部分打印出来；标准的异常类型是内置的标识符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> * (<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>
<p>特别地，用户中断程序(如 Control-C)会触发 KeyboardInterrupt 异常</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>使用 try…except 来捕获和处理异常<br>try…except 语句的工作原理如下:</p>
<ol>
<li>执行try子句</li>
<li>如果没有触发异常，则跳过 except 子句，try 语句执行完毕</li>
<li>如果在执行 try 子句时发生了异常，则跳过该子句中剩下的部分</li>
<li>关键字 except 会匹配类型一致的异常并交付给对应处理程序；如果所在”try子句–except子句”无法匹配这个异常，则跳到外部处理</li>
<li>如果这个异常在最外部还没有得到处理，则它是一个 <em>未处理异常</em> 且执行将终止</li>
</ol>
<h3 id="except子句"><a href="#except子句" class="headerlink" title="except子句"></a>except子句</h3><p>except子句的使用特点:</p>
<ul>
<li>except子句可以使用圆括号的元组，指定多个异常，如 except (RuntimeError, TypeError, NameError)</li>
<li>except子句指定的异常类型，可以兼容它的派生类；所有异常都继承自 BaseException</li>
<li>except子句使用 as 绑定触发的异常实例</li>
</ul>
<p>except子句使用 as 绑定触发的异常实例，并将参数存储在 instance.args 中，该实例定义了 <strong>str</strong>() ，无需添加后缀 .args 也可直接打印参数； 也可以在引发异常之前就实例化一个异常实例并添加属性。<br>以下是 as 绑定异常实例的演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> Exception(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> Exception <span class="keyword">as</span> inst:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">type</span>(inst))    <span class="comment"># the exception instance</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(inst.args)     <span class="comment"># arguments stored in .args</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(inst)          <span class="comment"># __str__ allows args to be printed directly,</span></span><br><span class="line"><span class="meta">... </span>                         <span class="comment"># but may be overridden in exception subclasses</span></span><br><span class="line"><span class="meta">... </span>    x, y = inst.args     <span class="comment"># unpack args</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;x =&#x27;</span>, x)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;y =&#x27;</span>, y)</span><br><span class="line">...</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;Exception&#x27;</span>&gt;</span><br><span class="line">(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)</span><br><span class="line">x = spam</span><br><span class="line">y = eggs</span><br></pre></td></tr></table></figure>
<h3 id="else子句–对try语句的补充"><a href="#else子句–对try语句的补充" class="headerlink" title="else子句–对try语句的补充"></a>else子句–对try语句的补充</h3><p>try…except 语句具有可选的 else 子句，它必须放在所有except子句之后，没有引发异常时会执行else子句；使用else子句可以避免捕获到无需try保护的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> OSError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无法打开文件:&#x27;</span>, arg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 无论是否触发异常，都会执行以下代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经执行了open函数&#x27;</span>);</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>
<h3 id="finally子句–定义清理操作"><a href="#finally子句–定义清理操作" class="headerlink" title="finally子句–定义清理操作"></a>finally子句–定义清理操作</h3><p>如果存在finally子句，则finally子句是try语句结束前执行的最后一项任务，不论是否触发异常。<br>因此，一般会先执行finally再处理异常；实际上是暂时搁置这个异常(不确定是否已经实例化过)，执行完finally子句后，再重新触发该异常。  </p>
<p>特别地， with open 属于预定义的清理操作。</p>
<h2 id="触发异常"><a href="#触发异常" class="headerlink" title="触发异常"></a>触发异常</h2><h3 id="“自然”触发异常"><a href="#“自然”触发异常" class="headerlink" title="“自然”触发异常"></a>“自然”触发异常</h3><p>这类异常的触发点位于内置函数内部(也许这样的描述不准确)，已经被妥善定义好的，我们无需考虑它如何产生</p>
<h3 id="raise语句强制触发异常"><a href="#raise语句强制触发异常" class="headerlink" title="raise语句强制触发异常"></a>raise语句强制触发异常</h3><p>raise 语句支持在try子句中强制触发异常； raise 唯一的参数就是要触发的异常实例，这个实例一般“匿名” 构造，如:</p>
<ul>
<li>raise NameError(‘HiThere’)    构造了参数为 “HiThere” 的 NameError 实例</li>
<li>raise ValueError()            构造了空参数的 ValueError 实例</li>
</ul>
<h3 id="含有finally子句的复杂触发异常"><a href="#含有finally子句的复杂触发异常" class="headerlink" title="含有finally子句的复杂触发异常"></a>含有finally子句的复杂触发异常</h3><p>由于finally子句必定执行的特性，与 return， else子句，except子句 ，(break, continue) 等结合使用会出现比较复杂的情形:</p>
<ul>
<li>在except和else子句中触发的次级异常，会在finally子句执行后重新触发</li>
<li>如果finally子句包含break、continue、return，异常将不会被重新引发</li>
<li>执行try语句时遇到break、continue、return，则finally子句会在这些语句之前执行</li>
<li>特别地，如果finally中包含return，则不会执行try的return</li>
</ul>
<p>由此可知，finally一定会被执行；实际应用中，finally对于释放外部资源十分有用。</p>
<h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>raise 语句支持可选的 from 子句，该子句用于启用链式异常:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ConnectionError</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    func()</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Failed to open database&#x27;</span>) <span class="keyword">from</span> exc</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> func</span><br><span class="line">ConnectionError</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">RuntimeError: Failed to <span class="built_in">open</span> database</span><br></pre></td></tr></table></figure>

<p>使用 from None 的方法，可以在输出异常时禁用“链式输出”</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>python的类支持面向对象编程(OOP)的多有标准特性:</p>
<ul>
<li>类的继承机制支持多个基类</li>
<li>派生的类能覆盖基类的方法</li>
<li>类的方法能调用基类中的同名方法</li>
</ul>
<h2 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>namespace (命名空间)是映射到对象的名称。 abs 函数、内置异常等的内置函数集合；模块中的全局名称；函数调用中的局部名称；对象的属性集合都属于命名空间。<br>不同命名空间的名称之间没有绝对关系。</p>
<p>点号之后的名称是属性，模块属性和模块中定义的全局名称之间存在直接的映射，它们属于相同的命名空间。</p>
<p>属性可以是只读或可写的。可写的模块属性可以用 del modelname.funcname 删除该对象模块对象中的属性。</p>
<p>命名空间是在不同时刻创建的，拥有不同的生命周期；各类模块都有自己的命名空间:</p>
<ul>
<li>内置名称的命名空间是在python解释器启动时创建的，永远不会删除；它存在于模块 builtins</li>
<li>模块的全局命名空间在读取模块定义时创建；一般也会持续到解释器退出</li>
<li>从脚本文件读取或交互式读取的，由解释器顶层调用执行的 <strong>main</strong> 的一部分也拥有自己的全局命名空间</li>
<li>函数的本地命名空间在调用该函数时创建，并在函数返回或抛出不在函数内部处理的错误时”遗忘”。每次递归都有自己的本地命名空间</li>
</ul>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域是命名空间可直接访问的 Python 程序的文本区域。 “可直接访问” 的意思是，对名称的非限定引用会在命名空间中查找名称。  </p>
<p>作用域是静态确定的，但会被动态使用。执行期间的任何时刻，都会有3或4个命名空间可被直接访问的嵌套作用域:</p>
<ol>
<li>最内层作用域，首先搜索，包含局部名称(如果不存在生效的global 和 nonlocal 语句)</li>
<li>封闭的函数作用域，包含非全局和非局部名称，从最近的封闭作用域开始搜索</li>
<li>当前模块的作用域，包含当前模块的全局名称</li>
<li>最外层作用域，最后搜索，包含内置名称的命名空间</li>
</ol>
<p>del x 实际是从当前作用域的命名空间移除对 x 的绑定。</p>
<p>所有引入新名称的操作都是所用于局部作用域的，import 语句和函数定义会在局部作用域里绑定模块或函数名称。</p>
<p>global 语句用于表明特定变量在全局作用域里，并应在全局作用域中重新绑定；nonlocal 语句表明特定变量在外层作用域中，并应在外层作用域中重新绑定。</p>
<h3 id="作用域和命名空间示例"><a href="#作用域和命名空间示例" class="headerlink" title="作用域和命名空间示例"></a>作用域和命名空间示例</h3><p>下例演示了 global 和 nonlocal 对变量绑定的影响:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scope_test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_local</span>():</span><br><span class="line">        spam = <span class="string">&quot;local spam&quot;</span>     <span class="comment"># 默认局部赋值没有改变对变量的绑定，这个赋值对外层无意义</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_nonlocal</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> spam           <span class="comment"># nonlocal 赋值改变了当前作用域对变量的绑定(绑定到了外层的同名变量)</span></span><br><span class="line">        spam = <span class="string">&quot;nonlocal spam&quot;</span>  <span class="comment"># 这个赋值影响了外一层的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_global</span>():</span><br><span class="line">        <span class="keyword">global</span> spam             <span class="comment"># global 赋值给与变量全局的绑定(本身就没有对局部的绑定)</span></span><br><span class="line">        spam = <span class="string">&quot;global spam&quot;</span>    <span class="comment"># 这个赋值影响到了全局的变量，但不会影响外一层的变量</span></span><br><span class="line"></span><br><span class="line">    spam = <span class="string">&quot;test spam&quot;</span></span><br><span class="line">    do_local()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After local assignment:&quot;</span>, spam)</span><br><span class="line">    do_nonlocal()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After nonlocal assignment:&quot;</span>, spam)</span><br><span class="line">    do_global()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After global assignment:&quot;</span>, spam)</span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;In global scope:&quot;</span>, spam)</span><br></pre></td></tr></table></figure>
<p>示例代码的输出是：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">After local assignment: test spam</span><br><span class="line">After nonlocal assignment: nonlocal spam</span><br><span class="line">After global assignment: nonlocal spam</span><br><span class="line">In global scope: global spam</span><br></pre></td></tr></table></figure>
<h2 id="初探类"><a href="#初探类" class="headerlink" title="初探类"></a>初探类</h2><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>类定义(class语句)和函数定义(def)一样，必须先执行才能生效；如果类定义在条件语句和函数内部，没有进入内部前，类仍处于未定义。<br>当进入类定义时，将会创建一个新的命名空间，用作局部作用域。<br><strong>特别注意，当（从结尾处）正常离开类定义时，将创建一个类对象</strong></p>
<p><strong>问题：创建类对象也会执行构造函数吗？</strong><br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>类定义时应该包含一个构造函数，定义一个初始状态：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, i</span>):</span><br><span class="line">    self.i = i</span><br></pre></td></tr></table></figure>
<p>注意，构造函数中的 self 参数不需要实例化时给出，它会自动赋为所在对象的引用</p>
<h3 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h3><p>类对象支持两种操作：属性引用和实例化。</p>
<p>假设定义这样的类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A simple example class&quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, i</span>):</span><br><span class="line">        self.i = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>
<p>类对象支持属性引用和实例化，MyClass.i 和 MyClass.f 就是有效的属性引用，分别返回一个整数对象和一个函数对象，此外属性引用也可以被赋值。</p>
<p><strong>特别注意</strong>：如果定义时“自动”构建的类对象被赋值修改，那么之后使用这个类实例化的对象也会被赋予修改后的状态</p>
<p>__doc__ 也是一个有效的属性，将返回所属类的文档字符串</p>
<p>类的实例化使用函数表示方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x= MyClass()</span><br></pre></td></tr></table></figure>

<h3 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h3><p><strong>注意</strong>： Class对象和实例对象不同，Class对象是定义类时，自动创建的一个“模板”对象；实例对象则是我们按照Class对象另外构建的一个新对象（即使创建完成后，它们之间仍会保持联系）</p>
<p>实例对象所能理解的唯一操作是属性引用：对数据属性和对方法属性。</p>
<h4 id="实例的数据引用"><a href="#实例的数据引用" class="headerlink" title="实例的数据引用"></a>实例的数据引用</h4><p>实例的数据属性像局部变量一样，在第一次赋值时产生，并且可以被 del 删除（此时再次使用该实例对象的引数据引用，会给出类对象的数据引用），如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x.i = 777</span><br><span class="line">&gt;&gt;&gt; x.i</span><br><span class="line">777</span><br><span class="line">&gt;&gt;&gt; del x.i</span><br><span class="line">&gt;&gt;&gt; x.i     # 删除实例对象的数据引用，再次使用时，会给出类对象的引用</span><br><span class="line">1123456 </span><br><span class="line">&gt;&gt;&gt; del MyClass.i</span><br><span class="line">&gt;&gt;&gt; x.i</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;MyClass&#x27; object has no attribute &#x27;i&#x27;</span><br><span class="line">&gt;&gt;&gt; MyClass.i</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: type object &#x27;MyClass&#x27; has no attribute &#x27;i&#x27;</span><br><span class="line">&gt;&gt;&gt; MyClass.i=123456    # 类对象重新创建一个属性</span><br><span class="line">&gt;&gt;&gt; x.i                 # 此时甚至实例对象也可以使用类对象的属性引用</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>
<p>如此看来，实例对象创建后，仍然和类对象保持紧密联系，甚至像是“实例对象是类对象的继承”（当然，这种描述并不准确，但使用起来确实有这种感觉）</p>
<p>由此可见，类变量是所有实例变量共享的，而实例变量是实例特有的，一旦实例变量出了问题(如没有引用已被删除)，就会交给类变量来解决。</p>
<p><strong>特别注意，对于列表和字典类型的类变量，如在类中定义 list1&#x3D;[]， 任何实例化对象不会创建新的独属于本实例的这个属性；对本实例中list1的引用即是对类list1的引用。</strong></p>
<p><strong>因此，如果需要属于本实例的列表引用，需要在类定义时在构造函数中定义list1&#x3D;[]</strong></p>
<h4 id="实例的方法引用"><a href="#实例的方法引用" class="headerlink" title="实例的方法引用"></a>实例的方法引用</h4><p>方法的特殊指出在于，实例对象会作为类定义函数的第一个参数被传入，调用 x.f() 相当于 MyClass.f(x)</p>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>补充说明:</p>
<ul>
<li>python中没有任何东西能强制隐藏数据，它完全是基于约定的（除非使用C编写的python）</li>
<li>客户端应该谨慎使用数据属性，直接操作可能破坏由方法维护的固定变量；python没有限制对实例对象的添加和修改数据属性</li>
<li>每个值都是一个对象，因此也都具有类，并存储为 object.__class__</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(modname.BaseClassName):</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure>
<p>不详细记录，派生的基本特性暂时不需要了解详细</p>
<h2 id="私有变量-仅是约定意义上的"><a href="#私有变量-仅是约定意义上的" class="headerlink" title="私有变量(仅是约定意义上的)"></a>私有变量(仅是约定意义上的)</h2><p>python并不存在仅限内部访问的真正的私有变量，但是大多数python代码都遵循这样的约定：带有一个下划线的名称（如 _spam）应该被当作是API的非公有部分</p>
<p>python还带有，名称改写的功能。在基类中含有如 __spam 这样的含有两个下划线前缀的标识符，它的文本将会被替换为 _classname__spam<br>名称改写有助于让子类重载方法而不破坏类内方法调用，当前类只需要专注于当前类内私有变量的使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseNum</span>:</span><br><span class="line">     <span class="comment"># 义时这么写，定义外单独引用该变量时，需要使用 x._BaseNum__num</span></span><br><span class="line">    __num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrivedNum</span>:</span><br><span class="line">    <span class="comment"># 定义时这么写，定义外单独引用该变量时，需要使用 x._DrivedNum__num</span></span><br><span class="line">    __num = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = DrivedNum()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x._BaseNum__num</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="基于类的迭代器"><a href="#基于类的迭代器" class="headerlink" title="基于类的迭代器"></a>基于类的迭代器</h2><p>大多数容器对象都可以使用for语句；在幕后，for语句会在容器对象上调用 iter() ，该函数返回定义了 __next__() 方法的迭代器对象，此方法将逐一访问容器中元素。可以使用 next() 内置函数来调用 __next()__ 方法  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it</span><br><span class="line">&lt;str_iterator <span class="built_in">object</span> at <span class="number">0x10c90e650</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">next</span>(it)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>

<p>给自定义类添加迭代器行为，定义一个 __iter__() 方法来返回一个带有 __next__() 的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Reverse</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Iterator for looping over a sequence backwards.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.index = self.index - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.data[self.index]</span><br></pre></td></tr></table></figure>
<p>这个类使用迭代器（实际使用中配合for语句）实现了伪翻转</p>
<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>可以用生成器完成的操作，同样可以使用基于类的迭代器来完成，但生成器的写法更为紧凑。</p>
<p>此处不详细记录。</p>
<h1 id="标准库简介-第一部分"><a href="#标准库简介-第一部分" class="headerlink" title="标准库简介-第一部分"></a>标准库简介-第一部分</h1><h2 id="操作系统接口–-os模块、shutil模块"><a href="#操作系统接口–-os模块、shutil模块" class="headerlink" title="操作系统接口– os模块、shutil模块"></a>操作系统接口– os模块、shutil模块</h2><h3 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h3><p>os 模块提供了许多与操作系统交互的函数<br>为避免内建函数 open 被 os.open 隐式替换，导入时一定要使用 improt os 而不是 from os import * </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()      <span class="comment"># 获得当前目录</span></span><br><span class="line"><span class="string">&#x27;C:\\Python310&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">&#x27;/server/accesslogs&#x27;</span>)   <span class="comment"># 改变当前目录</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">&#x27;mkdir today&#x27;</span>)   <span class="comment"># 运行命令行指令</span></span><br></pre></td></tr></table></figure>
<h3 id="shutil-模块"><a href="#shutil-模块" class="headerlink" title="shutil 模块"></a>shutil 模块</h3><p>shutil 模块，详写为 shell utility， 对于日常文件和目录管理提供了更高级别的接口</p>
<h3 id="内置辅助工具–-dir、help"><a href="#内置辅助工具–-dir、help" class="headerlink" title="内置辅助工具– dir、help"></a>内置辅助工具– dir、help</h3><p>内置的 dir() 和 help() 函数可以用作交互式辅助工具，用于处理像 os 这样的大型模块，如 dir(os) ，help(os)</p>
<h2 id="文件通配符–-glob模块"><a href="#文件通配符–-glob模块" class="headerlink" title="文件通配符– glob模块"></a>文件通配符– glob模块</h2><p>glob 模块提供了在目录中使用通配符搜索文件列表的函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> glob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;*.py&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;primes.py&#x27;</span>, <span class="string">&#x27;random.py&#x27;</span>, <span class="string">&#x27;quote.py&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="获取命令行参数–-sys模块"><a href="#获取命令行参数–-sys模块" class="headerlink" title="获取命令行参数– sys模块"></a>获取命令行参数– sys模块</h2><p>使用 sys.argv 可以获得调用本模块时，命令行参数列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.argv)</span><br></pre></td></tr></table></figure>

<h2 id="直接终止脚本–-sys模块"><a href="#直接终止脚本–-sys模块" class="headerlink" title="直接终止脚本– sys模块"></a>直接终止脚本– sys模块</h2><p>使用 sys.exit() 直接终止脚本</p>
<h2 id="标准流–-sys模块"><a href="#标准流–-sys模块" class="headerlink" title="标准流– sys模块"></a>标准流– sys模块</h2><p>sys 模块还具有 stdin， stdout， stderr 的属性:</p>
<ul>
<li>sys.stdin     用于所有交互式输入，如 input() 的调用</li>
<li>sys.stdout    用于print函数和表达式语句的输出，以及用于 input 的提示符；交互模式下sys.stdout是行缓冲的，非交互情况下是块缓冲的</li>
<li>sys.stderr    解释器自身的提示符和它的错误消息都发往 stderr，即使stdout重定向后也能看到它们；任何情况下(python3.9版本以后)，sys.stderr是行缓冲的</li>
</ul>
<p>sys.__stdin__，sys.__stdout__， sys.__stderr__ 这些对象存有stdin、stderr 和 stdout 的初始值；如果要使用它们恢复已经损坏或无需再使用的实际文件对象，应该在原来流被替换前就显示保存(即使原来流被替换也不会改变这些初始值，但是便于程序的清晰，应该这么做)</p>
<p>这些流都是常规的文本文件，与open函数返回的对象一致</p>
<h2 id="字符串模式匹配–-re模块"><a href="#字符串模式匹配–-re模块" class="headerlink" title="字符串模式匹配– re模块"></a>字符串模式匹配– re模块</h2><p>re 模块提供正则表达式工具:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r&#x27;\bf[a-z]*&#x27;</span>, <span class="string">&#x27;which foot or hand fell fastest&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;foot&#x27;</span>, <span class="string">&#x27;fell&#x27;</span>, <span class="string">&#x27;fastest&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="数学–-math模块、random模块、statistics模块"><a href="#数学–-math模块、random模块、statistics模块" class="headerlink" title="数学– math模块、random模块、statistics模块"></a>数学– math模块、random模块、statistics模块</h2><h3 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h3><p>math 模块提供了对浮点数学的底层C库函数的访问</p>
<h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><p>random 模块提供随机选择工具，一般有一下就几种随机方式:</p>
<ul>
<li>选择序列内随机元素，如 random.choice([‘apple’,’pear’,’banana’])</li>
<li>返回[0.0, 1.0) 范围内下一个随机浮点数，如 random.random() </li>
<li>返回范围内随机整数，如 random.randrange(6, 20, 2)</li>
</ul>
<h3 id="statistics模块"><a href="#statistics模块" class="headerlink" title="statistics模块"></a>statistics模块</h3><p>statistics 模块计算数值数据的基本统计属性，有均值mean、中位数median、方差variance等函数</p>
<h2 id="互联网访问–-urllib-request模块、smtplib模块"><a href="#互联网访问–-urllib-request模块、smtplib模块" class="headerlink" title="互联网访问– urllib.request模块、smtplib模块"></a>互联网访问– urllib.request模块、smtplib模块</h2><p>互联网访问有许多模块，这里的两个最简单的模块， urllib.request 用于从URL检索数据， smtplib 用于发送邮件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> urlopen(<span class="string">&#x27;http://worldtimeapi.org/api/timezone/etc/UTC.txt&#x27;</span>) <span class="keyword">as</span> response:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> line <span class="keyword">in</span> response:</span><br><span class="line"><span class="meta">... </span>        line = line.decode()             <span class="comment"># Convert bytes to a str</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> line.startswith(<span class="string">&#x27;datetime&#x27;</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(line.rstrip())         <span class="comment"># Remove trailing newline</span></span><br><span class="line">...</span><br><span class="line">datetime: <span class="number">2022</span>-01-01T01:<span class="number">36</span>:<span class="number">47.689215</span>+<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server = smtplib.SMTP(<span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server.sendmail(<span class="string">&#x27;soothsayer@example.org&#x27;</span>, <span class="string">&#x27;jcaesar@example.org&#x27;</span>,</span><br><span class="line"><span class="meta">... </span><span class="string">&quot;&quot;&quot;To: jcaesar@example.org</span></span><br><span class="line"><span class="string"><span class="meta">... </span>From: soothsayer@example.org</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>Beware the Ides of March.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server.quit()</span><br></pre></td></tr></table></figure>

<h2 id="日期和时间–-datetime模块"><a href="#日期和时间–-datetime模块" class="headerlink" title="日期和时间– datetime模块"></a>日期和时间– datetime模块</h2><p>datetime模块实现的重点是日期的格式化输出和操作，该模块还支持可感知时区的对象，有效类型有:</p>
<ul>
<li>class datetime.date       简单型日期，属性:year, month, day</li>
<li>class datetime.datetime   日期和时间的结合，属性：year, month, day, hour, minute, second, microsecond, and tzinfo.</li>
<li>class datetime.timedelta  表示两个date对象的时间间隔</li>
<li>class datetime.tzinfo     描述时区信息的抽象基类，用来给datetime时间调整概念</li>
<li>class datetime.timezone   实现了tzinfo的子类，表示相对于世界标准时间UTC的偏移量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 构建date对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = date.today()  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">datetime.date(<span class="number">2003</span>, <span class="number">12</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.strftime(<span class="string">&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;08-17-22. 17 Aug 2022 is a Wednesday on the 17 day of August.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 支持日历算数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>century21=date(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gotime=now-century21</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gotime, gotime.days</span><br><span class="line">(datetime.timedelta(days=<span class="number">8264</span>), <span class="number">8264</span>)</span><br></pre></td></tr></table></figure>

<h2 id="性能测量–-timeit-Timer模块，-cProfile模块"><a href="#性能测量–-timeit-Timer模块，-cProfile模块" class="headerlink" title="性能测量– timeit.Timer模块， cProfile模块"></a>性能测量– timeit.Timer模块， cProfile模块</h2><h3 id="timeit-Timer模块"><a href="#timeit-Timer模块" class="headerlink" title="timeit.Timer模块"></a>timeit.Timer模块</h3><p>timeit 模块颗粒度小，可以快速演示运行效率:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Timer(<span class="string">&#x27;t=a; a=b; b=t&#x27;</span>, <span class="string">&#x27;a=1; b=2&#x27;</span>).timeit()</span><br><span class="line"><span class="number">0.0754628999857232</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Timer(<span class="string">&#x27;a,b = b,a&#x27;</span>, <span class="string">&#x27;a=1; b=2&#x27;</span>).timeit()</span><br><span class="line"><span class="number">0.0371058000018820</span></span><br></pre></td></tr></table></figure>

<h3 id="cProfile模块"><a href="#cProfile模块" class="headerlink" title="cProfile模块"></a>cProfile模块</h3><p>cProfile 模块颗粒度大，可以识别较大代码块的关键部分:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line">pr = cProfile.Profile()</span><br><span class="line">pr.enable()</span><br><span class="line"><span class="comment"># ... do something ...</span></span><br><span class="line">pr.disable()</span><br><span class="line">pr.print_stats()</span><br></pre></td></tr></table></figure>

<p>使用上下文管理器(即使用 with 关键字):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line"><span class="keyword">with</span> cProfile.Profile() <span class="keyword">as</span> pr:</span><br><span class="line">    <span class="comment"># ... do something ...</span></span><br><span class="line">pr.print_stats()</span><br></pre></td></tr></table></figure>

<h2 id="质量控制–-doctest模块、-unittest模块"><a href="#质量控制–-doctest模块、-unittest模块" class="headerlink" title="质量控制– doctest模块、 unittest模块"></a>质量控制– doctest模块、 unittest模块</h2><h3 id="doctest模块"><a href="#doctest模块" class="headerlink" title="doctest模块"></a>doctest模块</h3><p>doctest 模块提供了一个工具，用于扫描模块并验证程序文档字符串中嵌入的测试:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">values</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算平均值.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(average([20, 30, 70]))</span></span><br><span class="line"><span class="string">    40.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(values) / <span class="built_in">len</span>(values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line">doctest.testmod()   <span class="comment"># 自动验证本所在脚本内嵌的测试</span></span><br></pre></td></tr></table></figure>

<p>在命令行可以使用  $python example.py -v  ，doctest会打印所尝试的详细日志，并打印出总结</p>
<h3 id="unittest模块"><a href="#unittest模块" class="headerlink" title="unittest模块"></a>unittest模块</h3><p>unittest 模块不像 doctest 模块那样易于使用，但它允许在一个单独的文件中维护更全面的测试集</p>
<p>此处不详细记录</p>
<h1 id="标准库简介-第二部分"><a href="#标准库简介-第二部分" class="headerlink" title="标准库简介-第二部分"></a>标准库简介-第二部分</h1><h2 id="字符串模板–-string-Template"><a href="#字符串模板–-string-Template" class="headerlink" title="字符串模板– string.Template"></a>字符串模板– string.Template</h2><p>string 模块包含一个通用的 Template 类，允许用户指定自己的字符串模板，这对于大文本来内容来说十分有用</p>
<p>这类格式化操作是通过占位符实现的，占位符有 $ 加上合法的标识符构成,其中 $ 是分隔符(分隔原文和占位符)；占位符后方需要留有空格和原文分开；如果使用花括号包围标识符部分则可以和其他部分无空连接。$$ 将被转义成单个字符 $ 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 变量替换占位符是使用 substitute 和 safe_substitute 方法实现</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=Template(<span class="string">&#x27;$&#123;village&#125;人民捐了$$10给$cause&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># substitute 方法；如果数据不完整则抛出 KeyError</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.substitute(village=<span class="string">&#x27;夏威夷&#x27;</span>,cause=<span class="string">&#x27;卡布奇诺&#x27;</span>)  </span><br><span class="line"><span class="string">&#x27;夏威夷人民捐了$10给卡布奇诺&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># safe_substitute 方法，允许未被替换的数据按占位符原文保留</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.safe_substitute(cause=<span class="string">&#x27;卡布奇诺&#x27;</span>) </span><br><span class="line"><span class="string">&#x27;$&#123;village&#125;人民捐了$10给卡布奇诺&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Template 的子类可以自定义分隔符，即修改 $ 的样式，以配合 input 等函数的使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">BatchRename</span>(<span class="title class_ inherited__">Template</span>):</span><br><span class="line">···     <span class="comment"># 分隔符还可以是符号&#x27;c&#x27;；使用字符&#x27;1&#x27;则不合法</span></span><br><span class="line"><span class="meta">... </span>    delimiter = <span class="string">&#x27;%&#x27;</span> </span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 改用 % 来表示占位符；注意这里打印 $ 不再需要转义</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=BatchRename(<span class="string">&#x27;%&#123;village&#125;人民在捐了$10给%&#123;cause&#125;&#x27;</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.substitute(village=<span class="string">&#x27;夏威夷&#x27;</span>,cause=<span class="string">&#x27;卡布奇诺&#x27;</span>)  </span><br><span class="line"><span class="string">&#x27;夏威夷人民捐了$10给卡布奇诺&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用二进制数据记录格式–-struct模块"><a href="#使用二进制数据记录格式–-struct模块" class="headerlink" title="使用二进制数据记录格式– struct模块"></a>使用二进制数据记录格式– struct模块</h2><p>struct 模块提供了 pack() 和 unpack() 函数，用于处理不定长度的二进制记录格式  </p>
<p>此处不详细记录</p>
<h2 id="多线程–-threading模块"><a href="#多线程–-threading模块" class="headerlink" title="多线程– threading模块"></a>多线程– threading模块</h2><p>多线程应用面临的主要挑战是，相互协调的多个线程之间需要共享数据或其他资源。threading 模块提供了多个同步操作原语，包括线程锁、事件、条件变量和信号量。</p>
<p>此处不详细记录</p>
<h2 id="弱引用–-weakref模块"><a href="#弱引用–-weakref模块" class="headerlink" title="弱引用– weakref模块"></a>弱引用– weakref模块</h2><p>weakref 模块提供的工具可以不必创建引用就能跟踪对象。 当对象不再需要时，它将自动从一个弱引用表中被移除，并为弱引用对象触发一个回调。</p>
<p>Python会自动进行内存管理，当某个对象的最后一个引用被移除后不久就会释放其所占用的内存；但是，存在需要持续跟踪对象的情况，跟踪它们将会创建一个令其永久化的引用。</p>
<p> 此处不详细记录</p>
<h2 id="用于操作列表的工具–-array模块、collections模块、heapq模块"><a href="#用于操作列表的工具–-array模块、collections模块、heapq模块" class="headerlink" title="用于操作列表的工具– array模块、collections模块、heapq模块"></a>用于操作列表的工具– array模块、collections模块、heapq模块</h2><h3 id="array模块"><a href="#array模块" class="headerlink" title="array模块"></a>array模块</h3><p>array 模块提供了一种高效的数值数组 array 对象，类似于列表，但要求存储类型一致，且存贮密集度更高:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 类型码 H 表示以两个字节为存储单元的无符号二进制数值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 对于普通列表来说，存储的 int 对象通常要占用16字节</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = array(<span class="string">&#x27;H&#x27;</span>, [<span class="number">4000</span>, <span class="number">10</span>, <span class="number">700</span>, <span class="number">22222</span>]) <span class="comment"># 注意，这里元素的类型不是 int</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(a)</span><br><span class="line"><span class="number">26932</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">array(<span class="string">&#x27;H&#x27;</span>, [<span class="number">10</span>, <span class="number">700</span>])</span><br></pre></td></tr></table></figure>
<h3 id="collections-模块"><a href="#collections-模块" class="headerlink" title="collections 模块"></a>collections 模块</h3><p>collections 模块提供了一种双向队列 deque 对象；可以使用列表来初始化 deque 对象。<br>有以下常见方法:</p>
<ul>
<li>append(<em>x</em>), appendletf(<em>x</em>)</li>
<li>pop(), popleft()</li>
<li>extend(<em>iterable</em>), extendleft(<em>iterable</em>)    使用迭代器扩展元素</li>
<li>index(<em>elem[, start[, stop]]</em>)</li>
<li>rotate(<em>n&#x3D;1</em>) 向右循环移动n步；享有循环1步等价于 d.appendleft(d.pop())</li>
<li>其他一般通用的 reverse(), clear(), copy(), count(<em>x</em>)</li>
</ul>
<p>实现队列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = deque([<span class="string">&quot;task1&quot;</span>, <span class="string">&quot;task2&quot;</span>, <span class="string">&quot;task3&quot;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.append(<span class="string">&quot;task4&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Handling&quot;</span>, d.popleft())</span><br><span class="line">Handling task1</span><br></pre></td></tr></table></figure>
<p>实现广度优先搜索树(要求结点作为元素):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unsearched = deque([starting_node])     </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">breadth_first_search</span>(<span class="params">unsearched</span>):</span><br><span class="line">    node = unsearched.popleft()</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> gen_moves(node):</span><br><span class="line">        <span class="keyword">if</span> is_goal(m):</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        unsearched.append(m)</span><br></pre></td></tr></table></figure>
<h3 id="bisec模块"><a href="#bisec模块" class="headerlink" title="bisec模块"></a>bisec模块</h3><p>bisec 模块使用了基本的二分(bisection)算法，定义了以下函数:</p>
<ul>
<li>bisect.bisect 家族，使用value搜索适合位置，然后返回适合插入元素的位置，value的类型很可能与列表元素不一致<ul>
<li>bisect.bisect(<em>a, value, key&#x3D;None</em>)     倾向于返回等值元素右侧位置，key指向一个比较函数用于提取比较键</li>
<li>bisect.bisect_left(…)    倾向于返回等值元素左侧位置</li>
<li>bisect.bisect_right(…)   倾向于返回等值元素右侧位置</li>
</ul>
</li>
<li>bisect.insort 家族，使用 item 搜索适合位置，然后后插入适合位置，相当于执行 bisec 和 insert；要注意到，这里实际使用的是elem的某个属性值(默认 e[0]，使用key后可以是e[1]或其他属性)<ul>
<li>bisect.insort(<em>a, item, key&#x3D;None</em>)     倾向于插在等值元素右侧</li>
<li>bisect.insort_left(…)   倾向于插在等值元素左侧</li>
<li>bisect.insort_left(…)   倾向于插在等值元素右侧</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> bisect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [(<span class="string">&#x27;red&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">8</span>), (<span class="string">&#x27;black&#x27;</span>, <span class="number">0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.sort(key=<span class="keyword">lambda</span> t: t[<span class="number">1</span>]) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">[(<span class="string">&#x27;black&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">8</span>)]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 使用 bisect.bisect 函数搜索位置；这里的搜索值要与key函数提取的值可比较</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bisect.bisect(data, <span class="number">7</span>, key=<span class="keyword">lambda</span> t:t[<span class="number">1</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 使用 bisect.insort 函数搜索后插入位置；里key函数的提值逻辑要求插入值 item 与顺序表元素都能满足，并且提值后可比较</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bisect.insort_left(data, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>), key=<span class="keyword">lambda</span> t:t[<span class="number">1</span>]) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">[(<span class="string">&#x27;black&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">8</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="heap模块"><a href="#heap模块" class="headerlink" title="heap模块"></a>heap模块</h3><p>heap 模块提供了堆队列算法的实现，维护的是最小堆<br>堆是一个二叉树，它的每个父节点的值都只会小于或等于所有孩子节点的值，最小的结点总是在根结点 heap[0]，同时 heap.sort() 维护了堆的不变性</p>
<p>heapq 模块定义了以下函数:</p>
<ul>
<li>heapq.heapify(<em>list</em>)             将list原地转换成堆(线性时间内)；空列表然后进行 heappush 操作也可初始化堆</li>
<li>heapq.heappush(<em>heap, item</em>)      放入item元素并保持堆的不变性</li>
<li>heapq.heappop(<em>heap</em>)             访问并弹出最小元素</li>
<li>heapq.headpushpop(<em>heap.item</em>)    效果等价于先heappush后heappop，但效率更好 </li>
<li>heapq.heapreplace(<em>heap, item</em>)   效果等价于先heappop后heappush，但效率更好</li>
</ul>
<p>堆元素可以为元组，此时元素中第一个属性应该为数值类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">5</span>, <span class="string">&#x27;编写代码&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">7</span>, <span class="string">&#x27;发布产品&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">1</span>, <span class="string">&#x27;编写规范&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">3</span>, <span class="string">&#x27;创建测试&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h</span><br><span class="line">[(<span class="number">1</span>, <span class="string">&#x27;编写规范&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;创建测试&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;编写代码&#x27;</span>), (<span class="number">7</span>, <span class="string">&#x27;发布产品&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="十进制浮点数"><a href="#十进制浮点数" class="headerlink" title="十进制浮点数"></a>十进制浮点数</h2><p>decimal 模块提供了一种 Decimal 数据类型用于十进制浮点运算。相比内置的float，特别适用于:</p>
<ul>
<li>控制精度</li>
<li>控制四舍五入</li>
<li>跟踪有效小数位</li>
<li>手工计算和计算机计算匹配</li>
</ul>
<h1 id="虚拟环境和包"><a href="#虚拟环境和包" class="headerlink" title="虚拟环境和包"></a>虚拟环境和包</h1><p>用于创建和管理虚拟环境的模块称为 venv； venv 通常会安装你可用的最新版本的 Python，可以通过运行 python3 或您想要的任何版本来选择特定的Python版本。</p>
<p>创建虚拟环境:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m venv tutorial-env </span><br></pre></td></tr></table></figure>
<p>创建 tutorial-env 目录，并在其中创建包含 Python 解释器副本和各种支持文件的目录。</p>
<p>创建好虚拟环境后，可在在命令行激活<br>windows下，运行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tutorial-env\Scripts\activate.bat</span><br></pre></td></tr></table></figure>
<p>Unix或MacOS下，运行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> tutorial-env/bin/activate</span><br></pre></td></tr></table></figure>
<p>这将改变所用终端的提示符，并修改环境，可以使用 sys.path 命令查看相关信息</p>
<h1 id="使用pip管理包"><a href="#使用pip管理包" class="headerlink" title="使用pip管理包"></a>使用pip管理包</h1><p>默认情况下 pip 将从 Python Package Index <a href="https://pypi.org/">https://pypi.org</a> 安装软件包。<br>pip 有许多子命令:”install”,”uninstall”,”upgrade”,”freeze”等</p>
<p>指定包名，安装最新版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ python -m pip install novas</span><br></pre></td></tr></table></figure>

<p>提供包名和版本名:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ python -m pip install requests==2.6.0</span><br></pre></td></tr></table></figure>

<p>更新到最新版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ python -m pip install --upgrade requests</span><br></pre></td></tr></table></figure>

<p>卸载一个或多个包:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ python -m pip uninstall requests</span><br></pre></td></tr></table></figure>

<p>显示有关特定包的信息:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ pip show requests</span><br></pre></td></tr></table></figure>

<p>显示虚拟环境中安装的所有软件包:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ pip list</span><br></pre></td></tr></table></figure>

















<h1 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h1><h1 id="词法分析（暂时搁置）"><a href="#词法分析（暂时搁置）" class="headerlink" title="词法分析（暂时搁置）"></a>词法分析（暂时搁置）</h1><p>python读取程序文本转为Unicode代码点；编码声明用于指定源文件编码，默认为UTF-8</p>
<h2 id="行结构"><a href="#行结构" class="headerlink" title="行结构"></a>行结构</h2><ul>
<li>逻辑行：源代码经过编译后，代码所在一行。NEWLINE形式符表示结束逻辑行，单个语句不能超出逻辑行边界，除非语法支持。</li>
<li>物理行：编写的代码所在行。</li>
<li>注释使用井号(#)开头，在物理行末尾截止</li>
<li>显示指定编码，该注释会被当作编码上面，必须独占行在文件开始  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: &lt;encoding-name&gt; -*-</span></span><br></pre></td></tr></table></figure></li>
<li>显示拼接行：两个及两个以上的物理行可用反斜杠拼接为一个逻辑行  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1900</span> &lt; year &lt; <span class="number">2100</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= month &lt;= <span class="number">12</span> \</span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span> &lt;= day &lt;= <span class="number">31</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= hour &lt; <span class="number">24</span> \</span><br><span class="line"><span class="keyword">and</span> <span class="number">0</span> &lt;= minute &lt; <span class="number">60</span> \</span><br><span class="line"><span class="keyword">and</span> <span class="number">0</span> &lt;= second &lt; <span class="number">60</span>:   <span class="comment"># 以反斜杠结尾的行，不能加注释</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li>隐式拼接行：圆括号、方括号、花括号内的表达式可以分成多个物理行，不必使用反斜杠</li>
<li>缩进格式</li>
<li>标识格式：A-Z，0-9，下划线，但不能以数字开头，标识符区分大小写</li>
<li>关键字、软关键字、保留的标识符</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="数字字面值"><a href="#数字字面值" class="headerlink" title="数字字面值"></a>数字字面值</h3><p><em>（若要实现负数，则使一元运算符’-‘和字面值组成）</em><br>整数字面值，没有长度限制，甚至能占满内存：</p>
<ul>
<li>0   7    2156161          </li>
<li>100_1515  _61_151_55101   #下划线会被忽略</li>
<li>0xdea48151a   0X151aef9   #hex-digit</li>
<li>0o125151      0O15121561  #oct-digit</li>
<li>0b_1011_0111  #混用</li>
</ul>
<p>浮点数字面值:</p>
<ul>
<li>3.1415926</li>
<li><ol start="10">
<li>.001</li>
</ol>
</li>
<li>3.14e-10  3.14_159_3</li>
</ul>
<h3 id="字符串或字符串字面值合并"><a href="#字符串或字符串字面值合并" class="headerlink" title="字符串或字符串字面值合并"></a>字符串或字符串字面值合并</h3><p> 以空白符分隔的多个相邻字符串或字节串字面值，可用不同引号标注，等同于合并操作。因此，”hello” ‘world’ 等价于 “helloworld”。此功能不需要反斜杠，即可将长字符串分为多个物理行，还可以为不同部分的字符串添加注释，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.<span class="built_in">compile</span>(<span class="string">&quot;[A-Za-z_]&quot;</span>    <span class="comment"># </span></span><br><span class="line">        <span class="string">&quot;[A-Za-z0-9_]*&quot;</span>   <span class="comment"># 注意，此功能在句法层面定义，在编译时实现</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<h3 id="格式字符串"><a href="#格式字符串" class="headerlink" title="格式字符串"></a>格式字符串</h3><p><em>暂时只记录例子</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&quot;Fred&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;He said his name is <span class="subst">&#123;name!r&#125;</span>.&quot;</span></span><br><span class="line"><span class="string">&quot;He said his name is &#x27;Fred&#x27;.&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;He said his name is <span class="subst">&#123;<span class="built_in">repr</span>(name)&#125;</span>.&quot;</span>  <span class="comment"># repr() is equivalent to !r</span></span><br><span class="line"><span class="string">&quot;He said his name is &#x27;Fred&#x27;.&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>width = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>precision = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = decimal.Decimal(<span class="string">&quot;12.34567&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;result: <span class="subst">&#123;value:&#123;width&#125;</span>.<span class="subst">&#123;precision&#125;</span>&#125;&quot;</span>  <span class="comment"># nested fields</span></span><br><span class="line"><span class="string">&#x27;result:      12.35&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today = datetime(year=<span class="number">2017</span>, month=<span class="number">1</span>, day=<span class="number">27</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;today:%B %d, %Y&#125;</span>&quot;</span>  <span class="comment"># using date format specifier</span></span><br><span class="line"><span class="string">&#x27;January 27, 2017&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;today=:%B %d, %Y&#125;</span>&quot;</span> <span class="comment"># using date format specifier and debugging</span></span><br><span class="line"><span class="string">&#x27;today=January 27, 2017&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number = <span class="number">1024</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;number:#0x&#125;</span>&quot;</span>  <span class="comment"># using integer format specifier</span></span><br><span class="line"><span class="string">&#x27;0x400&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123; foo = &#125;</span>&quot;</span> <span class="comment"># preserves whitespace</span></span><br><span class="line"><span class="string">&quot; foo = &#x27;bar&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">&quot;The mill&#x27;s closed&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;line = &#125;</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;line = &quot;The mill\&#x27;s closed&quot;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;line = :<span class="number">20</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&quot;line = The mill&#x27;s closed   &quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;line = !r:<span class="number">20</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;line = &quot;The mill\&#x27;s closed&quot; &#x27;</span></span><br></pre></td></tr></table></figure>












]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机零碎知识记录</title>
    <url>/2022/07/12/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录一些常用的又零碎的计算机知识</p>
<ul>
<li>2022-07-13 完成正则表达式基本整理</li>
</ul>
<span id="more"></span>

<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><h2 id="回车CR、换行LF"><a href="#回车CR、换行LF" class="headerlink" title="回车CR、换行LF"></a>回车CR、换行LF</h2><p>CR: Carriage Return ，对应ASCII转义字符’\r’,表示回车<br>LF: Linefeed ，对应ASCII转义字符’\n’，表示换行<br>CRLF: Carriage Return &amp; Linefeed，对应ASCII转义字符 “\r\n”，表示回车并换行</p>
<p>windows系统下使用CRLF进行“换行”，即新行以”\r\n”存储<br>unix&#x2F;linux&#x2F;mac系统下，使用LF进行“换行”，即新行以’\n’存储</p>
<h2 id="命令行文件校验"><a href="#命令行文件校验" class="headerlink" title="命令行文件校验"></a>命令行文件校验</h2><p>windows和linux下都自带certutil工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\user1&gt;certutil -hashfile &lt;文件名&gt; SHA256</span><br></pre></td></tr></table></figure>
<p>打印sha256</p>
<h2 id="windows下查看部分查看信息命令"><a href="#windows下查看部分查看信息命令" class="headerlink" title="windows下查看部分查看信息命令"></a>windows下查看部分查看信息命令</h2><ul>
<li>事件查看器 eventvwr.msc</li>
<li>证书查看 certmgr.msc</li>
</ul>
<h1 id="非系统知识整理"><a href="#非系统知识整理" class="headerlink" title="非系统知识整理"></a>非系统知识整理</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p>
<h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h3><details class="note primary no-icon" open="">
<summary><p><strong>普通字符</strong></p>
</summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>[ABC]</td>
<td>1</td>
<td>匹配 <strong>A B C</strong> 中任意一个</td>
<td></td>
</tr>
<tr>
<td>[^ABC]</td>
<td>1</td>
<td>匹配除 <strong>A B C</strong> 以外任意字符</td>
<td></td>
</tr>
<tr>
<td>[A-C0-4]</td>
<td>1</td>
<td>匹配 **A B C  0 1 2 3 4 **任意一个</td>
<td></td>
</tr>
<tr>
<td>[.]</td>
<td>1</td>
<td>匹配除 <strong>\n \r</strong> 以外任意字符</td>
<td></td>
</tr>
<tr>
<td>[\s]</td>
<td>1</td>
<td>匹配单个空白符</td>
<td></td>
</tr>
<tr>
<td>[\S]</td>
<td>1</td>
<td>匹配单个非空白符</td>
<td></td>
</tr>
<tr>
<td>[\w]</td>
<td>1</td>
<td>匹配是字母，数字，下划线中任意一个字符</td>
<td>[A-Z0-9_]</td>
</tr>
<tr>
<td></detail></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<details class="note primary no-icon" open="">
<summary><p><strong>非打印</strong></p>
</summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>[\cx]</td>
<td>1</td>
<td>匹配由x指定的控制字符，识别失败则匹配 <strong>c</strong></td>
<td></td>
</tr>
<tr>
<td>[\f]</td>
<td>1</td>
<td>匹配一个换页符</td>
<td>[\x0c],  [\cL]</td>
</tr>
<tr>
<td>[\n]</td>
<td>1</td>
<td>匹配一个回车符</td>
<td>[\x0a], [\cJ]</td>
</tr>
<tr>
<td>[\r]</td>
<td>1</td>
<td>匹配一个换行符</td>
<td>[\x0d],  [\cM]</td>
</tr>
<tr>
<td>[\t]</td>
<td>1</td>
<td>匹配一个制表符</td>
<td>[\x09],  [\cI]</td>
</tr>
<tr>
<td>[\v]</td>
<td>1</td>
<td>匹配一个垂直制表符</td>
<td>[\x0b], [\cK]</td>
</tr>
<tr>
<td>[\s]</td>
<td>1</td>
<td>匹配任何空白字符,包括空格、制表、回车、换行、换页、垂直制表符</td>
<td>[ \t\n\r\f\v]</td>
</tr>
<tr>
<td>[\S]</td>
<td>1</td>
<td>匹配任意非空白字符</td>
<td>[^ \t\n\r\f\v]</td>
</tr>
<tr>
<td></detail></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<details class="note primary no-icon" open="">
<summary><p><strong>特殊字符</strong></p></summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>$</td>
<td>不确定</td>
<td>匹配输入字符串的结尾位置，注意 \r \n的匹配情况</td>
<td></td>
</tr>
<tr>
<td>()</td>
<td>-</td>
<td>标记一个子表达式,表示范围内为一个表达式</td>
<td></td>
</tr>
<tr>
<td>[</td>
<td>-</td>
<td>标记一个中括号表达式的开始</td>
<td></td>
</tr>
<tr>
<td>\</td>
<td>-</td>
<td>转义使用</td>
<td></td>
</tr>
<tr>
<td>^</td>
<td>-</td>
<td>匹配输入字符串的开始位置，在方括号内除外</td>
<td></td>
</tr>
<tr>
<td>[^ABC]</td>
<td>-</td>
<td>表示不接受该方括号表达式中的字符集合</td>
<td></td>
</tr>
<tr>
<td>{</td>
<td>-</td>
<td>标记限定符表达式的开始</td>
<td></td>
</tr>
<tr>
<td>|</td>
<td>-</td>
<td>指明两项中一项</td>
<td></td>
</tr>
</tbody></table>
</details>

<details class="note primary no-icon" open="">
<summary><p><strong>限定符</strong></p></summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>0,1,2,…</td>
<td>匹配前方子表达式0次或多次；它是贪婪</td>
<td></td>
</tr>
<tr>
<td>+</td>
<td>1,2,3,…</td>
<td>匹配前方子表达式1次或多次；它是贪婪</td>
<td></td>
</tr>
<tr>
<td>{n}</td>
<td>n</td>
<td>匹配前方子表达式n次</td>
<td></td>
</tr>
<tr>
<td>{n,}</td>
<td>n,n+1,…</td>
<td>匹配前方子表达式至少n次</td>
<td></td>
</tr>
<tr>
<td>{n,m}</td>
<td>n,n+1,…,m</td>
<td>匹配前方字表达式最少n次最多m次</td>
<td></td>
</tr>
</tbody></table>
<p><i> <strong>*</strong> 和 <i> <strong>+</strong>  是贪婪的，尽可能匹配多的字符，在它们的后面加上一个 <strong>?</strong> 就可以实现非贪婪或最小匹配。</i></p>
<p>对于<strong>&lt;h1&gt; abcdefg &lt;&#x2F;h1&gt;</strong>这个字符换，<br> <strong>&lt;.*&gt;</strong> 可以匹配这一行内容，但 <strong>&lt;.*?&gt;</strong> 仅匹配  &lt;h1&gt;这四个字符</p>
</details>

<details class="note primary no-icon" open="">
<summary><p><strong>定位符</strong></p></summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>^xxx</td>
<td>尽可能少</td>
<td>匹配输入字符串的开始位置；在方括号内则表示<strong>非</strong>的意义</td>
<td></td>
</tr>
<tr>
<td>xxx$</td>
<td>尽可能少</td>
<td>匹配输入字符串的结尾位置</td>
<td></td>
</tr>
<tr>
<td>\bxxx , xxx\b</td>
<td>与x数目一致</td>
<td>匹配一个单词的边界，在不考虑此次输入开始或末尾的单词的情况下，相当于<strong>空格</strong>字符的意义</td>
<td></td>
</tr>
<tr>
<td>\Bxxx , xxx\B</td>
<td>与x数目一致</td>
<td>匹配非单词边界，在不考虑此次输入开始或末尾的单词的情况下，相当于 <strong>非空格</strong>字符的意义</td>
<td></td>
</tr>
</tbody></table>
<p>如： \bCha 匹配单词 <strong>Chapter</strong> 中开头三个字符， ter\b 匹配单词 <strong>Chapter</strong> 中末尾三个字符</p>
</details>


</details>

<details class="note primary no-icon" >
<summary><p><strong>选择符(复杂，若无必要一般不考虑)</strong></p></summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>(xxx)</td>
<td>捕获分组，可以表示内容为一个子表达式，同时把匹配的值保存起来，用(?:xxx)可以消除缓存</td>
</tr>
<tr>
<td>exp1(?&#x3D;exp2)</td>
<td>查找到exp2，然后仅匹配前方的exp1</td>
</tr>
<tr>
<td>(?&lt;&#x3D;exp2)exp1</td>
<td>查找到exp2，然后仅匹配后方的exp1</td>
</tr>
<tr>
<td>exp1(?!exp2)</td>
<td>查找到exp2，然后仅匹配后方的非exp1</td>
</tr>
<tr>
<td>(?&lt;!exp2)exp1</td>
<td>查找到exp2，然后仅匹配前方的非exp1</td>
</tr>
</tbody></table>
<p>如： runoob(?&#x3D;[\d+]) 匹配<strong>数字</strong>前面的<strong>runoob</strong> </p>
</details>

<p><br><br></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>日语基本语法学习与整理</title>
    <url>/2022/07/10/%E5%AD%A6%E4%B9%A0/%E6%97%A5%E8%AF%AD/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>记录《中日交流标准日本语》初级、中级常用语法</p>
<ul>
<li>2022-07-12 完成五十音的整理</li>
</ul>
<span id="more"></span>

<h1 id="《标准日本语》初级语法记录"><a href="#《标准日本语》初级语法记录" class="headerlink" title="《标准日本语》初级语法记录"></a>《标准日本语》初级语法记录</h1><h2 id="五十音"><a href="#五十音" class="headerlink" title="五十音"></a>五十音</h2><details class="note primary no-icon" open="" >
<summary><p><strong>平假名/片假名</strong></p></summary>

<table>
<thead>
<tr>
<th>a</th>
<th>i</th>
<th>u</th>
<th>e</th>
<th>o</th>
</tr>
</thead>
<tbody><tr>
<td>あア</td>
<td>いイ</td>
<td>うウ</td>
<td>えエ</td>
<td>おオ</td>
</tr>
<tr>
<td>かカ</td>
<td>きキ</td>
<td>くク</td>
<td>けケ</td>
<td>こコ</td>
</tr>
<tr>
<td>さサ</td>
<td>しシ</td>
<td>すス</td>
<td>せセ</td>
<td>そソ</td>
</tr>
<tr>
<td>たタ</td>
<td>ちチ</td>
<td>つツ</td>
<td>てテ</td>
<td>とト</td>
</tr>
<tr>
<td>なナ</td>
<td>に二</td>
<td>ぬヌ</td>
<td>ねネ</td>
<td>のノ</td>
</tr>
<tr>
<td>はハ</td>
<td>ひヒ</td>
<td>ふフ</td>
<td>ヘへ</td>
<td>ほホ</td>
</tr>
<tr>
<td>まマ</td>
<td>みミ</td>
<td>むム</td>
<td>めメ</td>
<td>もモ</td>
</tr>
<tr>
<td>やヤ</td>
<td>いイ</td>
<td>ゆユ</td>
<td>ええ</td>
<td>よヨ</td>
</tr>
<tr>
<td>らラ</td>
<td>りリ</td>
<td>るル</td>
<td>れレ</td>
<td>ろロ</td>
</tr>
<tr>
<td>わワ</td>
<td>いイ</td>
<td>うウ</td>
<td>えエ</td>
<td>おオ</td>
</tr>
<tr>
<td>んン</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>がガ</td>
<td>ぎギ</td>
<td>ぐグ</td>
<td>げゲ</td>
<td>ごゴ</td>
</tr>
<tr>
<td>ざザ</td>
<td>じジ</td>
<td>ずズ</td>
<td>ぜゼ</td>
<td>ぞゾ</td>
</tr>
<tr>
<td>だザ</td>
<td>ぢヂ</td>
<td>づヅ</td>
<td>でデ</td>
<td>どド</td>
</tr>
<tr>
<td>ばバ</td>
<td>びビ</td>
<td>ぶブ</td>
<td>べベ</td>
<td>ぼボ</td>
</tr>
<tr>
<td>ぱパ</td>
<td>ぴピ</td>
<td>ぷプ</td>
<td>ぺペ</td>
<td>ぽポ</td>
</tr>
</tbody></table>
</details>
<details class="note primary no-icon" open="" >
<summary><p><strong>平假名独表</strong></p></summary>

<table>
<thead>
<tr>
<th>a</th>
<th>i</th>
<th>u</th>
<th>e</th>
<th>o</th>
</tr>
</thead>
<tbody><tr>
<td>あ</td>
<td>い</td>
<td>う</td>
<td>え</td>
<td>お</td>
</tr>
<tr>
<td>か</td>
<td>き</td>
<td>く</td>
<td>け</td>
<td>こ</td>
</tr>
<tr>
<td>さ</td>
<td>し</td>
<td>す</td>
<td>せ</td>
<td>そ</td>
</tr>
<tr>
<td>た</td>
<td>ち</td>
<td>つ</td>
<td>て</td>
<td>と</td>
</tr>
<tr>
<td>な</td>
<td>に</td>
<td>ぬ</td>
<td>ね</td>
<td>の</td>
</tr>
<tr>
<td>は</td>
<td>ひ</td>
<td>ふ</td>
<td>ヘ</td>
<td>ほ</td>
</tr>
<tr>
<td>ま</td>
<td>み</td>
<td>む</td>
<td>め</td>
<td>も</td>
</tr>
<tr>
<td>や</td>
<td>い</td>
<td>ゆ</td>
<td>え</td>
<td>よ</td>
</tr>
<tr>
<td>ら</td>
<td>り</td>
<td>る</td>
<td>れ</td>
<td>ろ</td>
</tr>
<tr>
<td>わ</td>
<td>い</td>
<td>う</td>
<td>え</td>
<td>お</td>
</tr>
<tr>
<td>ん</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>が</td>
<td>ぎ</td>
<td>ぐ</td>
<td>げ</td>
<td>ご</td>
</tr>
<tr>
<td>ざ</td>
<td>じ</td>
<td>ず</td>
<td>ぜ</td>
<td>ぞ</td>
</tr>
<tr>
<td>だ</td>
<td>ぢ</td>
<td>づ</td>
<td>で</td>
<td>ど</td>
</tr>
<tr>
<td>ば</td>
<td>び</td>
<td>ぶ</td>
<td>べ</td>
<td>ぼ</td>
</tr>
<tr>
<td>ぱ</td>
<td>ぴ</td>
<td>ぷ</td>
<td>ぺ</td>
<td>ぽ</td>
</tr>
</tbody></table>
</details>
<details class="note primary no-icon" open="">
<summary><p><strong>片假名独表</strong></p></summary>

<table>
<thead>
<tr>
<th>a</th>
<th>i</th>
<th>u</th>
<th>e</th>
<th>o</th>
</tr>
</thead>
<tbody><tr>
<td>ア</td>
<td>イ</td>
<td>ウ</td>
<td>エ</td>
<td>オ</td>
</tr>
<tr>
<td>カ</td>
<td>キ</td>
<td>ク</td>
<td>ケ</td>
<td>コ</td>
</tr>
<tr>
<td>サ</td>
<td>シ</td>
<td>ス</td>
<td>セ</td>
<td>ソ</td>
</tr>
<tr>
<td>タ</td>
<td>チ</td>
<td>ツ</td>
<td>テ</td>
<td>ト</td>
</tr>
<tr>
<td>ナ</td>
<td>二</td>
<td>ヌ</td>
<td>ネ</td>
<td>ノ</td>
</tr>
<tr>
<td>ハ</td>
<td>ヒ</td>
<td>フ</td>
<td>へ</td>
<td>ホ</td>
</tr>
<tr>
<td>マ</td>
<td>ミ</td>
<td>ム</td>
<td>メ</td>
<td>モ</td>
</tr>
<tr>
<td>ヤ</td>
<td>イ</td>
<td>ユ</td>
<td>え</td>
<td>ヨ</td>
</tr>
<tr>
<td>ラ</td>
<td>リ</td>
<td>ル</td>
<td>レ</td>
<td>ロ</td>
</tr>
<tr>
<td>ワ</td>
<td>イ</td>
<td>ウ</td>
<td>エ</td>
<td>オ</td>
</tr>
<tr>
<td>ン</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ガ</td>
<td>ギ</td>
<td>グ</td>
<td>ゲ</td>
<td>ゴ</td>
</tr>
<tr>
<td>ザ</td>
<td>ジ</td>
<td>ズ</td>
<td>ゼ</td>
<td>ゾ</td>
</tr>
<tr>
<td>ザ</td>
<td>ヂ</td>
<td>ヅ</td>
<td>デ</td>
<td>ド</td>
</tr>
<tr>
<td>バ</td>
<td>ビ</td>
<td>ブ</td>
<td>ベ</td>
<td>ボ</td>
</tr>
<tr>
<td>パ</td>
<td>ピ</td>
<td>プ</td>
<td>ペ</td>
<td>ポ</td>
</tr>
</tbody></table>
</details>


<h2 id="形容词语法"><a href="#形容词语法" class="headerlink" title="形容词语法"></a>形容词语法</h2><p><em>两类形容词在作谓语时的肯定、否定、现在、过去的各种形式</em><br><strong>一类形容词</strong>: 词尾い段，以假名形式出现，不作为汉字的一部分。<br>一类形容词作谓语:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">            --现在肯定--&gt; 词尾后加です  </span><br><span class="line">词尾い      --过去肯定--&gt; かったです </span><br><span class="line">词尾い      --现在否定--&gt; くないです，くありません  </span><br><span class="line">词尾い      --过去否定--&gt; なっかです，ありませんでした  </span><br><span class="line"></span><br><span class="line">*いい       --现在肯定--&gt; いいです</span><br><span class="line"> いい       --过去肯定--&gt; よっかたです</span><br><span class="line"> いい       --现在否定--&gt; よくないです，よくありません  </span><br><span class="line"> いい       --过去否定--&gt; よっかたです，よくありませんでした  </span><br></pre></td></tr></table></figure>


<p><strong>二类形容词</strong>: 也叫形容动词，词尾非假名い段，如 嫌い(完整形式是嫌いだ)、綺麗 等就是二类形容词。<br>二类形容词作谓语:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">--现在肯定--&gt; 词尾后加です  </span><br><span class="line">--过去肯定--&gt; 词尾后加でしす </span><br><span class="line">--现在否定--&gt; 词尾后加ではありません </span><br><span class="line">--过去否定--&gt; 词尾后加ではありませんでした</span><br></pre></td></tr></table></figure>


<h2 id="动词语法"><a href="#动词语法" class="headerlink" title="动词语法"></a>动词语法</h2><p>一类动词：绝大部分去ます形い段尾部<br>二类动词：小部分去ます形い段尾部(okimaasu、miます)；去ます形え段尾部<br>三类动词：使用します的动词；特殊地，还有来ます、します<br><em>动词的ます形，て形，…等，分别用于不同情况</em></p>
<p><strong>动词ます形</strong></p>
<p><strong>动词去ます形</strong></p>
<p><strong>动词て形</strong>  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">一类动词:</span><br><span class="line">    动词尾き       --&gt;　いて</span><br><span class="line">    动词尾ぎ       --&gt;　いで</span><br><span class="line">    动词尾び、み、に--&gt;　んて</span><br><span class="line">    动词尾ち、り、い--&gt;　って</span><br><span class="line">    动词尾し       --&gt;　して</span><br><span class="line">二类动词：</span><br><span class="line">    去ます后，加て</span><br><span class="line">三类动词：</span><br><span class="line">    します        --&gt;　して</span><br><span class="line">    来ます        --&gt;　来て</span><br><span class="line">特殊于以上几类:</span><br><span class="line">    行きます      --&gt;　行って</span><br></pre></td></tr></table></figure>
<p><a href="/assets/images/xxx" title="常用て形变换">!常用て形变换</a></p>
<p><strong>动词ない形</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">一类动词:</span><br><span class="line">    把尾音变为a段，再加nai；如果尾音i段，则把i变为wa，再加nai</span><br><span class="line">二类动词：</span><br><span class="line">    去ます后，加nai</span><br><span class="line">三类动词：</span><br><span class="line">    把ます变成nai(注意，尽管变化的形式与二类动词一样，但意义不同)；shimasu变成shinai</span><br></pre></td></tr></table></figure>
<p><a href="/assets/images/xxx" title="常用ない形变换">!常用ない形变换</a></p>
<p><strong>动词基本形</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">一类动词:</span><br><span class="line">    去masu形尾音u段     </span><br><span class="line">二类动词:</span><br><span class="line">    去masu形</span><br><span class="line">三类动词:</span><br><span class="line">    去masu形尾部为ki</span><br><span class="line">    去masu形尾部为shi   --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="数量词的搭配使用（13）"><a href="#数量词的搭配使用（13）" class="headerlink" title="数量词的搭配使用（13）"></a>数量词的搭配使用（13）</h2>]]></content>
      <categories>
        <category>学习</category>
        <category>日语</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter学习笔记</title>
    <url>/2022/07/10/%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/JMeter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>观看《JMeter 2021 Masterclass》视频，学习并实践视频内容</p>
<ul>
<li>2022-08-08 完成观看视频的同步学习记录</li>
</ul>
<span id="more"></span>
<h1 id="初学笔记"><a href="#初学笔记" class="headerlink" title="初学笔记"></a>初学笔记</h1><h2 id="观看《JMeter-2021-Masterclass》学习并记录"><a href="#观看《JMeter-2021-Masterclass》学习并记录" class="headerlink" title="观看《JMeter 2021 Masterclass》学习并记录"></a>观看《JMeter 2021 Masterclass》学习并记录</h2><h3 id="开始一个JMeter测试计划"><a href="#开始一个JMeter测试计划" class="headerlink" title="开始一个JMeter测试计划"></a>开始一个JMeter测试计划</h3><ol>
<li>点击根目录下&#x2F;bin&#x2F;jmeter.bat ，打开GUI界面</li>
<li>右击Test Plan,添加Thread-Thread Group <ol>
<li>设置线程数</li>
<li>设置爬坡时间(Ramp-up period)</li>
<li>设置循环次数</li>
<li>其余默认</li>
</ol>
</li>
<li>右击已创建线程组,添加Simpler-HTTP Request<ol>
<li>Protocol留空，即默认http协议</li>
<li>Server Name or IP 设置要测试的网站，不要添加http(s)的前缀</li>
<li>Port Number留空</li>
<li>选择需要测试url的方法和路径</li>
<li>点击下方Add添加所需参数</li>
</ol>
</li>
<li>右击已创建线程组,添加 Listener-View Results Tree和View Results Tree</li>
<li>点击绿色箭头start,开始测试,测试结果可在两个监听器中看到</li>
</ol>
<h3 id="监听器Listener"><a href="#监听器Listener" class="headerlink" title="监听器Listener"></a>监听器Listener</h3><p>主要监听器:</p>
<ul>
<li>View Results in Table</li>
<li>View Results Tree</li>
<li>Aggregate Report</li>
<li>Graph Results</li>
<li>Summary Report</li>
<li>Simple Data Writer</li>
</ul>
<h3 id="断言Assertions"><a href="#断言Assertions" class="headerlink" title="断言Assertions"></a>断言Assertions</h3><p><em>注意，不同位置的Assertion适用的采样器范围不同</em><br>当请求不满足断言条件，则会被判断为fail</p>
<h3 id="HTTP-s-测试的脚本记录器"><a href="#HTTP-s-测试的脚本记录器" class="headerlink" title="HTTP(s)测试的脚本记录器"></a>HTTP(s)测试的脚本记录器</h3><!-- [脚本记录器debug]( /source/assets/WorkImages/JMeterScriptRecorder.png "脚本记录器") -->

<p><img src="/assets/WorkImages/JMeterScriptRecorder.png" alt="脚本记录器" title="脚本记录器"><br>步骤:</p>
<ol>
<li>给测试计划添加测试脚本记录器Test Script Recorder，并在脚本记录器上添加监听器</li>
<li>给测试计划添加线程组</li>
<li>给线程组添加记录控制器Recording Controllor，配置端口和渔民，并添加监听器</li>
<li>给火狐浏览器设置手动代理，并导入JMeter根目录的证书(如果没有则需要start一下会生成临时证书)</li>
<li>开始测试计划</li>
</ol>
<p>模板的使用:</p>
<h3 id="Blazemeter"><a href="#Blazemeter" class="headerlink" title="Blazemeter"></a>Blazemeter</h3><p><em>用于在云端运行性能测试的工具，相比使用JMeter内置脚本记录器，更加简便)</em></p>
<p>视频内容:</p>
<ol>
<li>create Blazemeter account</li>
<li>get Blazemeter extension</li>
<li>login </li>
<li>record test</li>
<li>save jmx</li>
<li>add JMX in JMeter and Run</li>
</ol>
<p>使用方法：</p>
<ol>
<li>使用扩展，开始记录，在网页上进行操作，完成记录，</li>
<li>Run，然后自动跳转至Blazemeter Dashbord</li>
<li>Edit</li>
<li>Save，下载指定JMX文件，可以导入到JMeter文件，只要再加两个监听器即可直接运行</li>
</ol>
<h3 id="关联CSV数据"><a href="#关联CSV数据" class="headerlink" title="关联CSV数据"></a>关联CSV数据</h3><p>步骤：</p>
<ol>
<li>添加CSV Data Set Config，和线程组同级别意味着可以用于该线程组</li>
<li>在CSV Data Set Config添加CSV文件，使之文件关联到JMeter</li>
<li>使用语法${FeatureName}引用对应特征名的变量</li>
<li>其他设置，如重命名特征名，文件编码，是否识别第一行，文件分隔符，到达EOF后停止或循环或结束线程</li>
</ol>
<h3 id="HTTP-Web测试中的设置元素-（其他类型的可到官方文档查看）"><a href="#HTTP-Web测试中的设置元素-（其他类型的可到官方文档查看）" class="headerlink" title="HTTP Web测试中的设置元素 （其他类型的可到官方文档查看）"></a>HTTP Web测试中的设置元素 （其他类型的可到官方文档查看）</h3><p><em>结果树监听器View Results Tree Listener消耗内存，调试测试测试计划时可以使用，但真正要测性能时要禁用</em></p>
<p><em>使用Blazemeter录制完保存为jmx文件后，导入到JMeter，会生成完整的配置元素和采样器</em></p>
<p>demo app - <a href="https://opensource-demo.orangehrmlive.com/">https://opensource-demo.orangehrmlive.com/</a></p>
<p>有以下几种设置元素:</p>
<ul>
<li>用户定义变量</li>
<li>HTTP头管理器</li>
<li>HTTP请求默认设置</li>
<li>DNS缓存管理器</li>
<li>HTTP认证（Authorization）管理器</li>
<li>HTTP Cookie管理器</li>
<li>HTTP缓存管理器</li>
</ul>
<h3 id="一般设置元素"><a href="#一般设置元素" class="headerlink" title="一般设置元素"></a>一般设置元素</h3><ul>
<li>Counter 可以存储迭代变量， ${num} 使用它，默认循环</li>
<li>JDBC Connection Config 用于连接，JDBC Request不负责连接 </li>
<li>Keystore 配置密钥，如何加载密钥，加载哪个由它配置</li>
<li>Random Variable 产生随机值，有必要看看要不要配置随机值</li>
<li>SImple Config Element 组建多对“变量名-值”的组合</li>
<li>User Defined Variable</li>
</ul>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>好处：</p>
<ul>
<li>没有图形界面的资源消耗</li>
<li>能与任何外部CI&#x2F;CD进行整合在一起</li>
</ul>
<p>视频内容</p>
<ol>
<li><p>进入bin文件夹，在命令行运行测试	<br>jmeter -n -t “测试文件.jmx -l “结果文件.csv”<br>jmeter或jmeter.bat<br>-n  no gui<br>-t  必须给出测试计划的地址<br>-l  必须给出结果文件位置<br>sh jmeter -n -t “测试文件位置”  -l “结果文件位置”</p>
</li>
<li><p>查看命令行帮助和选项 jmeter -h</p>
</li>
<li><p>添加环境变量，在任何系统位置运行</p>
</li>
</ol>
<h3 id="从命令行或GUI界面生成HTML报告"><a href="#从命令行或GUI界面生成HTML报告" class="headerlink" title="从命令行或GUI界面生成HTML报告"></a>从命令行或GUI界面生成HTML报告</h3><p>内容：</p>
<ul>
<li>从命令行创建html仪表盘报告</li>
<li>从脱机的cvs结果文件创建html仪表盘报告</li>
<li>学习html仪表盘报告</li>
<li>GUI生成html仪表盘报告</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>创建测试计划</p>
</li>
<li><p>在bin文件夹打开命令行</p>
</li>
<li><p>运行命令 jmeter -n -t “testfile.jmx” -l “resualtfile.csv”  -e -o “reports foler”<br> -e  生成html报告或仪表盘报告<br> -o  </p>
<p> 使用已有csv结果文件生成报告<br> jmeter -g “resualtfile.csv”   -o “reports foler”</p>
</li>
<li><p>Tools-Gnenrate HTML report在可视化界面生成HTML报告</p>
</li>
</ol>
<h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><p>内容:寻找、安装、卸载、升级插件</p>
<ol>
<li>从<a href="https://jmeter-plugins.org/wiki/PluginsManager/%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8jar%EF%BC%8C%E6%94%BE%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95/lib/ext">https://jmeter-plugins.org/wiki/PluginsManager/下载插件管理器jar，放到指定目录/lib/ext</a></li>
<li>在GUI界面OPTIONS-Plugins Manager里可以管理JMeter</li>
<li>寻找其他插件 <a href="https://jmeter-plugins.org/">https://jmeter-plugins.org/</a>   <a href="https://jmeter-plugins.org/wiki/Start/">https://jmeter-plugins.org/wiki/Start/</a></li>
</ol>
<h3 id="测试REST-API"><a href="#测试REST-API" class="headerlink" title="测试REST API"></a>测试REST API</h3><ul>
<li>REST API：Representational State Transfer，需要了解一下概念</li>
<li>网址reqres.in，这里有一些用于测试的简单 REST API</li>
<li>REST API在浏览器上的表现形式似乎与一般HTTP报文并无区别，测试时当成普通HTTP报文即可（待日后研究）</li>
<li>使用POST方法，交换的json数据需要编辑在在body</li>
</ul>
<h3 id="测试SOAP-API"><a href="#测试SOAP-API" class="headerlink" title="测试SOAP API"></a>测试SOAP API</h3><ol>
<li>请求采样器</li>
<li>添加Headers</li>
<li>添加Authorisation</li>
<li>添加body</li>
<li>添加断言</li>
<li>运行和检查结果</li>
</ol>
<p>测试网站 dneonline.com&#x2F;calculator.asmx<br>SOAP API 都是POST方式，内容为SOAP格式文档<br>可以扩展wizdler查看SOAP文档内容</p>
<p>视频过程：</p>
<ol>
<li><p>使用模板 Building a SOAP WebService Test Plan 构建一个SOAP API测试<br> 其中 SOAP Request 的Body Data部分是SOAP格式文档<br> 需要调整HTTP头管理器<br> 可选添加Authorization管理器</p>
</li>
<li><p>不使用模板，自己手动建立一个SOAP API测试计划</p>
<ol>
<li>添加HTTP请求采样器，方法需要设置为POST，body需要添加SOAP格式内容<br> 视频中在body里添加了 SOAP Envelope 元素下内容(这里传送数据)</li>
<li>添加头管理器，跳转其内容，包括 Content-Type , SOAPAction（这里告诉服务器对接收道德数据的进行什么行为）</li>
<li>添加了Authorization管理器，但测试网站没有认证需要</li>
<li>添加了Response断言，断言了 SOAP内容下的一个元素，如 <AddResult>5</AddResult></li>
<li>添加监视器以查看结果，View Results Tree，Assertion Results</li>
</ol>
</li>
</ol>
<h3 id="函数-JMeter内置-和变量的使用"><a href="#函数-JMeter内置-和变量的使用" class="headerlink" title="函数(JMeter内置)和变量的使用"></a>函数(JMeter内置)和变量的使用</h3><p>Funtions句法:<br>    ${_funcName}<br>    ${_funcName(var1,var2,…)}<br>Variable句法:<br>    ${VarName}</p>
<p>视频过程:</p>
<ol>
<li>添加Java Request</li>
<li>点击 Function Helper Dialog	，可以找些一些JMeter的内置函数，如 log，time，threadNum等</li>
<li>一个函数可以使用别的函数返回的变量，如 存在函数 ${_intSum(2,3,result)}，则在别的请求中可以使用 ${result}，也可以当作一个函数内的参数<br>所有函数可以参考官方文档 <a href="https://jmeter.apache.org/usermanual/functions.html">https://jmeter.apache.org/usermanual/functions.html</a></li>
</ol>
<h2 id="JMeter官方文档阅读笔记"><a href="#JMeter官方文档阅读笔记" class="headerlink" title="JMeter官方文档阅读笔记"></a>JMeter官方文档阅读笔记</h2><h3 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h3><ul>
<li>线程组是测试计划的起点，所有控制器和采样器必须位于线程组下，监听器可以与线程组同级；</li>
<li>每个线程完全独立；</li>
<li>爬坡时间指定要用多少时间完成所有线程，一定程度上指定了延迟，下限必须足够长以免负载过大</li>
<li>可以指定线程生存周期，包括持续时间和启动延迟</li>
</ul>
<h4 id="采样器"><a href="#采样器" class="headerlink" title="采样器"></a>采样器</h4><p>采样器告诉JMeter向服务器发送请求并等待响应。<br>包括 FTP、HTTP、JDBC、Java Object、JMS、JUnit Test、LDAP、Mail、OS Process、TCP 这些请求种类的采样器</p>
<h4 id="逻辑控制器"><a href="#逻辑控制器" class="headerlink" title="逻辑控制器"></a>逻辑控制器</h4><p>逻辑控制器允许自定义如何发送请求，指定发送时间，发送顺序<br>测试计划</p>
<ul>
<li>线程组<ul>
<li>仅一次控制器</li>
<li>登录请求（HTTP 请求)</li>
<li>加载搜索页面（HTTP 采样器）</li>
<li>交错控制器</li>
<li>搜索“A”（HTTP采样器）</li>
<li>搜索“B”（HTTP采样器）</li>
<li>HTTP 默认请求（配置元素）</li>
<li>HTTP 默认请求（配置元素）</li>
<li>饼干管理器（配置元素）</li>
</ul>
</li>
</ul>
<h4 id="特殊的控制器-测试片段"><a href="#特殊的控制器-测试片段" class="headerlink" title="特殊的控制器-测试片段"></a>特殊的控制器-测试片段</h4><p>这个元素仅仅用于测试计划中重用代码</p>
<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>所有的监听器都保存相同的数据，唯一的区别在于选择显示方式和选择的显示内容。</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>指定其范围内采样器之间的延迟时间，多个计时器的时间会相加</p>
<h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>断言检验返回请求是否符合自定义规则（文本、返回头等），否则视为失败，记录于监听器</p>
<h3 id="配置元素"><a href="#配置元素" class="headerlink" title="配置元素"></a>配置元素</h3><p>配置元素与采样器紧密协作，它可以添加或修改请求，作用范围为所在控制器内部；<br>子分支中的配置元素优先级高于父分支中配置元素</p>
<h3 id="预处理后处理元件"><a href="#预处理后处理元件" class="headerlink" title="预处理后处理元件"></a>预处理后处理元件</h3><p>在发出采样器请求之前和之后执行某些操作</p>
<h2 id="组件作用范围与执行顺序"><a href="#组件作用范围与执行顺序" class="headerlink" title="组件作用范围与执行顺序"></a>组件作用范围与执行顺序</h2><h3 id="范围界定规则"><a href="#范围界定规则" class="headerlink" title="范围界定规则"></a>范围界定规则</h3><p>分层结构（监听器、配置元素、预处理器、后处理器、断言、计时器内部）<br>同级有序结构（逻辑控制器、采样器之间）<br>同级无序结构（监听器、配置元素、预处理器、后处理器、断言、计时器之间）</p>
<p><img src="/assets/WorkImages/scoping-rules.png" alt="范围界定示例" title="范围界定示例"></p>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>单个采样器运行的前后环境顺序：</p>
<ol>
<li>配置元素</li>
<li>预处理器</li>
<li>定时器</li>
<li>采样器</li>
<li>后处理器</li>
<li>断言</li>
<li>监听器</li>
</ol>
<h1 id="使用过程技巧记录"><a href="#使用过程技巧记录" class="headerlink" title="使用过程技巧记录"></a>使用过程技巧记录</h1><ol>
<li><p>插件 Parallel Controller &amp; Sampler<br>允许线程组内并行控制器，但不能细致操控。  如果必须要在一个线程内设置一个并行，那么只能使用该控制器；如果可以针对地并发执行这些请求，那么应该使用线程组</p>
</li>
<li><p>变量嵌套，其中有 fileCounter 是自定义迭代器变量， fileId1 ，fileId2 … 是自定义变量 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;__V(fileId$&#123;fileCounter&#125;)&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
        <category>测试工具</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
</search>
