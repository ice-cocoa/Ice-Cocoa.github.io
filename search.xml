<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>web自动化python+Selenium学习</title>
    <url>/2022/08/18/%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/web%E8%87%AA%E5%8A%A8%E5%8C%96python+Selenium%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>记录 python 下，使用 Selenuim 实现web自动化的基本语法<br>更新日志:</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>学习</category>
        <category>测试工具</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基础语法</title>
    <url>/2022/08/15/%E5%AD%A6%E4%B9%A0/Markdown%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录Markdown基本语法<br>更新日志:</p>
<ul>
<li>2022-07-13 <ul>
<li>重新整理了一些不标准和不合适的markdown语法</li>
<li>试图更新table样式，发现table样式似乎写死，指定样式无用。</li>
</ul>
</li>
</ul>
<span id="more"></span>






<h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><h1 id="Heading-level-1"><a href="#Heading-level-1" class="headerlink" title="Heading level 1"></a>Heading level 1</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Heading level 1//一级标题，注意井号后面有个空格</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">Heading level 1</span></span><br><span class="line"><span class="section">========</span></span><br></pre></td></tr></table></figure>

<h2 id="Heading-level-2"><a href="#Heading-level-2" class="headerlink" title="Heading level 2"></a>Heading level 2</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## Heading level 2//二级标题</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">Heading level 2</span></span><br><span class="line"><span class="section">---------</span></span><br></pre></td></tr></table></figure>

<h3 id="Heading-level-3"><a href="#Heading-level-3" class="headerlink" title="Heading level 3"></a>Heading level 3</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### Heading level 3//三级标题，增加井号数量可继续增加子标题等级</span></span><br></pre></td></tr></table></figure>
<h1 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h1><p>今天天气不错，<br>午饭吃了吗</p>
<p>还没有吃</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">今天天气不错，</span><br><span class="line">午饭吃了吗</span><br><span class="line"></span><br><span class="line">还没有吃</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">段落，用空白行隔开段落，段落前不要用空格或制表符缩进段落</span><br></pre></td></tr></table></figure>
<h1 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h1><p>这是第一行<br><br>这是第二行<br><br>这是第三行</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是第一行<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">这是第二行<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">这是第三行</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">也在行尾使用两个空格作为换行符</span><br></pre></td></tr></table></figure>
<h1 id="强调单词或句子"><a href="#强调单词或句子" class="headerlink" title="强调单词或句子"></a>强调单词或句子</h1><p>今天<strong>天气</strong>真不错啊<br><br>今天<em>天气</em>真不错啊<br><br>今天<em><strong>天气</strong></em>真不错啊<br><br>今天~~ 天气 ~~真不错啊</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">粗体：   </span><br><span class="line"><span class="code">    今天**天气**真不错啊</span></span><br><span class="line"><span class="code">斜体：</span></span><br><span class="line"><span class="code">    今天*天气*真不错啊</span></span><br><span class="line"><span class="code">斜粗体：</span></span><br><span class="line"><span class="code">    今天***天气***真不错啊</span></span><br><span class="line"><span class="code">删去线：</span></span><br><span class="line"><span class="code">    今天~~ 天气 ~~真不错啊</span></span><br></pre></td></tr></table></figure>


<h1 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h1><blockquote>
<p>第一段落：撅草棍儿抽长短</p>
<p>第二段落：谁长谁先干</p>
<blockquote>
<p>这里是子嵌套的</p>
</blockquote>
</blockquote>
<blockquote><p>今天天气不错</p>
</blockquote>


<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;第一段落：撅草棍儿抽长短</span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;第二段落：谁长谁先干</span></span><br><span class="line">&gt;&gt;这里是子嵌套的</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">多个段落的块引用间，空行也要加&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">今天天气不错</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项<ol>
<li>子项</li>
<li>子项</li>
</ol>
</li>
<li>第四项<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项 //注意点后有空格</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br><span class="line"><span class="bullet">    1.</span> 子项</span><br><span class="line"><span class="bullet">    2.</span> 子项</span><br><span class="line"><span class="bullet">4.</span> 第四项</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul>
<li><p>第一项</p>
<blockquote>
<p>今天天气不错</p>
</blockquote>
</li>
<li><p>第二项</p>
<ul>
<li>子项</li>
<li>子项</li>
<li>子项</li>
</ul>
</li>
<li><p>第三项</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt;今天天气不错 //列表中可嵌套其他元素</span></span><br><span class="line"><span class="code">- 第二项</span></span><br><span class="line"><span class="code">    - 子项</span></span><br><span class="line"><span class="code">    - 子项</span></span><br><span class="line"><span class="code">    - 子项</span></span><br><span class="line"><span class="code">- 第三项</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h1><p>代码语法的作用是让代码在下面这样的框里显示</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">int a=10;</span><br><span class="line">print(&quot;%d&quot;,a);</span><br><span class="line">//代码结束</span><br></pre></td></tr></table></figure>


<hr>
<p>编辑代码内容</p>
<pre><code><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">int a=10;</span><br><span class="line">print(&quot;%d&quot;,a);</span><br><span class="line">//代码结束   </span><br></pre></td></tr></table></figure>
</code></pre>
<p>或者<br></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock  %&#125;</span><br><span class="line">int a=10;</span><br><span class="line">print(&quot;%d&quot;,a);</span><br><span class="line">//代码结束</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>第一行</p>
<hr>
<p>第二行</p>
<hr>
<p>第三行</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">第一行</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">第二行</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">___</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">第三行</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">独立成行的三个连续的<span class="emphasis">*，或三个连续的下划线可作分隔线</span></span><br></pre></td></tr></table></figure>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="加title的链接"><a href="#加title的链接" class="headerlink" title="加title的链接"></a>加title的链接</h2><p>这是一个链接 <a href="www.baidu.com">百度</a><br><br>这是一个链接 <a href="www.baidu.com" title="百度搜素">百度</a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是一个链接 [<span class="string">百度</span>](<span class="link">www.baidu.com</span>)<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">这是一个链接 [<span class="string">百度</span>](<span class="link">www.baidu.com &quot;百度搜素&quot;</span>)//鼠标放到链接上有“百度搜索”提示</span><br></pre></td></tr></table></figure>
<h2 id="网址和邮箱地址"><a href="#网址和邮箱地址" class="headerlink" title="网址和邮箱地址"></a>网址和邮箱地址</h2><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:&#102;&#97;&#x6b;&#101;&#64;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#111;&#109;">&#102;&#97;&#x6b;&#101;&#64;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#111;&#109;</a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://markdown.com.cn&gt;</span></span><br><span class="line"><span class="language-xml">&lt;fake@example.com&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="带格式化的链接"><a href="#带格式化的链接" class="headerlink" title="带格式化的链接"></a>带格式化的链接</h2><p>今天天气不错，查看 <em><strong><a href="http://www.weather.com.cn/">中国天气</a></strong></em><br><br>查看<a href="#code"><code>code</code></a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">今天天气不错，查看 <span class="strong">**<span class="emphasis">*[<span class="string">中国天气</span>](<span class="link">http://www.weather.com.cn/</span>)*</span>**</span></span><br><span class="line">查看[<span class="string">`code`</span>](<span class="link">#code</span>)</span><br></pre></td></tr></table></figure>


<h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><p><img src="/../../themes/next_a/source/images/avatars/aoba.jpg" alt="图片1" title="aoba"><br></p>
<p><img src="/assets/images/aoba.jpg" alt="青叶" title="aoba"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">../../themes/next_a/source/images/avatars/aoba.jpg &quot;aoba&quot;</span>)<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>  //以该post的地址作为起始地址，这样的链接是错误的</span><br><span class="line"></span><br><span class="line">![<span class="string">青叶</span>](<span class="link">/assets/images/aoba.jpg &quot;aoba&quot;</span>)  //运行时相对地址的起始为博客的根目录文件夹，这样的链接是正确的</span><br></pre></td></tr></table></figure>

<h2 id="给图片添加链接"><a href="#给图片添加链接" class="headerlink" title="给图片添加链接"></a>给图片添加链接</h2><p><a href="http://newgame-anime.com/assets/character/c4.png" title="hifumi"><img src="/assets/images/hifumi.jpg" alt="日富美" title="hifumi"></a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">![日富美</span>](<span class="link">/assets/images/hifumi.jpg &quot;hifumi&quot;</span>)](<span class="link">http://newgame-anime.com/assets/character/c4.png &quot;hifumi&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><h2 id="可做转义的字符"><a href="#可做转义的字符" class="headerlink" title="可做转义的字符"></a>可做转义的字符</h2><p>以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>反斜线</td>
</tr>
<tr>
<td>&#96;</td>
<td>反引号</td>
</tr>
<tr>
<td>_</td>
<td>下划线</td>
</tr>
<tr>
<td>{}</td>
<td>花括号</td>
</tr>
<tr>
<td>[]</td>
<td>方括号</td>
</tr>
<tr>
<td>()</td>
<td>圆括号</td>
</tr>
<tr>
<td>#</td>
<td>井号</td>
</tr>
<tr>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>-</td>
<td>减号，连字符</td>
</tr>
<tr>
<td>.</td>
<td>圆点</td>
</tr>
<tr>
<td>!</td>
<td>感叹号</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h2><p>如果你使用 &amp; 符号的作为 HTML 实体的一部分，那么它不会被转换，而在其它情况下，它则会被转换成 &amp;amp;。</p>
<h1 id="内嵌HTML标签"><a href="#内嵌HTML标签" class="headerlink" title="内嵌HTML标签"></a>内嵌HTML标签</h1><h2 id="lt-ruby-gt"><a href="#lt-ruby-gt" class="headerlink" title="&lt; ruby&gt;"></a>&lt; ruby&gt;</h2><p><ruby>拼音<rt>pinyin</rt></ruby></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span>拼音<span class="language-xml"><span class="tag">&lt;<span class="name">rt</span>&gt;</span></span>pinyin<span class="language-xml"><span class="tag">&lt;/<span class="name">rt</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span></span><br></pre></td></tr></table></figure>





<h2 id="lt-detail-gt"><a href="#lt-detail-gt" class="headerlink" title="&lt; detail&gt;"></a>&lt; detail&gt;</h2><details class="note primary no-icon" open="">
<summary><p><strong>总描述</strong></p>
</summary>

<table>
<thead>
<tr>
<th align="left">栏目1</th>
<th align="center">栏目2</th>
<th align="left">栏目 3</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\</td>
<td align="center">反斜线</td>
<td align="left">\</td>
</tr>
<tr>
<td align="left">&#96;</td>
<td align="center">反引号</td>
<td align="left">&#96;</td>
</tr>
<tr>
<td align="left">_</td>
<td align="center">下划线</td>
<td align="left">_</td>
</tr>
</tbody></table>
</details>


<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">details</span> <span class="attr">class</span>=<span class="string">&quot;note primary no-icon&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span>总描述<span class="language-xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">| 栏目1 | 栏目2 | 栏目 3|</span><br><span class="line">| :--- | :----: |:---|  //对齐方式</span><br><span class="line">| \  | 反斜线 | \ |</span><br><span class="line">| <span class="code">`  | 反引号 | `</span> |</span><br><span class="line">| <span class="emphasis">_  | 下划线 | _</span> |</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<details class="note primary no-icon" open="">
<summary><p><strong>总体介绍</strong></p></summary>
<table>
<caption style="text-align: left;">表格标题</caption>
<thead>
<tr class="header">
<th style="text-align: center;">栏目1</th>
<th style="text-align: center;">栏目2</th>
<th style="text-align: center;">栏目3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">a</td>
<td style="text-align: center;">aa</td>
<td style="text-align: center;">aaa</td>
</tr>
<tr class="even">
<td style="text-align: center;">b</td>
<td style="text-align: center;">bb</td>
<td style="text-align: center;">bbb</td>
</tr>
<tr class="odd">
<td style="text-align: center;">b</td>
<td style="text-align: center;">bb</td>
<td style="text-align: center;">bbb</td>
</tr>
</tbody>
</table>
</details>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">class</span>=<span class="string">&quot;note primary no-icon&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>总体介绍<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span> <span class="comment">&lt;!--hexo这里css文件似乎有问题，无法指定格式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span> <span class="attr">style</span>=<span class="string">&quot;text-align: left;&quot;</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>栏目1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>栏目2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>栏目3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;odd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;even&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;odd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>可扩展标记语言XML学习记录</title>
    <url>/2022/08/01/%E5%AD%A6%E4%B9%A0/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80XML%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>更新日志：</p>
<ul>
<li>2022-08-02 完成了“XML基础”的更新<span id="more"></span></li>
</ul>
<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>EXtensible Markup Language，XML被设计用来传输和存储数据，HTML被设计用来显示数据。</p>
<h2 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h2><h3 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h3><ul>
<li>XML文本内容是以标签描述的数据信息</li>
<li>XML标签不是预先定义的，以纯文本格式进行存储，独立于软件和硬件，便于在不兼容的系统之间交换数据（这依赖于针对具体XML格式编写的程序）</li>
<li>通过XML可以把数据从HTML中分离（这需要使用JS来读取XML文档）</li>
<li>XML用于创建新的Internet语言：<ul>
<li>WSDL - 用于描述可用的 web service </li>
<li>RSS - 用于 RSS feed 的语言</li>
</ul>
</li>
</ul>
<h3 id="XML树结构"><a href="#XML树结构" class="headerlink" title="XML树结构"></a>XML树结构</h3><p>XML以数结构组织数据内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><span class="comment">&lt;!-- XML声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span> <span class="comment">&lt;!-- 根元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;COOKING&quot;</span>&gt;</span> <span class="comment">&lt;!-- 一级子元素，指定&quot;category&quot;自定义？属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span>     <span class="comment">&lt;!-- 二级子元素，指定&quot;lang&quot;自定义？属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span>  <span class="comment">&lt;!-- 二级子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> <span class="comment">&lt;!-- 二级子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span>  <span class="comment">&lt;!-- 二级子元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">&quot;CHILDREN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="XML基本语法"><a href="#XML基本语法" class="headerlink" title="XML基本语法"></a>XML基本语法</h3><ul>
<li>所有XML元素必须有关闭标签；声明部分不属于XML本身，不需要关闭标签</li>
<li>标签对大小写敏感</li>
<li>必须要有根元素</li>
<li>属性值必须加引号，如<note id="07">xxx</note></li>
<li>部分特殊符号需要使用实体引用来替代<table>
<thead>
<tr>
<th>实体引用</th>
<th>特殊符号</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;lt;</td>
<td>&lt;</td>
</tr>
<tr>
<td>&amp;gt;</td>
<td>&gt;</td>
</tr>
<tr>
<td>&amp;amp;</td>
<td>&amp;</td>
</tr>
<tr>
<td>&amp;apos;</td>
<td>&#39;</td>
</tr>
<tr>
<td>&amp;quot;</td>
<td>&quot;</td>
</tr>
</tbody></table>
  在XML中，直接使用 &lt; 和 &amp; 确实是非法的，直接使用 &gt; 是合法的，但使用实体引用代替是个好习惯 </li>
<li>注释语法  &lt;!– xxx –&gt;</li>
<li>XML中多个空格会被保留，HTML则会把连续多个空格合并为一个</li>
<li>XML以LF(换行符)表示新行</li>
</ul>
<h3 id="XML元素和XML属性"><a href="#XML元素和XML属性" class="headerlink" title="XML元素和XML属性"></a>XML元素和XML属性</h3><ul>
<li>元素命名避免 -  .  :  等字符，支持下划线</li>
<li>元素可扩展，扩展元素后的XML文档能够适应旧XML文档</li>
<li>在XML中，除了 id&#x3D;’07’ 此类源数据应当存储为属性，其余数据应避免成为属性</li>
<li>可以拆分的元素应拆分成子元素，如以下代码：  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">day</span>&gt;</span>02<span class="tag">&lt;/<span class="name">day</span>&gt;</span>       <span class="comment">&lt;!-- date=&#x27;2022/08/02&#x27;拆分为年月日三个子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">month</span>&gt;</span>08<span class="tag">&lt;/<span class="name">month</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2022<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>属性值必须加引号，单引号双引号均可；如果属性值本身包含双引号，那么必须用单引号包围它（或使用实体引用）</li>
</ul>
<h3 id="XML验证"><a href="#XML验证" class="headerlink" title="XML验证"></a>XML验证</h3><p>W3C 的 XML 规范声明：如果 XML 文档存在错误，那么程序就不应当继续处理这个文档。理由是，XML 软件应当轻巧，快速，具有良好的兼容性。<br>如果浏览器打开了某个有错误的 XML 文件，那么它会报告错误</p>
<p>XML文档可以声明用来遵守文档类型定义（DTD，Document Type Definition）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;Note.dtd&quot;</span>&gt;</span> <span class="comment">&lt;!-- DOCTYPE声明是对外部DTD文件的引用,其中note.dtd是自定义的DTD文件 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>此外，W3C 支持一种基于 XML 的 DTD 代替者，它名为 XML Schema：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3school.com.cn&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.w3school.com.cn note.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  对XML Schema 的引用，其中note.xsd是自定义的XML Schema文件 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="XML-JavaScript"><a href="#XML-JavaScript" class="headerlink" title="XML JavaScript"></a>XML JavaScript</h2><h3 id="XML-Http-Request"><a href="#XML-Http-Request" class="headerlink" title="XML Http Request"></a>XML Http Request</h3><p>XMLHttpRequest对象用于在后台与服务器交换数据，它能够:</p>
<ul>
<li>在不重新加载页面的情况下更新网页</li>
<li>在页面已加载后从服务器请求数据</li>
<li>在页面已加载后从服务器接收数据</li>
<li>在后台向服务器发送数据</li>
</ul>
<h2 id="XML-进阶内容"><a href="#XML-进阶内容" class="headerlink" title="XML 进阶内容"></a>XML 进阶内容</h2><h1 id="SOAP——基于XML的建议协议"><a href="#SOAP——基于XML的建议协议" class="headerlink" title="SOAP——基于XML的建议协议"></a>SOAP——基于XML的建议协议</h1><p>SOAP 是基于 XML 的简易协议，可使应用程序在 HTTP 之上进行信息交换<br><strong>什么是 SOAP？</strong></p>
<ul>
<li>SOAP 指简易对象访问协议</li>
<li>SOAP 是一种通信协议</li>
<li>SOAP 用于应用程序之间的通信</li>
<li>SOAP 是一种用于发送消息的格式</li>
<li>SOAP 被设计用来通过因特网进行通信</li>
<li>SOAP 独立于平台</li>
<li>SOAP 独立于语言</li>
<li>SOAP 基于 XML</li>
<li>SOAP 很简单并可扩展</li>
<li>SOAP 允许您绕过防火墙</li>
<li>SOAP 将被作为 W3C 标准来发展</li>
</ul>
<h3 id="SOAP语法"><a href="#SOAP语法" class="headerlink" title="SOAP语法"></a>SOAP语法</h3><p>一条SOAP消息就是一个普通的XML文档，包含以下元素:</p>
<ul>
<li>必要的 Envelope 元素，可把此 XML 文档标识为一条 SOAP 消息</li>
<li>可选的 Header 元素，包含头部信息</li>
<li>必要的的 Body 元素，包含所有的调用和响应信息</li>
<li>可选的 Fault 元素，提供有关在处理此消息所发生错误的信息</li>
<li>不能包含 DTD 引用</li>
<li>不能包含 XML 处理指令</li>
</ul>
<p>所有以上的元素均被声明于针对 SOAP 封装的默认命名空间中：<a href="http://www.w3.org/2001/12/soap-envelope">http://www.w3.org/2001/12/soap-envelope</a><br>以及针对 SOAP 编码和数据类型的默认命名空间：<a href="http://www.w3.org/2001/12/soap-encoding">http://www.w3.org/2001/12/soap-encoding</a></p>
<p>SOAP消息基本结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:soap</span>=<span class="string">&quot;http://www.w3.org/2001/12/soap-envelope&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">soap:encodingStyle</span>=<span class="string">&quot;http://www.w3.org/2001/12/soap-encoding&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Header</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">soap:Fault</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap:Fault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SOAP-Envelope-元素"><a href="#SOAP-Envelope-元素" class="headerlink" title="SOAP Envelope 元素"></a>SOAP Envelope 元素</h3><p>添加命名空间  xmlns:soap&#x3D;”<a href="http://www.w3.org/2001/12/soap-envelope&quot;">http://www.w3.org/2001/12/soap-envelope&quot;</a><br>添加编码方式属性  soap:encodingStyle&#x3D;”<a href="http://www.w3.org/2001/12/soap-encoding&quot;&gt;">http://www.w3.org/2001/12/soap-encoding&quot;&gt;</a></p>
<h3 id="SOAP-Header-元素"><a href="#SOAP-Header-元素" class="headerlink" title="SOAP Header 元素"></a>SOAP Header 元素</h3><p>如果 Header 元素被提供，则它必须是 Envelope 元素的第一个子元素。它可包含有关 SOAP 消息的应用程序专用信息（比如认证、支付等）</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>《自控力》阅读</title>
    <url>/2022/08/01/%E9%98%85%E8%AF%BB/%E3%80%8A%E8%87%AA%E6%8E%A7%E5%8A%9B%E3%80%8B%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<p>更新日志：</p>
<ul>
<li>2022-08-03 记录第一章到第三章的阅读体会</li>
</ul>
<span id="more"></span>

<h2 id="“我要做”、“我不要做”、“我想要”是意志力的三种力量。"><a href="#“我要做”、“我不要做”、“我想要”是意志力的三种力量。" class="headerlink" title="“我要做”、“我不要做”、“我想要”是意志力的三种力量。"></a>“我要做”、“我不要做”、“我想要”是意志力的三种力量。</h2><p>这三种力量在生理上有迹可循，由大脑前额灰质的三个区域掌控。</p>
<p>大脑保存了原始生存本能，比如，在原始社会，爱吃甜食和暴饮暴食可能是因为多储存脂肪能更容易生存下去，爱偷懒睡觉可能是为了节省能量，以备不测。这些原始生存本能显然已经不能适应现代社会了。</p>
<p>自控的过程，一定程度上是意志力三种力量和不适应现代社会的原始生存本能之间的对抗，是理性的自我和冲动的自我的对抗。冲动的自我希望你放弃思考，遵循本能行动：比如看到美味的蛋糕，大脑会释放多巴胺，通过某些化学反应降低血糖，从而让身体强烈的希望你摄入糖分。此时并不是真正地缺少能量。<br>理性的自我则会让你思考，你“要做什么”、“不要做什么”、“想要做什么”。</p>
<h3 id="意志力挑战的第一法则是：认识自己"><a href="#意志力挑战的第一法则是：认识自己" class="headerlink" title="意志力挑战的第一法则是：认识自己"></a>意志力挑战的第一法则是：认识自己</h3><p>意识到、认识到自己当前正在做选择，让理性的自我参与“选择”，避免让冲动本能直接决定结果。<br>这部分难点在于，注意力很容易被分散，比如商场的大喇叭和吵闹音乐就是让你分散注意力，让你难以集中注意力思考；看到美味蛋糕，身体通过一系列生理反应降低血糖，也让你难以集中注意力思考。它们让你在做决定时没有意识到，自己正在做出抉择。</p>
<h3 id="“认识自己”的方法："><a href="#“认识自己”的方法：" class="headerlink" title="“认识自己”的方法："></a>“认识自己”的方法：</h3><p>可以做出标记提醒自己要做出抉择，可以在冰箱上贴上标签，明确告知自己此处将会发生意志力挑战。<br>人的大脑会一定程度上适应训练，训练大脑增强专注力是可行的。书中提供的方法是每天冥想5分钟。</p>
<h2 id="面对“诱惑”需要”三思而后行”"><a href="#面对“诱惑”需要”三思而后行”" class="headerlink" title="面对“诱惑”需要”三思而后行”"></a>面对“诱惑”需要”三思而后行”</h2><p>书中举了两种“威胁”，一个是剑齿虎，一个是草莓奶酪蛋糕。剑齿虎是直接威胁，身体直接感知并认定为威胁，这与你的理性认知一致；草莓奶酪蛋糕是间接威胁，你的理性认知中会把它当作间接威胁，但是你的身体却会把它当作“多多益善”的资源。</p>
<p>看到剑齿虎会让人产生应激反应，阻止你的前额皮质发挥作用，呼吸加粗血流加大，能量会进入血液，集中所有能量用于身体力量的管理；哪怕一瞬间做出的决定不是最佳策略，大脑也没有多余的能量让你重新思考。举个例子：</p>
<p>学校里有人在转角处扔出来一只玩具大老虎，尽管我知道这是在学校里，周围也有很多同学，但这些疑问仅仅是一闪而过，我大脑一瞬间的想法是“别管了，盯住这只老虎”，然后身体处于备战状态，死死盯住这只玩具老虎。</p>
<p>看到草莓奶酪蛋糕，则大脑会释放多巴胺，通过复杂化学反降低血糖，那么身体就会强烈希望你去摄取糖分，吃下这个蛋糕。此时你能够面对的敌人是内心。面对草莓奶酪蛋糕，我们需要“三思而后行”，“心率变异度”则是衡量能否有效进行思考的生理学测量指标。疼痛、压力、焦虑、垃圾食品、糟糕的空气都会影响心率变异度。</p>
<h3 id="提高“心率变异度”的方法："><a href="#提高“心率变异度”的方法：" class="headerlink" title="提高“心率变异度”的方法："></a>提高“心率变异度”的方法：</h3><p>除了主动集中注意力，尝试思考意外，我们还需要外力来帮助降低心率变异度（较低的有助于自控）。改善心情、健康良好的饮食、放松身心都可以降低心率变异度；此外充足的睡眠能够也能有所帮助，因为睡眠不足会影响葡萄糖吸收，降低你的血糖。</p>
<h2 id="自控力和肌肉一样有极限"><a href="#自控力和肌肉一样有极限" class="headerlink" title="自控力和肌肉一样有极限"></a>自控力和肌肉一样有极限</h2><p>意志力有“肌肉一样的模式”:<br>    - 长时间的使用会无力<br>    - 睡一觉或睡几觉会恢复<br>    - 有节制地使用和锻炼会增强力量<br>    - 拥有潜能，可以在某些条件下激发，如“加油”<br>    - 避免“意志力肌肉拉伤”</p>
<p>这四点特性要求我们有方向地锻炼意志力，除了锻炼自己地意志力意外，还要合理利用当前的意志力。</p>
<p><strong>长时间使用会无力，它的对策是合理分配意志力能量。</strong>要先做消耗“力量”的，再做消耗“耐力”的。比如，做完引体向上后能有余力再跑一千五百米，但是跑完一千五百米后却没有余力再做引体向上（适用于体能一般的人，比我如）。在意志力仍有余力地时候，人总是会不自觉地加大投入以完善当前任务，哪怕它可能不需要太多意志力地投入。此外琐事也可能大量消耗你的意志力，不要在它们上面重复消耗你的意志力，有序地处理可以避免因琐事“失控”（有时不得不立刻处理它们，此时希望你尽量保持内心平静吧）。</p>
<p><strong>休息后意志力会恢复，以及锻炼会增强意志力，这两点特性告诉我们，勤于锻炼意志力（尽管锻炼过程中会消耗意志力）而不必过度担忧意志力的丧失。</strong>当然，锻炼意志力需要你合理分配意志力能量，当留有你需要集中精力去处理的事务的时候，应该避免任何意志力的消耗。锻炼意志力需要你在“不会失控”的环境中进行，平时做些“微小的自控力锻炼”也是很有效的方法，它们对自控力的消耗微乎其微但却能有效锻炼，比如每天起床时用左手打开房门，不说特定语句的脏话（当然全都不说最好，但这或许有些难度），这些事情消耗的仅仅是当下一瞬间的意志力，因为你从意识到到抉择完毕只需要一瞬间，甚至习惯后后不需要消耗意志力，又培养了一个好习惯。</p>
<p>接下来会探讨意志力有类似肌肉模式的原因，了解原因后，你会对激发意志力潜能和避免“意志力肌肉拉伤”有更加深入的了解。</p>
<p>回想一下你沉下心，专注学习的过程，起初你全神贯注，对书中任何一个问题都进行仔细地分析；学习一段时间后（也许时半小时，也许是两个小时），你会发现脑袋有些难受，你告诉自己专注专注，可是看了一会书，不自觉的又发起呆来。此时你应该很想吃些甜食，或者打会游戏放松一下，但理智的你告诉自己，一旦松懈下来，今天就再也无法再静下心看书了。这本书的作者的所了解的研究表明，大脑专注学习时消耗的能量远不如运动时消耗的能量，但是为什么你的大脑会出现“能量短缺”？</p>
<p>因为大脑在自作主张地帮你管理能量，它是个小气鬼，一旦发现能量有流失的趋势，就开始削减预算。就像银行一样，资金充裕就会始放贷（考虑长远利益），尽管有时候利率比较低，但它也想着不能浪费每一分每一秒，迫不及待地开始放贷。因此在“资金充裕”的时候，尽管大脑会谋划长期利益，也需要你考虑一下，到底给谁放贷收益更高，贷多少资金比较合适。银行在资金紧缩时，哪怕利益再高也不会放贷，因为一旦储备掏空就会面临破产，比起长远利益，保住当下更为重要。银行的这种行为符合“原始生存本能”，但是到了现代社会，银行所谓的“资金紧缩”并不是真正地紧缩，因为我们总是会按时吃饭来补充“能量资金”。所以我们要想办法让大脑多掏出一些“意志力储备资金”，有时候也需要适当补充“意志力”资金，给大脑一个资金充裕的印象，诱使大脑放贷（但这不是随意饮食的理由，暴饮暴食反而会冲垮你的意志力）。</p>
<p>书中给出的“适当补充意志力资金”的方法是，低血糖饮食。低血糖饮食给了大脑，这是不多但是长期的“能量”投资，这种方法或许会让大脑掏出更多比率的“意志力储备金”。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>python基本语法记录</title>
    <url>/2022/07/18/%E5%AD%A6%E4%B9%A0/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>更新日志：</p>
<ul>
<li>2022-08-23 完成官方文档上，教程部分的初步记录</li>
</ul>
<span id="more"></span>


<h1 id="Python教程文档整理"><a href="#Python教程文档整理" class="headerlink" title="Python教程文档整理"></a>Python教程文档整理</h1><h2 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h2><p>python源文件的开头建议指出调用解释器，声明默认编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: encoding -*-</span></span><br></pre></td></tr></table></figure>
<h2 id="Python数字、字符、列表速览"><a href="#Python数字、字符、列表速览" class="headerlink" title="Python数字、字符、列表速览"></a>Python数字、字符、列表速览</h2><h3 id="数字用于计算"><a href="#数字用于计算" class="headerlink" title="数字用于计算"></a>数字用于计算</h3><ol>
<li>运算符+、-、*、/(除法，返回浮点数)、//（除法，向下取整）、%、**(乘方)、&#x3D;  </li>
<li>混合运算中整数会自动转为float</li>
</ol>
<h3 id="字符串–immutable"><a href="#字符串–immutable" class="headerlink" title="字符串–immutable"></a>字符串–immutable</h3><ol>
<li>单引号与双引号标注结果相同，一般在单引号里使用双引号无需转义，反之亦然  </li>
<li>原始字符串标记r,在单引号或双引号面前添加r即可   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r&#x27;C:\some\name&#x27;</span>)</span><br><span class="line">C:\some\name</span><br></pre></td></tr></table></figure></li>
<li>字符串与字符串，字符串与变量可以使用 +  *  运算符拼合 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>prefix = <span class="string">&#x27;Py_&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>prefix + <span class="number">3</span> * <span class="string">&#x27;un&#x27;</span> + <span class="string">&#x27;ium&#x27;</span></span><br><span class="line"><span class="string">&#x27;Py_unununium&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>字符串也可以使用空符分隔来合并，这一功能在拆分长字符串换行显示是特别有用；但不能用于变量和字符串的合并 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = (<span class="string">&#x27;Put several strings within parentheses &#x27;</span></span><br><span class="line"><span class="meta">... </span>        <span class="string">&#x27;to have them joined together.&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">&#x27;Put several strings within parentheses to have them joined together.&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>字符串支持索引，索引从0开始，支持负数索引，负数索引中0和-0一样</li>
<li>字符串支持切片，形如 word[start:end]，若省略start的默认0，省略end则默认len(word);切片越界会自动处理，但索引会报错</li>
</ol>
<h3 id="列表–sequence，mutable"><a href="#列表–sequence，mutable" class="headerlink" title="列表–sequence，mutable"></a>列表–sequence，mutable</h3><ol>
<li>方括号分隔，元素之间使用逗号隔开，列表内元素可以不同类型，元素可以是列表</li>
<li>支持索引和切片，列表是mutable类型，可以通过索引和切片改变内容</li>
<li>支持使用 + 合并列表，支持list.append(e)添加元素，支持使用切片赋值、扩展、缩小、情况列表 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>] <span class="comment">#使用切片扩展列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters[:<span class="number">0</span>]=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>letters</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="基本编程语句"><a href="#基本编程语句" class="headerlink" title="基本编程语句"></a>基本编程语句</h3><ol>
<li>条件值判断标准：Python 和 C 一样，任何非零整数都为真，零为假。这个条件也可以是字符串或列表的值，事实上，任何序列都可以；长度非零就为真，空序列则为假。</li>
<li>print()函数输出给定参数的值，能实现格式化操作 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">256</span>*<span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;The value of i is&#x27;</span>, i)   <span class="comment"># 指定参数i</span></span><br><span class="line">The value of i <span class="keyword">is</span> <span class="number">65536</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">256</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a, end=<span class="string">&#x27;,&#x27;</span>)   <span class="comment"># end替换默认换行符</span></span><br><span class="line">a,</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="其他流程控制工具"><a href="#其他流程控制工具" class="headerlink" title="其他流程控制工具"></a>其他流程控制工具</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数: &quot;</span>))</span><br><span class="line">Please enter an integer: <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;负数&#x27;</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">elif</span> :</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;非负&#x27;</span>)</span><br><span class="line">如果要把一个值与多个常量进行比较，或者检查特定类型或属性，match 语句更实用。</span><br></pre></td></tr></table></figure>

<h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = &#123;<span class="string">&#x27;Hans&#x27;</span>: <span class="string">&#x27;active&#x27;</span>, <span class="string">&#x27;Éléonore&#x27;</span>: <span class="string">&#x27;inactive&#x27;</span>, <span class="string">&#x27;景太郎&#x27;</span>: <span class="string">&#x27;active&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#若存在修改集合的操作，迭代时应该使用集合的副本进行遍历</span></span><br><span class="line"><span class="keyword">for</span> user, status <span class="keyword">in</span> users.copy().items():   </span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">&#x27;inactive&#x27;</span>:</span><br><span class="line">        <span class="keyword">del</span> users[user]</span><br></pre></td></tr></table></figure>

<h3 id="range-函数-–-range可以生成list序列，但迭代时返回可迭代对象"><a href="#range-函数-–-range可以生成list序列，但迭代时返回可迭代对象" class="headerlink" title="range() 函数 – range可以生成list序列，但迭代时返回可迭代对象"></a>range() 函数 – range可以生成list序列，但迭代时返回可迭代对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>range可以不从0开始，可以指定步长，以下几种都是range()函数的正确用法:</p>
<ul>
<li>range(10)             # 等价于range(0,10)</li>
<li>range(4,len(list))    # 可以与len结合，但一般enumerate() 函数更便捷</li>
<li>range(1,10,3)  </li>
<li>range(-10,-100,-30)</li>
<li>sum(range(4))         # 0+1+2+3</li>
</ul>
<p>range() 返回对象的操作和列表很像，但其实这两种对象不是一回事。<strong>迭代时</strong>，该对象基于所需序列返回可迭代对象 iterable，函数或程序结构可通过该对象获取连续项，直到所有元素全部迭代完毕。<br>for 语句就是这样的架构，sum() 是一种把可迭代对象作为参数的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">4</span>))  <span class="comment"># 0 + 1 + 2 + 3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="循环中break、continue、else子句"><a href="#循环中break、continue、else子句" class="headerlink" title="循环中break、continue、else子句"></a>循环中break、continue、else子句</h3><p>break、continue借鉴自C，break用于终止本层循环，continue用于跳过本层循环当前迭代。<br>在python中，else除了可以用于if-else，可也用于for-else，在未运行break时执行else子句。<br>（for-else也许没有实用价值）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">7</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(n, <span class="string">&#x27;=&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n//x)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(n, <span class="string">&#x27;is a prime number&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="number">2</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">3</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">4</span> = <span class="number">2</span> * <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">6</span> = <span class="number">2</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h3><p>pass 语句不执行任何操作。语法上需要一个语句，但程序不实际执行任何动作时，可以使用该语句。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建了最小的类</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">MyEmptyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">#用作函数或条件子句的占位符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initlog</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">pass</span>   </span><br></pre></td></tr></table></figure>

<h3 id="match语句"><a href="#match语句" class="headerlink" title="match语句"></a>match语句</h3><p>match语句的匹配，有字面值模式、变量模式、以及变量解包模式。</p>
<p>变量名 _ 被作为通配符比被匹配成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">case _:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;匹配失败&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>字面值模式中，一个匹配项可以使用 | 或者 or 来组合多个字面值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">case <span class="number">401</span> | <span class="number">403</span> | <span class="number">404</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;不允许访问&quot;</span></span><br></pre></td></tr></table></figure>

<p>变量解包模式，可以嵌套匹配，如匹配列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    x: <span class="built_in">int</span></span><br><span class="line">    y: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">where_is</span>(<span class="params">point</span>):</span><br><span class="line">    match point:</span><br><span class="line">        case Point(x=<span class="number">0</span>, y=<span class="number">0</span>):               <span class="comment">#Point解析，匹配x，y都为0</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;原点&quot;</span>)               </span><br><span class="line">        case Point(x=<span class="number">0</span>, y=y):               <span class="comment">#Point解析，匹配x==0，捕获并y</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Y=<span class="subst">&#123;y&#125;</span> 这个点在Y轴上&quot;</span>)</span><br><span class="line">        case Point(x=x, y=<span class="number">0</span>):               <span class="comment">#Point解析，捕获x，匹配y==0</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;X=<span class="subst">&#123;x&#125;</span> 这个点在X轴上&quot;</span>)</span><br><span class="line">        case Point():                       <span class="comment">#Point解析，匹配Point类型</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;这个点位于平面其他位置&quot;</span>)</span><br><span class="line">        case [Point(<span class="number">0</span>,y1),Point(<span class="number">0</span>,y2)]      <span class="comment">#Point列表解析，y1，y2被赋值</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;两点位于Y轴的<span class="subst">&#123;y1&#125;</span>,<span class="subst">&#123;y2&#125;</span>位置&quot;</span>)   </span><br><span class="line">        case _:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;不是点类型&quot;</span>)</span><br><span class="line"></span><br><span class="line">location(Point(<span class="number">0</span>,<span class="number">3</span>))    <span class="comment">#输出 &quot;Y=3 这个点在Y轴上&quot;</span></span><br><span class="line">location([Point(<span class="number">0</span>,<span class="number">6</span>),Point(<span class="number">0</span>,<span class="number">7</span>)])    <span class="comment">#输出 &quot;两点位于Y轴的6，7位置&quot;</span></span><br></pre></td></tr></table></figure>

<p>添加守护项if，如果守护项为假，则match继续匹配下一个语句块。值的捕获发生在守护项被求值之前。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">match point:</span><br><span class="line">    case Point(x, y) <span class="keyword">if</span> x == y:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Y=X at <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">    case Point(x, y):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;不在斜线上&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其他match特性：<br>    - 元组和列表模式的匹配，但不能匹配迭代器或字符串<br>    - 序列模式支持扩展解包操作<br>    - 映射模式<br>    - 使用as关键字<br>    - 模式使用命名常量enum类型</p>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>函数内的第一条语句是字符串时，该字符串就是文档字符串，也称为 docstring</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):  <span class="comment"># return Fibonacci series up to n</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">&quot;&quot;&quot;返回斐波那契数列（文档字符串）&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">... </span>    result = []</span><br><span class="line"><span class="meta">... </span>    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> a &lt; n:</span><br><span class="line"><span class="meta">... </span>        result.append(a)    <span class="comment"># see below</span></span><br><span class="line"><span class="meta">... </span>        a, b = b, a+b</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f100 = fib2(<span class="number">100</span>)    <span class="comment"># call it</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f100                <span class="comment"># write the result</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br></pre></td></tr></table></figure>

<p>定义符号作为函数名指向函数对象，解释器把函数名指向的对象作为用户自定义函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib</span><br><span class="line">&lt;function fib at 10042ed0&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">100</span>)</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span></span><br></pre></td></tr></table></figure>

<h2 id="函数定义详解"><a href="#函数定义详解" class="headerlink" title="函数定义详解"></a>函数定义详解</h2><h3 id="默认值参数、关键字参数、位置参数"><a href="#默认值参数、关键字参数、位置参数" class="headerlink" title="默认值参数、关键字参数、位置参数"></a>默认值参数、关键字参数、位置参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ask_ok</span>(<span class="params">prompt,retries=<span class="number">4</span>,reminder=<span class="string">&#x27;default_c&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ok = <span class="built_in">input</span>(prompt)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;ye&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>):    <span class="comment">#关键字 in 用于确认序列中是否包含某个值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">in</span> (<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;no&#x27;</span>, <span class="string">&#x27;nop&#x27;</span>, <span class="string">&#x27;nope&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        retries = retries - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> retries &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;invalid user response&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(reminder)</span><br></pre></td></tr></table></figure>
<p>其中 retries 和 reminder 设置了默认值参数，调用 ask_ok 时可以按序省略参数，但不能跳过省略。  </p>
<p>函数的默认值参数是在，形如 def f(arg&#x3D;i) 中的，默认值只计算一次，轮到<strong>定义</strong>这个函数时就永远决定好的。<br>所以:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">arg=i</span>):    <span class="comment">#在这一步，arg的默认参数永远决定为是 5</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(arg)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><strong>重要警告</strong>默认值只计算一次。但是当默认值为列表、字典、或者类实例等可变对象时，会产生“不同结果”。例如下面默认值为列表，则每次调用都会积累传递参数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,L=[]</span>):       </span><br><span class="line"><span class="meta">... </span>    L.append(a)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> L</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f(<span class="number">1</span>))</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f(<span class="number">2</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f(<span class="number">3</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>基于默认值“只计算一次”的原理，可知L初始化为列表时，就被赋予了一个“列表制作（也许描述不够准确）”，因此列表调用append方法会积累后续调用参数。如果不想在后续调用之间共享默认值，应该在函数内部来初始化一个列表，这样列表区域的生存时间到函数结束为止。</p>
<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>在调用含有默认值参数的函数时，可以指出参数名，包括非默认值参数。<br>一旦使用关键字参数形式调用函数，所有调用的默认值参数都必须指出参数名，也不能对同一个参数名多次赋值；如果非默认值参数不是前排位置，也必须要指出参数名。  </p>
<p>对于含有元组参数，字典参数的函数，调用参数中的元组元素和字典元素可以平铺出来:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cheeseshop</span>(<span class="params">kind, *arguments, **keywords</span>):   <span class="comment"># 第二个参数为元组，第三个参数为字典</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#元组参数和字典参数可以平铺出来调用</span></span><br><span class="line">cheeseshop(<span class="string">&quot;Limburger&quot;</span>, </span><br><span class="line">            <span class="string">&quot;It&#x27;s very runny, sir.&quot;</span>,            <span class="comment"># 元组arguments第1个元素</span></span><br><span class="line">           <span class="string">&quot;It&#x27;s really very, VERY runny, sir.&quot;</span>,<span class="comment"># 元组arguments第2个元素</span></span><br><span class="line">           shopkeeper=<span class="string">&quot;Michael Palin&quot;</span>,      <span class="comment"># 字典keywords第1个元素</span></span><br><span class="line">           client=<span class="string">&quot;John Cleese&quot;</span>,            <span class="comment"># 字典keywords第2个元素</span></span><br><span class="line">           sketch=<span class="string">&quot;Cheese Shop Sketch&quot;</span>)     <span class="comment"># 字典keywords第3个元素</span></span><br></pre></td></tr></table></figure>


<h3 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h3><p>比较规范的函数定义方式如下：<br>def f(pos1, pos2, &#x2F;, pos_or_kwd, *, kwd1, kwd2):<br>      ———–    ———-     ———-<br>        |               |                |<br>        |         位置或关键字参数         |<br>        |                                 |<br>  仅仅是位置参数                     仅仅是关键字参数</p>
<p>特殊参数 / 和 * 是可选的，这两个符号表明形参如何把参数值传递给函数。<br>在可能存在歧义的地方。<br>如以下代码，kwds 把 name 当作键，关键字 ‘name’ 又与第一个形参绑定：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name, **kwds</span>):</span><br><span class="line">···    <span class="keyword">return</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwds</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>, **&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: foo() got multiple values <span class="keyword">for</span> argument <span class="string">&#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>
<p>因为这种调用方法等同于 foo(name&#x3D;1, name&#x3D;2) ,这里第一个是位置参数制定了参数名的形式，第二个是 kwds 里的键名</p>
<p>加上特殊参数后，函数定义会把 name 当作位置参数，’name’ 也可以作为关键字参数的键</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">name, /, **kwds</span>):</span><br><span class="line">···    <span class="keyword">return</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> kwds</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">1</span>, **&#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>


<h3 id="任意实参列表"><a href="#任意实参列表" class="headerlink" title="任意实参列表"></a>任意实参列表</h3><p>函数定义时，可以使用“固定数量形参+形参列表(形如*args **args)”。<br>调用时要求独立给出参数,即一个一个给出实参列表中的每一个元素，然后 *args 和 **args 会按照规则收集这些实参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_multiple_items</span>(<span class="params">file, separator, *args</span>):</span><br><span class="line">    file.write(separator.join(args))</span><br></pre></td></tr></table></figure>
<p>尾部的 *args 会收集调用时的所有剩余参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">concat</span>(<span class="params">*args, sep=<span class="string">&quot;/&quot;</span></span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> sep.join(args)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>concat(<span class="string">&quot;earth&quot;</span>, <span class="string">&quot;mars&quot;</span>, <span class="string">&quot;venus&quot;</span>)</span><br><span class="line"><span class="string">&#x27;earth/mars/venus&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>concat(<span class="string">&quot;earth&quot;</span>, <span class="string">&quot;mars&quot;</span>, <span class="string">&quot;venus&quot;</span>, sep=<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;earth.mars.venus&#x27;</span></span><br></pre></td></tr></table></figure>
<p>*args 会自动收集实参；在实参列表后的位置参数或默认参数，调用时需要指定参数名</p>
<h3 id="解包实参列表"><a href="#解包实参列表" class="headerlink" title="解包实参列表"></a>解包实参列表</h3><p>对于定义时，指定了形如 *args  **args的参数，调用时可以对元组类型或字典类型解包，把他们变成独立的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = [<span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(*args))</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>这种调用方法把元组类型args&#x3D;[3,6] 解包成两个参数 3和6 ，效果等同于 range(3, 6)</p>
<p>同样地，也可以对字典类型解包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parrot</span>(<span class="params">voltage, state=<span class="string">&#x27;a stiff&#x27;</span>, action=<span class="string">&#x27;voom&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">d = &#123;<span class="string">&quot;voltage&quot;</span>: <span class="string">&quot;four million&quot;</span>, <span class="string">&quot;state&quot;</span>: <span class="string">&quot;bleedin&#x27; demised&quot;</span>, <span class="string">&quot;action&quot;</span>: <span class="string">&quot;VOOM&quot;</span>&#125;</span><br><span class="line">parrot(**d)</span><br></pre></td></tr></table></figure>
<p>这种调用方法等同于 parrot(voltage&#x3D;”four million”, state&#x3D;”bleedin’ demised”, action&#x3D;”VOOM”)</p>
<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>此处不记述。自认为，在python中，使用lambda的场合较少。</p>
<h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><p>function.<strong>doc</strong> 属性返回函数的文档字符串</p>
<p>下面是多行文档字符串的一个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line"><span class="meta">... </span>    <span class="string">&quot;&quot;&quot;Do nothing, but document it.</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    No, really, it doesn&#x27;t do anything.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(my_function.__doc__)</span><br><span class="line">Do nothing, but document it.</span><br><span class="line"></span><br><span class="line">    No, really, it doesn<span class="string">&#x27;t do anything.</span></span><br></pre></td></tr></table></figure>
<p>第一行应为对象用途的简短摘要,以大写字母开头，以句点结尾;文档字符串为多行时，第二行应为空白行，在视觉上将摘要与其余描述分开。</p>
<h3 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h3><p>函数注解是可选的用户自定义函数类型的元数据完整信息。<br>标注以字典的形式存放在函数的 <strong>annotations</strong> 属性中：</p>
<ul>
<li>形参标注的定义方式是在形参名后加冒号，后面跟一个表达式，该表达式会被求值为标注的值</li>
<li>返回值标注的定义方式是加组合符号 -&gt;，后面跟一个表达式，该标注位于形参列表和表示 def 语句结束的冒号之间</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">ham: <span class="built_in">str</span>, eggs: <span class="built_in">str</span> = <span class="string">&#x27;eggs&#x27;</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;Annotations:&quot;</span>, f.__annotations__)</span><br><span class="line">···     <span class="keyword">return</span> ham + <span class="string">&#x27; and &#x27;</span> + eggs</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="string">&#x27;spam&#x27;</span>)</span><br><span class="line">Annotations: &#123;<span class="string">&#x27;ham&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, <span class="string">&#x27;return&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;, <span class="string">&#x27;eggs&#x27;</span>: &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;&#125;</span><br><span class="line"><span class="string">&#x27;spam and eggs&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h2><p>Python 项目大多都遵循以下风格:</p>
<ul>
<li>缩进，用 4 个空格，不要用制表符。</li>
<li>4 个空格是小缩进（更深嵌套）和大缩进（更易阅读）之间的折中方案。制表符会引起混乱，最好别用。</li>
<li>换行，一行不超过 79 个字符。</li>
<li>用空行分隔函数和类，及函数内较大的代码块。</li>
<li>最好把注释放到单独一行。</li>
<li>使用文档字符串。</li>
<li>运算符前后、逗号后要用空格，但不要直接在括号内使用： a &#x3D; f(1, 2) + g(3, 4)。</li>
<li>类和函数的命名要一致；按惯例，命名类用 UpperCamelCase，命名函数与方法用 lowercase_with_underscores。命名方法中第一个参数总是用 self (类和方法详见 初探类)。</li>
<li>编写用于国际多语环境的代码时，不要用生僻的编码。Python 默认的 UTF-8 或纯 ASCII 可以胜任各种情况。</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="列表详解"><a href="#列表详解" class="headerlink" title="列表详解"></a>列表详解</h3><p>方法,形如(<em>x,[i]</em>)的参数，表示 i 为可选参数:</p>
<ul>
<li>list.append(<em>x</em>)      尾部添加一个元素</li>
<li>list.extend(<em>iterable</em>) 使用可迭代对象的元素扩展列表，相当于 a[len(a):]&#x3D;iterable</li>
<li>list.insert(<em>i,x</em>)    指定位置插入元素</li>
<li>list.remove(<em>x</em>)      删除列表中第一个值为x的元素；未找到则触发 ValueError异常</li>
<li>list.pop([<em>i</em>])     删除并返回指定位置元素，未指定位置时操作列表最后一个元素             </li>
<li>list.clear()          清空列表</li>
<li>list.index(<em>x, [start, [end]]</em>)   返回指定索引范围内第一个值为x的零基索引（返回的索引是基于整个list序列，而非start参数的），未找到则触发 ValueError 异常</li>
<li>list.count(<em>x</em>)       返回列表中x的出现次数</li>
<li>list.sort(<em>*, key&#x3D;None, reverse&#x3D;False</em>)    就地排序列表中的元素，；列表元素没有定义排序方法的，无法使用sort</li>
<li>list.reverse()        翻转列表元素</li>
<li>list.copy()           返回列表浅拷贝</li>
</ul>
<p>insert、remove、sort 、reverse等方法只修改列表（非副本），不返回列表对象，返回默认None，；pop方法仅仅是返回删除的元素，也不会返回列表对象。<br><strong>这是所有Python可变数据结构设计原则。</strong></p>
<h4 id="列表实现堆栈"><a href="#列表实现堆栈" class="headerlink" title="列表实现堆栈"></a>列表实现堆栈</h4><p>列表使用 append 和 pop 方法很容易实现堆栈。  </p>
<h4 id="不应该使用列表实现队列"><a href="#不应该使用列表实现队列" class="headerlink" title="不应该使用列表实现队列"></a>不应该使用列表实现队列</h4><p>列表实现队列的效率很低，最好使用 collections.deque (deque意思是“双向队列”)，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue = deque([<span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Michael&quot;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">&quot;Terry&quot;</span>)           </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">&quot;Graham&quot;</span>)          </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 </span><br><span class="line"><span class="string">&#x27;Eric&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 </span><br><span class="line"><span class="string">&#x27;John&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue                           </span><br><span class="line">deque([<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Terry&#x27;</span>, <span class="string">&#x27;Graham&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>列表推导式创建列表的方式更简洁，对序列或者可迭代对象中的每个元素应用某种操作，用生成的结果创建新的列表；或用满足特定条件的元素创建子序列。</p>
<p>使用可迭代对象，用满足条件的生成的结果创建新的临时列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意元组 (x, y) 必须加上括号</span></span><br><span class="line"><span class="comment">#如 [x, y for x in [1,2,3] for y in [3,1,4] if x != y] 会报语法错误</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure>

<p>用列表推导式生成的临时列表来创建列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure>

<h4 id="嵌套的列表推导式"><a href="#嵌套的列表推导式" class="headerlink" title="嵌套的列表推导式"></a>嵌套的列表推导式</h4><p>列表推导式中的初始表达式可以是另外一个列表推导式。</p>
<p>下面的列表推导式可以转置行列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>matrix = [</span><br><span class="line"><span class="meta">... </span>    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line"><span class="meta">... </span>    [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line"><span class="meta">... </span>    [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<p>它等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>transposed = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line"><span class="meta">... </span>    transposed.append([row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix])</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>transposed</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<p>实际一般使用内置函数zip来替代复杂的流程语句。</p>
<h4 id="内置函数-zip-替代复杂列表推导式"><a href="#内置函数-zip-替代复杂列表推导式" class="headerlink" title="内置函数 zip 替代复杂列表推导式"></a>内置函数 zip 替代复杂列表推导式</h4><p><strong>zip(<em>*iterables, strict&#x3D;False</em>)</strong><br>zip的第一个参数列表接收多个迭代对象，第二个参数strict用来限制可迭代对象长度是否相同，不相同会报错 ValueError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># zip方法把多个列表组合成一个元组列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>(x, y))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># zip(*zip(x, y)) 可以元组列表拆解成列表x和列表y</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 注意，这里的  zip(x, y) 表示的是一个(xi, yi)的元组列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x2, y2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(x, y))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == <span class="built_in">list</span>(x2) <span class="keyword">and</span> y == <span class="built_in">list</span>(y2)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h3 id="del-语句"><a href="#del-语句" class="headerlink" title="del 语句"></a>del 语句</h3><p>del 语句按索引、切片从列表删除元素，或者直接删除变量；pop方法仅能删除一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">0</span>]    <span class="comment"># 按索引删除元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">2</span>:<span class="number">4</span>]  <span class="comment"># 使用切片删除元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">66.25</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[:]    <span class="comment"># 清空列表元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a   <span class="comment"># 删除整个变量，此后再引用 a 就会报错</span></span><br></pre></td></tr></table></figure>


<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组由多个用逗号隔开的值组成。输入时，圆括号可有可无，不过经常是必须的(当元组是更大表达式的一部分)。例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>  <span class="comment"># 元组由多个用逗号隔开的值组成</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)      <span class="comment"># 元组可以嵌套</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u</span><br><span class="line">((<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<p>元组是immutable(不可变的)，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">0</span>] = <span class="number">88888</span>                <span class="comment"># 元组是不可变的</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure>
<p>不过列表可以作为元组的元素，我们不能在元组中修改列表对象，但是可以修改列表中的元素(因为存档在元组中的是列表的引用，修改列表中的元素并不会改变元组中的“物理内容”)</p>
<p>构建0个或1个元素的元组:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty = ()              <span class="comment"># 创建一个空元素元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>singleton = <span class="string">&#x27;hello&#x27;</span>,    <span class="comment"># 需要指定一个逗号，来明确这是一个元组</span></span><br></pre></td></tr></table></figure>


<p>元组解包:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y, z = t     <span class="comment"># 元组解包，序列解包时，左侧数量应该与右侧数量相等</span></span><br></pre></td></tr></table></figure>


<h3 id="集合-—-set-frozenset"><a href="#集合-—-set-frozenset" class="headerlink" title="集合 — set, frozenset"></a>集合 — set, frozenset</h3><p>集合有可变集合(set)和不可变集合(frozenset)<br>集合是由不重复元素组成的无序容器。基本用法包括成员检测、重复元素消除，还指出合集、交集、差集、对称差分等数学运算。</p>
<p>创建集合使用花括号或 set() 函数。注意，创建空集合只能使用 set() ,使用 {} 创建的是空字典。</p>
<p>成员检测和重复消除:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>basket = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(basket)                   <span class="comment"># 重复元素会删除</span></span><br><span class="line">&#123;<span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;orange&#x27;</span> <span class="keyword">in</span> basket              <span class="comment"># 成员检测</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>数学中的集合操作:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  <span class="comment"># a中字母</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># 差集</span></span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># 合集</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># 交集</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># 对称差分，等价于 (a-b)&amp;(b-a)</span></span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>集合也支持列表推导式创建:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>set方法有以下相关运算，注意，部分方法不适用于frozenset:</p>
<ul>
<li>x in s , x not in s</li>
<li>s &lt;&#x3D; other    检测集合s中每个元素是都在other之中</li>
<li>s.copy()      返回原集合的浅拷贝</li>
<li>s.updata(<em>*others</em>)  添加others中元素，注意解包的使用</li>
<li>s.add(<em>elem</em>)     添加新元素</li>
<li>s.remove(<em>elem</em>)  移除元素；如果集合不存在elem元素，在则引发 KeyError</li>
<li>s.discard(<em>elem</em>) 如果集合存在elem元素则将其移除</li>
<li>s.clear()     从集合删除所有元素</li>
</ul>
<h3 id="映射类型-—-dict-字典"><a href="#映射类型-—-dict-字典" class="headerlink" title="映射类型 — dict(字典)"></a>映射类型 — dict(字典)</h3><p>字典的键几乎可以是任值，非hashable的值，即包含列表、字典或其他可变类型的值不可用作键。<br><em>数字1和数字1.0可以用来引用同一条字典条目，但由于计算机对于浮点数的存储知识近似值，因此将其作为字典键是不明智的</em></p>
<h4 id="字典类型创建"><a href="#字典类型创建" class="headerlink" title="字典类型创建"></a>字典类型创建</h4><p>字典可以使用多种方式创建:</p>
<ul>
<li><p>花括号内以逗号分隔 key:val 对，如 {‘jack’: 4098, ‘sjoerd’: 4127}</p>
</li>
<li><p>使用字典推导式，如 {x: x ** 2 for x in range(10)}</p>
</li>
<li><p>使用类型构造器dict</p>
<p>class <strong>dict</strong>(<em>**kwargs</em>)<br>class <strong>dict</strong>(<em>mapping, **kwargs</em>)<br>class <strong>dict</strong>(<em>iterable, **kwargs</em>)</p>
</li>
</ul>
<p>以下演示几种创建字典的方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;    <span class="comment"># 使用花括号创建字典映射列表，并赋予a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>)         <span class="comment"># dict使用参数列表作为参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))   <span class="comment"># dict通过使用(keyi, vali)二元元组列表作为参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>([(<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;three&#x27;</span>, <span class="number">3</span>)])    <span class="comment"># dict (keyi, vali)二元元组列表作为参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = <span class="built_in">dict</span>(&#123;<span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>&#125;)          <span class="comment"># dict 参数是花括号表示的字典映射列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">dict</span>(&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;, two=<span class="number">2</span>)             <span class="comment"># dict 参数可以是花括号表示的字典映射列表和参数列表的混合</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b == c == d == e == f</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="字典类型常见操作"><a href="#字典类型常见操作" class="headerlink" title="字典类型常见操作"></a>字典类型常见操作</h4><p>字典支持的常见操作:</p>
<ul>
<li>list(d)       返回字典d中所有键的列表</li>
<li>d[key]        返回以 key 为键的项，不存在则引发 KeyError</li>
<li>d[key]&#x3D;val    新建或修改键值为 key 的项的值</li>
<li>key in d, key not in d</li>
<li>iter(d)       返回以字典的键为元素的迭代器，等价于 iter(d.keys())</li>
<li>d.items()     返回“键值对”动态视图；可以用作迭代器</li>
<li>d.key()       </li>
<li>d.values()</li>
<li>d.get(<em>key[, default]</em>)   返回键key对应的值，否则返回default；default默认None，不会引发KeyError</li>
<li>d.pop(<em>key[, default]</em>)   </li>
<li>d.popitem()   python3.7版本后以LIFO(后进先出)顺序弹出”键值对”，空则引发 KeyError</li>
</ul>
<h3 id="循环技巧-—-字典、集合"><a href="#循环技巧-—-字典、集合" class="headerlink" title="循环技巧 — 字典、集合"></a>循环技巧 — 字典、集合</h3><h4 id="字典中循环"><a href="#字典中循环" class="headerlink" title="字典中循环"></a>字典中循环</h4><p>在字典中循环时，用 items() 方法可以同时取出键、值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>knights = &#123;<span class="string">&#x27;gallahad&#x27;</span>: <span class="string">&#x27;the pure&#x27;</span>, <span class="string">&#x27;robin&#x27;</span>: <span class="string">&#x27;the brave&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> knights.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(k, v)</span><br><span class="line">...</span><br><span class="line">gallahad the pure</span><br><span class="line">robin the brave</span><br></pre></td></tr></table></figure>
<h4 id="序列中循环"><a href="#序列中循环" class="headerlink" title="序列中循环"></a>序列中循环</h4><p>在序列中循环时，用 enumerate 函数可以同时取出位置索引、值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;tic&#x27;</span>, <span class="string">&#x27;tac&#x27;</span>, <span class="string">&#x27;toe&#x27;</span>]):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, v)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> tic</span><br><span class="line"><span class="number">1</span> tac</span><br><span class="line"><span class="number">2</span> toe</span><br></pre></td></tr></table></figure>
<p>在多个序列中“同序”循环时，应该使用 zip 函数，将其内元素按索引顺序匹配:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>questions = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;quest&#x27;</span>, <span class="string">&#x27;favorite color&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>answers = [<span class="string">&#x27;lancelot&#x27;</span>, <span class="string">&#x27;the holy grail&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> q, a <span class="keyword">in</span> <span class="built_in">zip</span>(questions, answers):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;What is your &#123;0&#125;?  It is &#123;1&#125;.&#x27;</span>.<span class="built_in">format</span>(q, a)) </span><br><span class="line">...</span><br><span class="line">What <span class="keyword">is</span> your name?  It <span class="keyword">is</span> lancelot.</span><br><span class="line">What <span class="keyword">is</span> your quest?  It <span class="keyword">is</span> the holy grail.</span><br><span class="line">What <span class="keyword">is</span> your favorite color?  It <span class="keyword">is</span> blue.</span><br></pre></td></tr></table></figure>
<h4 id="指定顺序循环"><a href="#指定顺序循环" class="headerlink" title="指定顺序循环"></a>指定顺序循环</h4><p>逆向循环序列可以调用 reversed 函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>按指定顺序可以用 sorted 函数，返回一个排序好的副本而不改变原有序列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>basket = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="built_in">set</span>(basket)):   <span class="comment"># 其中特别使用 set 来去除重复元素</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">orange</span><br><span class="line">pear</span><br></pre></td></tr></table></figure>

<h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><p>while 和 if 的条件句可以配合以下运算符使用:</p>
<ul>
<li>in 、 not in      执行成员检测，确定一个对象是否存在于某个容器内</li>
<li>is 、 is not      用来比较两个对象是否是同一个对象</li>
<li>and 、 or         </li>
<li>:&#x3D;                海象运算符，在表达式内部赋值使用；这和C不同</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块是包含 Python 定义和语句的文件。其文件名是模块名加后缀名 .py ，在模块内部，通过全局变量 <strong>name</strong> 可以获取模块名字符串</p>
<h3 id="模块详解"><a href="#模块详解" class="headerlink" title="模块详解"></a>模块详解</h3><h4 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h4><p>模块包含可执行语句以及函数定义，仅会在 import语句第一次遇到时执行，除非某个模块作为脚本运行。<br>例如在当前目录下创建 fibo.py 文件，编辑好内容后，可以进入python解释器用以下命令导入该模块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br></pre></td></tr></table></figure>
<p>import 的几个使用方法:</p>
<ul>
<li>导入一整个模块(相当于执行一次模块文件)，如 import fibo</li>
<li>导入模块中的几个，或满足条件的函数，如 from fibo import fib1， fibo2</li>
<li>导入模块或函数，并用as名称绑定，如 from fibo import fib1 as fibonacci</li>
</ul>
<h4 id="以脚本方式执行模块"><a href="#以脚本方式执行模块" class="headerlink" title="以脚本方式执行模块"></a>以脚本方式执行模块</h4><p>命令行里输入 python fibo.py <arguments>  可以运行python模块，这项操作会执行模块里的代码，还会把 <strong>name</strong> 赋值为 “<strong>main</strong>“ </p>
<p>为了区别出专门用来执行脚本的部分，应该在模块末尾添加以下代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    fib(<span class="built_in">int</span>(sys.argv[<span class="number">1</span>])) <span class="comment"># 如果调用掉本，就以这种参数调用方式执行函数   </span></span><br></pre></td></tr></table></figure>

<p>以下是在bash中调用的脚本的代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python fibo.py <span class="number">50</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span></span><br></pre></td></tr></table></figure>
<h4 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h4><p>按照以下优先级搜索模块:</p>
<ol>
<li>解释器首先搜索具有该名称的内置模块，它们的名字列在 sys.builtin_module_names 中</li>
<li>在变量 sys.path 给出的目录列表中搜索这个模块文件(模块名.py)； sys.path 从这些位置初始化:<ul>
<li>当前目录  (它的搜索位置在标准库之前)</li>
<li>PYTHONPATH</li>
<li>依赖于安装的默认值(包括一个 site-packages 目录，由 site 模块处理)</li>
</ul>
</li>
</ol>
<p>初始化后python程序可以更改 sys.path ,如 sys.path.append(‘&#x2F;ufs&#x2F;guido&#x2F;lib&#x2F;python’)</p>
<h4 id="“已编译的”python文件"><a href="#“已编译的”python文件" class="headerlink" title="“已编译的”python文件"></a>“已编译的”python文件</h4><p>为了快速加载模块，Python 把模块的编译版缓存在 <strong>pycache</strong> 目录中，文件名为 module.version.pyc，version 对编译文件格式进行编码，一般是 Python 的版本号。这种方法可以让不同python版本的已编译模块共存</p>
<p>例如，CPython 的 3.3 发行版中，spam.py 的编译版本缓存为 <strong>pycache</strong>&#x2F;spam.cpython-33.pyc</p>
<h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir 函数"></a>dir 函数</h3><p>内置函数 dir 用于查找模块定义的名称(模块名、函数名、变量名):</p>
<ul>
<li>dir()         没有参数时，列出当前(代码执行到此处)定义的名称</li>
<li>dir(fibo)     查找fibo模块内定义的名称</li>
<li>dir(builtins) 内置函数和变量的名称定义在标准模块 builtins</li>
</ul>
<p>dir空参数，列出当前定义的名称:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib = fibo.fib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>()</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;fib&#x27;</span>, <span class="string">&#x27;fibo&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>dir指定模块名，列出这个模块定义的名称:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fibo, sys, builtins</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(fibo)</span><br><span class="line">[<span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;fib&#x27;</span>, <span class="string">&#x27;fib2&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(sys)  </span><br><span class="line">[<span class="string">&#x27;__breakpointhook__&#x27;</span>, <span class="string">&#x27;__displayhook__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__excepthook__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__interactivehook__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__stderr__&#x27;</span>, <span class="string">&#x27;__stdin__&#x27;</span>, <span class="string">&#x27;__stdout__&#x27;</span>, <span class="string">&#x27;__unraisablehook__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;_clear_type_cache&#x27;</span>, <span class="string">&#x27;_current_frames&#x27;</span>, <span class="string">&#x27;_debugmallocstats&#x27;</span>, <span class="string">&#x27;_framework&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;_getframe&#x27;</span>, <span class="string">&#x27;_git&#x27;</span>, <span class="string">&#x27;_home&#x27;</span>, <span class="string">&#x27;_xoptions&#x27;</span>, <span class="string">&#x27;abiflags&#x27;</span>, <span class="string">&#x27;addaudithook&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;api_version&#x27;</span>, <span class="string">&#x27;argv&#x27;</span>, <span class="string">&#x27;audit&#x27;</span>, <span class="string">&#x27;base_exec_prefix&#x27;</span>, <span class="string">&#x27;base_prefix&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;breakpointhook&#x27;</span>, <span class="string">&#x27;builtin_module_names&#x27;</span>, <span class="string">&#x27;byteorder&#x27;</span>, <span class="string">&#x27;call_tracing&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;callstats&#x27;</span>, <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;displayhook&#x27;</span>, <span class="string">&#x27;dont_write_bytecode&#x27;</span>, <span class="string">&#x27;exc_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;excepthook&#x27;</span>, <span class="string">&#x27;exec_prefix&#x27;</span>, <span class="string">&#x27;executable&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;flags&#x27;</span>, <span class="string">&#x27;float_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;float_repr_style&#x27;</span>, <span class="string">&#x27;get_asyncgen_hooks&#x27;</span>, <span class="string">&#x27;get_coroutine_origin_tracking_depth&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getallocatedblocks&#x27;</span>, <span class="string">&#x27;getdefaultencoding&#x27;</span>, <span class="string">&#x27;getdlopenflags&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getfilesystemencodeerrors&#x27;</span>, <span class="string">&#x27;getfilesystemencoding&#x27;</span>, <span class="string">&#x27;getprofile&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;getrecursionlimit&#x27;</span>, <span class="string">&#x27;getrefcount&#x27;</span>, <span class="string">&#x27;getsizeof&#x27;</span>, <span class="string">&#x27;getswitchinterval&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;gettrace&#x27;</span>, <span class="string">&#x27;hash_info&#x27;</span>, <span class="string">&#x27;hexversion&#x27;</span>, <span class="string">&#x27;implementation&#x27;</span>, <span class="string">&#x27;int_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;intern&#x27;</span>, <span class="string">&#x27;is_finalizing&#x27;</span>, <span class="string">&#x27;last_traceback&#x27;</span>, <span class="string">&#x27;last_type&#x27;</span>, <span class="string">&#x27;last_value&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;maxsize&#x27;</span>, <span class="string">&#x27;maxunicode&#x27;</span>, <span class="string">&#x27;meta_path&#x27;</span>, <span class="string">&#x27;modules&#x27;</span>, <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;path_hooks&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;path_importer_cache&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;prefix&#x27;</span>, <span class="string">&#x27;ps1&#x27;</span>, <span class="string">&#x27;ps2&#x27;</span>, <span class="string">&#x27;pycache_prefix&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;set_asyncgen_hooks&#x27;</span>, <span class="string">&#x27;set_coroutine_origin_tracking_depth&#x27;</span>, <span class="string">&#x27;setdlopenflags&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;setprofile&#x27;</span>, <span class="string">&#x27;setrecursionlimit&#x27;</span>, <span class="string">&#x27;setswitchinterval&#x27;</span>, <span class="string">&#x27;settrace&#x27;</span>, <span class="string">&#x27;stderr&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;stdin&#x27;</span>, <span class="string">&#x27;stdout&#x27;</span>, <span class="string">&#x27;thread_info&#x27;</span>, <span class="string">&#x27;unraisablehook&#x27;</span>, <span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;version_info&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;warnoptions&#x27;</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="built_in">dir</span>(builtins)  </span><br><span class="line">[<span class="string">&#x27;ArithmeticError&#x27;</span>, <span class="string">&#x27;AssertionError&#x27;</span>, <span class="string">&#x27;AttributeError&#x27;</span>, <span class="string">&#x27;BaseException&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;BlockingIOError&#x27;</span>, <span class="string">&#x27;BrokenPipeError&#x27;</span>, <span class="string">&#x27;BufferError&#x27;</span>, <span class="string">&#x27;BytesWarning&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ChildProcessError&#x27;</span>, <span class="string">&#x27;ConnectionAbortedError&#x27;</span>, <span class="string">&#x27;ConnectionError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ConnectionRefusedError&#x27;</span>, <span class="string">&#x27;ConnectionResetError&#x27;</span>, <span class="string">&#x27;DeprecationWarning&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;EOFError&#x27;</span>, <span class="string">&#x27;Ellipsis&#x27;</span>, <span class="string">&#x27;EnvironmentError&#x27;</span>, <span class="string">&#x27;Exception&#x27;</span>, <span class="string">&#x27;False&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;FileExistsError&#x27;</span>, <span class="string">&#x27;FileNotFoundError&#x27;</span>, <span class="string">&#x27;FloatingPointError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;FutureWarning&#x27;</span>, <span class="string">&#x27;GeneratorExit&#x27;</span>, <span class="string">&#x27;IOError&#x27;</span>, <span class="string">&#x27;ImportError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ImportWarning&#x27;</span>, <span class="string">&#x27;IndentationError&#x27;</span>, <span class="string">&#x27;IndexError&#x27;</span>, <span class="string">&#x27;InterruptedError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;IsADirectoryError&#x27;</span>, <span class="string">&#x27;KeyError&#x27;</span>, <span class="string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="string">&#x27;LookupError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;MemoryError&#x27;</span>, <span class="string">&#x27;NameError&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;NotADirectoryError&#x27;</span>, <span class="string">&#x27;NotImplemented&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;NotImplementedError&#x27;</span>, <span class="string">&#x27;OSError&#x27;</span>, <span class="string">&#x27;OverflowError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="string">&#x27;PermissionError&#x27;</span>, <span class="string">&#x27;ProcessLookupError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ReferenceError&#x27;</span>, <span class="string">&#x27;ResourceWarning&#x27;</span>, <span class="string">&#x27;RuntimeError&#x27;</span>, <span class="string">&#x27;RuntimeWarning&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;StopIteration&#x27;</span>, <span class="string">&#x27;SyntaxError&#x27;</span>, <span class="string">&#x27;SyntaxWarning&#x27;</span>, <span class="string">&#x27;SystemError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;SystemExit&#x27;</span>, <span class="string">&#x27;TabError&#x27;</span>, <span class="string">&#x27;TimeoutError&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;TypeError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;UnboundLocalError&#x27;</span>, <span class="string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="string">&#x27;UnicodeEncodeError&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;UnicodeError&#x27;</span>, <span class="string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="string">&#x27;UnicodeWarning&#x27;</span>, <span class="string">&#x27;UserWarning&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;ValueError&#x27;</span>, <span class="string">&#x27;Warning&#x27;</span>, <span class="string">&#x27;ZeroDivisionError&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;__build_class__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__debug__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;abs&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;any&#x27;</span>, <span class="string">&#x27;ascii&#x27;</span>, <span class="string">&#x27;bin&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;bytearray&#x27;</span>, <span class="string">&#x27;bytes&#x27;</span>, <span class="string">&#x27;callable&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;chr&#x27;</span>, <span class="string">&#x27;classmethod&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;complex&#x27;</span>, <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;delattr&#x27;</span>, <span class="string">&#x27;dict&#x27;</span>, <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;divmod&#x27;</span>, <span class="string">&#x27;enumerate&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;frozenset&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>, <span class="string">&#x27;hasattr&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;hash&#x27;</span>, <span class="string">&#x27;help&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;isinstance&#x27;</span>, <span class="string">&#x27;issubclass&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;iter&#x27;</span>, <span class="string">&#x27;len&#x27;</span>, <span class="string">&#x27;license&#x27;</span>, <span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;locals&#x27;</span>, <span class="string">&#x27;map&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;memoryview&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;oct&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;ord&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;property&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;quit&#x27;</span>, <span class="string">&#x27;range&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;reversed&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;setattr&#x27;</span>, <span class="string">&#x27;slice&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;sorted&#x27;</span>, <span class="string">&#x27;staticmethod&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;super&#x27;</span>, <span class="string">&#x27;tuple&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;vars&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;zip&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种用“点式模块名”构造 Python 模块命名空间的方法。<br>下面这个分级文件树展示了 sound 这个包的架构：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sound/                          Top-level package</span><br><span class="line">      __init__.py               Initialize the sound package</span><br><span class="line">      formats/                  Subpackage for file format conversions</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              wavwrite.py</span><br><span class="line">              aiffread.py</span><br><span class="line">              aiffwrite.py</span><br><span class="line">              auread.py</span><br><span class="line">              auwrite.py</span><br><span class="line">              ...</span><br><span class="line">      effects/                  Subpackage for sound effects</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              surround.py</span><br><span class="line">              reverse.py</span><br><span class="line">              ...</span><br><span class="line">      filters/                  Subpackage for filters</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br><span class="line">              vocoder.py</span><br><span class="line">              karaoke.py</span><br><span class="line">              ...</span><br></pre></td></tr></table></figure>
<p>只有包含 _<em>init</em>.py 文件的目录会被当成包。  </p>
<p>可以从包中导入单个模块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sound.effects.echo       <span class="comment"># 导入单个模块，引用函数时需要子模块全名</span></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo  <span class="comment"># 导入单个模块，引用函数时需要子模块名(无需前缀)</span></span><br><span class="line"><span class="keyword">from</span> sound.effects.echo <span class="keyword">import</span> echofilter     <span class="comment"># 导入单个函数，它同样也会加载这个子模块，但引用函数无需子模块名</span></span><br></pre></td></tr></table></figure>

<p>使用通配符导入所有模块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p>使用显示索引，在包内 <strong>init</strong>.py 定义 <strong>all</strong>&#x3D; [“echo”,”surround”.”reverse”] 能够让通配符导入这三个子模块；如果没有定义 <strong>all</strong> 变量，则不把吧所有子模块加载到当前命名空间。<br>实际上不推荐使用该方法，花费时间且可能产生副作用。  </p>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="比较复杂的输出格式"><a href="#比较复杂的输出格式" class="headerlink" title="比较复杂的输出格式"></a>比较复杂的输出格式</h3><h4 id="简单显示变量进行调试"><a href="#简单显示变量进行调试" class="headerlink" title="简单显示变量进行调试"></a>简单显示变量进行调试</h4><p>不需要花哨输出的可以使用 repr() 和 str() 函数把<strong>值转变为字符串</strong>。<br>repr() 生成的值更加适用于解释器读取；一般情况下，数字、列表或字典等结构两个函数输出表现一致，面对字符串有不同表现(如转义字符的显示)。</p>
<p>几个 repr 的使用示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hellos = <span class="built_in">repr</span>(<span class="string">&#x27;hello, world\n&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(hellos)</span><br><span class="line"><span class="string">&#x27;hello, world\n&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># repr 的参数可以是任意python对象</span></span><br><span class="line"><span class="meta">... </span><span class="built_in">repr</span>((x, y, (<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)))</span><br><span class="line"><span class="string">&quot;(32.5, 40000, (&#x27;spam&#x27;, &#x27;eggs&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="格式化字符串字面值"><a href="#格式化字符串字面值" class="headerlink" title="格式化字符串字面值"></a>格式化字符串字面值</h4><p>格式化字符串字面值(简称 f-字符串)在字符串前加前缀 f 或 F，通过花括号写入包含格式的变量。<br>常见的几个表达式格式控制:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 在冒号后面指定“宽度”和变量类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&#x27;pi的值大约是 <span class="subst">&#123;math.pi:<span class="number">.3</span>f&#125;</span>.&#x27;</span>)</span><br><span class="line">pi的值大约是 <span class="number">3.142</span>.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 一些修饰符可以在格式化前转换值</span></span><br><span class="line"><span class="meta">... </span><span class="comment"># &#x27;!a&#x27; 应用 ascii() ，&#x27;!s&#x27; 应用 str()，&#x27;!r&#x27; 应用 repr()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animals = <span class="string">&#x27;rabbit&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&#x27;兔子的英文是 <span class="subst">&#123;animals&#125;</span>.&#x27;</span>)</span><br><span class="line">兔子的英文是 eels.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&#x27;兔子的英文是 <span class="subst">&#123;animals!r&#125;</span>.&#x27;</span>)</span><br><span class="line">兔子的英文是 <span class="string">&#x27;eels&#x27;</span>.</span><br></pre></td></tr></table></figure>
<h4 id="字符串format方法"><a href="#字符串format方法" class="headerlink" title="字符串format方法"></a>字符串format方法</h4><p>str.format 方法的使用与函数的定义与调用十分“相似”。</p>
<p>常见 str.format 方法的参数使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用空内容花括号占位，按序传递参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我叫 &#123;&#125; ，小名 &quot;&#123;&#125;!&quot;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;IceCocoa&#x27;</span>, <span class="string">&#x27;Cocoa&#x27;</span>))</span><br><span class="line"><span class="comment"># 在花括号内添加数字，指定参数顺序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;1&#125; and &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)) </span><br><span class="line"><span class="comment"># 在花括号内添加关键字，使用关键字引用参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;This &#123;food&#125; is &#123;adjective&#125;.&#x27;</span>.<span class="built_in">format</span>(food=<span class="string">&#x27;banana&#x27;</span>, adjective=<span class="string">&#x27;delicious&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>位置参数和关键字参数可以任意组合，它们也可以在字符串中多次出现。</p>
<p>包含字典类型参数的 str.format 方法使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Sjoerd&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;Jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;Dcab&#x27;</span>: <span class="number">8637678</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 传递字典可以使用 &#123;位置参数[关键字]:格式&#125; 来引用</span></span><br><span class="line">··· <span class="built_in">print</span>(<span class="string">&#x27;Jack: &#123;0[Jack]:d&#125;; Sjoerd: &#123;0[Sjoerd]:d&#125;; &#x27;</span></span><br><span class="line">··· <span class="string">&#x27;Dcab: &#123;0[Dcab]:d&#125;&#x27;</span>.<span class="built_in">format</span>(table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 可以使用 **dic 解包一个字典类型，引用时仅需要 &#123;关键字:格式&#125;</span></span><br><span class="line">··· <span class="built_in">print</span>(<span class="string">&#x27;Jack: &#123;Jack:d&#125;; Sjoerd: &#123;Sjoerd:d&#125;; &#x27;</span></span><br><span class="line">··· <span class="string">&#x27;Dcab: &#123;Dcab:d&#125;&#x27;</span>.<span class="built_in">format</span>(**table))</span><br><span class="line">Jack: <span class="number">4098</span>; Sjoerd: <span class="number">4127</span>; Dcab: <span class="number">8637678</span></span><br></pre></td></tr></table></figure>
<h4 id="旧式字符串格式化方法"><a href="#旧式字符串格式化方法" class="headerlink" title="旧式字符串格式化方法"></a>旧式字符串格式化方法</h4><p>是 printf 风格的字符串格式化方法，与 C 中的打印方法比较相似，不详细记录。</p>
<h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><h4 id="打开文件函数open"><a href="#打开文件函数open" class="headerlink" title="打开文件函数open"></a>打开文件函数open</h4><p>open 函数返回一个 file object:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;workfile&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>打开文件的模式一般有:</p>
<ul>
<li>r,  rb        只读，这是默认模式</li>
<li>w,  wb        只写，以覆盖原文件方式</li>
<li>a,  ab        追加写</li>
<li>r+, rb+       读写</li>
<li>a+, ab+       读和追加写</li>
</ul>
<p>后面加b的版本以二进制模式打开文件，以 bytes 对象的形式读写，此时不能指定 encoding</p>
<p>在文本模式下读取文件时，默认把平台特定的行结束符（Unix 上为 \n, Windows 上为 \r\n）转换为 \n。在文本模式下写入数据时，默认把 \n 转换回平台特定结束符。</p>
<p>行结束符的转换不会影响文本文件，但是会破坏 JPEG 或 EXE 等二进制文件数据，读写非文本文件一定要使用二进制模式。</p>
<h4 id="使用with关键字健壮地打开和关闭文件"><a href="#使用with关键字健壮地打开和关闭文件" class="headerlink" title="使用with关键字健壮地打开和关闭文件"></a>使用with关键字健壮地打开和关闭文件</h4><p>打开文件时使用 with 关键字，句子结束后，文件会正确关闭或触发异常；如果没有使用with关键字，必须使用 f.close() 来关闭文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;workfile&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    read_data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 检验文件是否自动关闭</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.closed</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="文件对象方法"><a href="#文件对象方法" class="headerlink" title="文件对象方法"></a>文件对象方法</h3><p>假定已经使用 f &#x3D; open(‘workfile’, ‘w’, encoding&#x3D;”utf-8”) 创建好了文件对象，则有以下方法:</p>
<ul>
<li>f.read([<em>size</em>])   </li>
<li>f.readline()</li>
<li>f.write(string)</li>
<li>f.tell()</li>
<li>f.seek(offset, whence)</li>
</ul>
<h4 id="读取文件-f-read-size"><a href="#读取文件-f-read-size" class="headerlink" title="读取文件 f.read([size])"></a>读取文件 f.read([<em>size</em>])</h4><p>省略size或size为负时，读取并返回整个文件内容(文件大小不能为内存两倍)；指定非负size时读取并返回最多 size 个字符&#x2F;字节。<br>如果到达文件末尾，则返回空字符串(‘’)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;文件所有内容\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="读取文本行-f-readline"><a href="#读取文本行-f-readline" class="headerlink" title="读取文本行 f.readline()"></a>读取文本行 f.readline()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">&#x27;文件第一行\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">&#x27;文件第二行\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用读取文本行的方式循环遍历整个文件对象:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(line, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">文件第一行</span><br><span class="line">文件第二行</span><br></pre></td></tr></table></figure>
<h4 id="写文件-f-write-string"><a href="#写文件-f-write-string" class="headerlink" title="写文件 f.write(string)"></a>写文件 f.write(<em>string</em>)</h4><p>把字符串内容写入文件，并返回写入字符数；写入其他类型的对象前，要转化成字符串(文本模式)或字节对象(二进制模式)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;This is a test\n&#x27;</span>)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>
<h4 id="返回文件位置-f-tell"><a href="#返回文件位置-f-tell" class="headerlink" title="返回文件位置 f.tell()"></a>返回文件位置 f.tell()</h4><p>返回一个整数，表示为二进制模式下，文件开始到当前位置的字节数；这个返回值对于文本模式没有意义</p>
<h4 id="改变文件对象位置-f-seek-offset-whence"><a href="#改变文件对象位置-f-seek-offset-whence" class="headerlink" title="改变文件对象位置 f.seek(offset, whence)"></a>改变文件对象位置 f.seek(<em>offset, whence</em>)</h4><p>参数 whence 指定参考点，0表示文件开头，1表示文件当前位置，2表示文件末尾；默认为0<br>参数 offset 以参考点为基准偏移的<strong>字节数</strong>；由此可知 seek 一般用于二进制模式打开的文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;workfile&#x27;</span>, <span class="string">&#x27;rb+&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">b&#x27;0123456789abcdef&#x27;</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(-<span class="number">3</span>, <span class="number">2</span>)  </span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)       </span><br><span class="line"><span class="string">b&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用json保存结构化数据"><a href="#使用json保存结构化数据" class="headerlink" title="使用json保存结构化数据"></a>使用json保存结构化数据</h3><p>把python数据层次结构转换为字符串表示形式，这个过程称为序列化(serializing)；<br>从字符串形式重建为数据，称为解序化(deserializing)</p>
<p>此处详细描述待实用时补充</p>
<h2 id="句法错误"><a href="#句法错误" class="headerlink" title="句法错误"></a>句法错误</h2><p>句法错误又称解析错误，会提出 SyntaxError: invalid syntax</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span> <span class="built_in">print</span>(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> <span class="built_in">print</span>(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">                   ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>
<p>解析器会复现出现句法错误的代码行，并用小“箭头”指向行里检测到的第一个错误</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常是执行时检测到的错误，异常的类型会作为错误信息的一部分打印出来；标准的异常类型是内置的标识符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> * (<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>
<p>特别地，用户中断程序(如 Control-C)会触发 KeyboardInterrupt 异常</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>使用 try…except 来捕获和处理异常<br>try…except 语句的工作原理如下:</p>
<ol>
<li>执行try子句</li>
<li>如果没有触发异常，则跳过 except 子句，try 语句执行完毕</li>
<li>如果在执行 try 子句时发生了异常，则跳过该子句中剩下的部分</li>
<li>关键字 except 会匹配类型一致的异常并交付给对应处理程序；如果所在”try子句–except子句”无法匹配这个异常，则跳到外部处理</li>
<li>如果这个异常在最外部还没有得到处理，则它是一个 <em>未处理异常</em> 且执行将终止</li>
</ol>
<h4 id="except子句"><a href="#except子句" class="headerlink" title="except子句"></a>except子句</h4><p>except子句的使用特点:</p>
<ul>
<li>except子句可以使用圆括号的元组，指定多个异常，如 except (RuntimeError, TypeError, NameError)</li>
<li>except子句指定的异常类型，可以兼容它的派生类；所有异常都继承自 BaseException</li>
<li>except子句使用 as 绑定触发的异常实例</li>
</ul>
<p>except子句使用 as 绑定触发的异常实例，并将参数存储在 instance.args 中，该实例定义了 <strong>str</strong>() ，无需添加后缀 .args 也可直接打印参数； 也可以在引发异常之前就实例化一个异常实例并添加属性。<br>以下是 as 绑定异常实例的演示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> Exception(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> Exception <span class="keyword">as</span> inst:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">type</span>(inst))    <span class="comment"># the exception instance</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(inst.args)     <span class="comment"># arguments stored in .args</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(inst)          <span class="comment"># __str__ allows args to be printed directly,</span></span><br><span class="line"><span class="meta">... </span>                         <span class="comment"># but may be overridden in exception subclasses</span></span><br><span class="line"><span class="meta">... </span>    x, y = inst.args     <span class="comment"># unpack args</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;x =&#x27;</span>, x)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;y =&#x27;</span>, y)</span><br><span class="line">...</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;Exception&#x27;</span>&gt;</span><br><span class="line">(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)</span><br><span class="line">x = spam</span><br><span class="line">y = eggs</span><br></pre></td></tr></table></figure>
<h4 id="else子句–对try语句的补充"><a href="#else子句–对try语句的补充" class="headerlink" title="else子句–对try语句的补充"></a>else子句–对try语句的补充</h4><p>try…except 语句具有可选的 else 子句，它必须放在所有except子句之后，没有引发异常时会执行else子句；使用else子句可以避免捕获到无需try保护的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> OSError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无法打开文件:&#x27;</span>, arg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 无论是否触发异常，都会执行以下代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经执行了open函数&#x27;</span>);</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>
<h4 id="finally子句–定义清理操作"><a href="#finally子句–定义清理操作" class="headerlink" title="finally子句–定义清理操作"></a>finally子句–定义清理操作</h4><p>如果存在finally子句，则finally子句是try语句结束前执行的最后一项任务，不论是否触发异常。<br>因此，一般会先执行finally再处理异常；实际上是暂时搁置这个异常(不确定是否已经实例化过)，执行完finally子句后，再重新触发该异常。  </p>
<p>特别地， with open 属于预定义的清理操作。</p>
<h3 id="触发异常"><a href="#触发异常" class="headerlink" title="触发异常"></a>触发异常</h3><h4 id="“自然”触发异常"><a href="#“自然”触发异常" class="headerlink" title="“自然”触发异常"></a>“自然”触发异常</h4><p>这类异常的触发点位于内置函数内部(也许这样的描述不准确)，已经被妥善定义好的，我们无需考虑它如何产生</p>
<h4 id="raise语句强制触发异常"><a href="#raise语句强制触发异常" class="headerlink" title="raise语句强制触发异常"></a>raise语句强制触发异常</h4><p>raise 语句支持在try子句中强制触发异常； raise 唯一的参数就是要触发的异常实例，这个实例一般“匿名” 构造，如:</p>
<ul>
<li>raise NameError(‘HiThere’)    构造了参数为 “HiThere” 的 NameError 实例</li>
<li>raise ValueError()            构造了空参数的 ValueError 实例</li>
</ul>
<h4 id="含有finally子句的复杂触发异常"><a href="#含有finally子句的复杂触发异常" class="headerlink" title="含有finally子句的复杂触发异常"></a>含有finally子句的复杂触发异常</h4><p>由于finally子句必定执行的特性，与 return， else子句，except子句 ，(break, continue) 等结合使用会出现比较复杂的情形:</p>
<ul>
<li>在except和else子句中触发的次级异常，会在finally子句执行后重新触发</li>
<li>如果finally子句包含break、continue、return，异常将不会被重新引发</li>
<li>执行try语句时遇到break、continue、return，则finally子句会在这些语句之前执行</li>
<li>特别地，如果finally中包含return，则不会执行try的return</li>
</ul>
<p>由此可知，finally一定会被执行；实际应用中，finally对于释放外部资源十分有用。</p>
<h3 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h3><p>raise 语句支持可选的 from 子句，该子句用于启用链式异常:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> ConnectionError</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    func()</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Failed to open database&#x27;</span>) <span class="keyword">from</span> exc</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> func</span><br><span class="line">ConnectionError</span><br><span class="line"></span><br><span class="line">The above exception was the direct cause of the following exception:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">RuntimeError: Failed to <span class="built_in">open</span> database</span><br></pre></td></tr></table></figure>

<p>使用 from None 的方法，可以在输出异常时禁用“链式输出”</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>python的类支持面向对象编程(OOP)的多有标准特性:</p>
<ul>
<li>类的继承机制支持多个基类</li>
<li>派生的类能覆盖基类的方法</li>
<li>类的方法能调用基类中的同名方法</li>
</ul>
<h3 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>namespace (命名空间)是映射到对象的名称。 abs 函数、内置异常等的内置函数集合；模块中的全局名称；函数调用中的局部名称；对象的属性集合都属于命名空间。<br>不同命名空间的名称之间没有绝对关系。</p>
<p>点号之后的名称是属性，模块属性和模块中定义的全局名称之间存在直接的映射，它们属于相同的命名空间。</p>
<p>属性可以是只读或可写的。可写的模块属性可以用 del modelname.funcname 删除该对象模块对象中的属性。</p>
<p>命名空间是在不同时刻创建的，拥有不同的生命周期；各类模块都有自己的命名空间:</p>
<ul>
<li>内置名称的命名空间是在python解释器启动时创建的，永远不会删除；它存在于模块 builtins</li>
<li>模块的全局命名空间在读取模块定义时创建；一般也会持续到解释器退出</li>
<li>从脚本文件读取或交互式读取的，由解释器顶层调用执行的 <strong>main</strong> 的一部分也拥有自己的全局命名空间</li>
<li>函数的本地命名空间在调用该函数时创建，并在函数返回或抛出不在函数内部处理的错误时”遗忘”。每次递归都有自己的本地命名空间</li>
</ul>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>作用域是命名空间可直接访问的 Python 程序的文本区域。 “可直接访问” 的意思是，对名称的非限定引用会在命名空间中查找名称。  </p>
<p>作用域是静态确定的，但会被动态使用。执行期间的任何时刻，都会有3或4个命名空间可被直接访问的嵌套作用域:</p>
<ol>
<li>最内层作用域，首先搜索，包含局部名称(如果不存在生效的global 和 nonlocal 语句)</li>
<li>封闭的函数作用域，包含非全局和非局部名称，从最近的封闭作用域开始搜索</li>
<li>当前模块的作用域，包含当前模块的全局名称</li>
<li>最外层作用域，最后搜索，包含内置名称的命名空间</li>
</ol>
<p>del x 实际是从当前作用域的命名空间移除对 x 的绑定。</p>
<p>所有引入新名称的操作都是所用于局部作用域的，import 语句和函数定义会在局部作用域里绑定模块或函数名称。</p>
<p>global 语句用于表明特定变量在全局作用域里，并应在全局作用域中重新绑定；nonlocal 语句表明特定变量在外层作用域中，并应在外层作用域中重新绑定。</p>
<h4 id="作用域和命名空间示例"><a href="#作用域和命名空间示例" class="headerlink" title="作用域和命名空间示例"></a>作用域和命名空间示例</h4><p>下例演示了 global 和 nonlocal 对变量绑定的影响:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scope_test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_local</span>():</span><br><span class="line">        spam = <span class="string">&quot;local spam&quot;</span>     <span class="comment"># 默认局部赋值没有改变对变量的绑定，这个赋值对外层无意义</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_nonlocal</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> spam           <span class="comment"># nonlocal 赋值改变了当前作用域对变量的绑定(绑定到了外层的同名变量)</span></span><br><span class="line">        spam = <span class="string">&quot;nonlocal spam&quot;</span>  <span class="comment"># 这个赋值影响了外一层的变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_global</span>():</span><br><span class="line">        <span class="keyword">global</span> spam             <span class="comment"># global 赋值给与变量全局的绑定(本身就没有对局部的绑定)</span></span><br><span class="line">        spam = <span class="string">&quot;global spam&quot;</span>    <span class="comment"># 这个赋值影响到了全局的变量，但不会影响外一层的变量</span></span><br><span class="line"></span><br><span class="line">    spam = <span class="string">&quot;test spam&quot;</span></span><br><span class="line">    do_local()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After local assignment:&quot;</span>, spam)</span><br><span class="line">    do_nonlocal()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After nonlocal assignment:&quot;</span>, spam)</span><br><span class="line">    do_global()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After global assignment:&quot;</span>, spam)</span><br><span class="line"></span><br><span class="line">scope_test()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;In global scope:&quot;</span>, spam)</span><br></pre></td></tr></table></figure>
<p>示例代码的输出是：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">After local assignment: test spam</span><br><span class="line">After nonlocal assignment: nonlocal spam</span><br><span class="line">After global assignment: nonlocal spam</span><br><span class="line">In global scope: global spam</span><br></pre></td></tr></table></figure>
<h3 id="初探类"><a href="#初探类" class="headerlink" title="初探类"></a>初探类</h3><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><p>类定义(class语句)和函数定义(def)一样，必须先执行才能生效；如果类定义在条件语句和函数内部，没有进入内部前，类仍处于未定义。<br>当进入类定义时，将会创建一个新的命名空间，用作局部作用域。<br><strong>特别注意，当（从结尾处）正常离开类定义时，将创建一个类对象</strong></p>
<p><strong>问题：创建类对象也会执行构造函数吗？</strong><br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</p>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>类定义时应该包含一个构造函数，定义一个初始状态：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, i</span>):</span><br><span class="line">    self.i = i</span><br></pre></td></tr></table></figure>
<p>注意，构造函数中的 self 参数不需要实例化时给出，它会自动赋为所在对象的引用</p>
<h4 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h4><p>类对象支持两种操作：属性引用和实例化。</p>
<p>假设定义这样的类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A simple example class&quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, i</span>):</span><br><span class="line">        self.i = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>
<p>类对象支持属性引用和实例化，MyClass.i 和 MyClass.f 就是有效的属性引用，分别返回一个整数对象和一个函数对象，此外属性引用也可以被赋值。</p>
<p><strong>特别注意</strong>：如果定义时“自动”构建的类对象被赋值修改，那么之后使用这个类实例化的对象也会被赋予修改后的状态</p>
<p>__doc__ 也是一个有效的属性，将返回所属类的文档字符串</p>
<p>类的实例化使用函数表示方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x= MyClass()</span><br></pre></td></tr></table></figure>

<h4 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h4><p><strong>注意</strong>： Class对象和实例对象不同，Class对象是定义类时，自动创建的一个“模板”对象；实例对象则是我们按照Class对象另外构建的一个新对象（即使创建完成后，它们之间仍会保持联系）</p>
<p>实例对象所能理解的唯一操作是属性引用：对数据属性和对方法属性。</p>
<h5 id="实例的数据引用"><a href="#实例的数据引用" class="headerlink" title="实例的数据引用"></a>实例的数据引用</h5><p>实例的数据属性像局部变量一样，在第一次赋值时产生，并且可以被 del 删除（此时再次使用该实例对象的引数据引用，会给出类对象的数据引用），如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x.i = 777</span><br><span class="line">&gt;&gt;&gt; x.i</span><br><span class="line">777</span><br><span class="line">&gt;&gt;&gt; del x.i</span><br><span class="line">&gt;&gt;&gt; x.i     # 删除实例对象的数据引用，再次使用时，会给出类对象的引用</span><br><span class="line">1123456 </span><br><span class="line">&gt;&gt;&gt; del MyClass.i</span><br><span class="line">&gt;&gt;&gt; x.i</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;MyClass&#x27; object has no attribute &#x27;i&#x27;</span><br><span class="line">&gt;&gt;&gt; MyClass.i</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: type object &#x27;MyClass&#x27; has no attribute &#x27;i&#x27;</span><br><span class="line">&gt;&gt;&gt; MyClass.i=123456    # 类对象重新创建一个属性</span><br><span class="line">&gt;&gt;&gt; x.i                 # 此时甚至实例对象也可以使用类对象的属性引用</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>
<p>如此看来，实例对象创建后，仍然和类对象保持紧密联系，甚至像是“实例对象是类对象的继承”（当然，这种描述并不准确，但使用起来确实有这种感觉）</p>
<p>由此可见，类变量是所有实例变量共享的，而实例变量是实例特有的，一旦实例变量出了问题(如没有引用已被删除)，就会交给类变量来解决。</p>
<p><strong>特别注意，对于列表和字典类型的类变量，如在类中定义 list1&#x3D;[]， 任何实例化对象不会创建新的独属于本实例的这个属性；对本实例中list1的引用即是对类list1的引用。</strong></p>
<p><strong>因此，如果需要属于本实例的列表引用，需要在类定义时在构造函数中定义list1&#x3D;[]</strong></p>
<h5 id="实例的方法引用"><a href="#实例的方法引用" class="headerlink" title="实例的方法引用"></a>实例的方法引用</h5><p>方法的特殊指出在于，实例对象会作为类定义函数的第一个参数被传入，调用 x.f() 相当于 MyClass.f(x)</p>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>补充说明:</p>
<ul>
<li>python中没有任何东西能强制隐藏数据，它完全是基于约定的（除非使用C编写的python）</li>
<li>客户端应该谨慎使用数据属性，直接操作可能破坏由方法维护的固定变量；python没有限制对实例对象的添加和修改数据属性</li>
<li>每个值都是一个对象，因此也都具有类，并存储为 object.__class__</li>
</ul>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(modname.BaseClassName):</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure>
<p>不详细记录，派生的基本特性暂时不需要了解详细</p>
<h3 id="私有变量-仅是约定意义上的"><a href="#私有变量-仅是约定意义上的" class="headerlink" title="私有变量(仅是约定意义上的)"></a>私有变量(仅是约定意义上的)</h3><p>python并不存在仅限内部访问的真正的私有变量，但是大多数python代码都遵循这样的约定：带有一个下划线的名称（如 _spam）应该被当作是API的非公有部分</p>
<p>python还带有，名称改写的功能。在基类中含有如 __spam 这样的含有两个下划线前缀的标识符，它的文本将会被替换为 _classname__spam<br>名称改写有助于让子类重载方法而不破坏类内方法调用，当前类只需要专注于当前类内私有变量的使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseNum</span>:</span><br><span class="line">     <span class="comment"># 义时这么写，定义外单独引用该变量时，需要使用 x._BaseNum__num</span></span><br><span class="line">    __num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrivedNum</span>:</span><br><span class="line">    <span class="comment"># 定义时这么写，定义外单独引用该变量时，需要使用 x._DrivedNum__num</span></span><br><span class="line">    __num = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = DrivedNum()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x._BaseNum__num</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="基于类的迭代器"><a href="#基于类的迭代器" class="headerlink" title="基于类的迭代器"></a>基于类的迭代器</h3><p>大多数容器对象都可以使用for语句；在幕后，for语句会在容器对象上调用 iter() ，该函数返回定义了 __next__() 方法的迭代器对象，此方法将逐一访问容器中元素。可以使用 next() 内置函数来调用 __next()__ 方法  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it</span><br><span class="line">&lt;str_iterator <span class="built_in">object</span> at <span class="number">0x10c90e650</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(it)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">next</span>(it)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>

<p>给自定义类添加迭代器行为，定义一个 __iter__() 方法来返回一个带有 __next__() 的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Reverse</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Iterator for looping over a sequence backwards.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.index = self.index - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.data[self.index]</span><br></pre></td></tr></table></figure>
<p>这个类使用迭代器（实际使用中配合for语句）实现了伪翻转</p>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>可以用生成器完成的操作，同样可以使用基于类的迭代器来完成，但生成器的写法更为紧凑。</p>
<p>此处不详细记录。</p>
<h2 id="标准库简介-第一部分"><a href="#标准库简介-第一部分" class="headerlink" title="标准库简介-第一部分"></a>标准库简介-第一部分</h2><h3 id="操作系统接口–-os模块、shutil模块"><a href="#操作系统接口–-os模块、shutil模块" class="headerlink" title="操作系统接口– os模块、shutil模块"></a>操作系统接口– os模块、shutil模块</h3><h4 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h4><p>os 模块提供了许多与操作系统交互的函数<br>为避免内建函数 open 被 os.open 隐式替换，导入时一定要使用 improt os 而不是 from os import * </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()      <span class="comment"># 获得当前目录</span></span><br><span class="line"><span class="string">&#x27;C:\\Python310&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">&#x27;/server/accesslogs&#x27;</span>)   <span class="comment"># 改变当前目录</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">&#x27;mkdir today&#x27;</span>)   <span class="comment"># 运行命令行指令</span></span><br></pre></td></tr></table></figure>
<h4 id="shutil-模块"><a href="#shutil-模块" class="headerlink" title="shutil 模块"></a>shutil 模块</h4><p>shutil 模块，详写为 shell utility， 对于日常文件和目录管理提供了更高级别的接口</p>
<h4 id="内置辅助工具–-dir、help"><a href="#内置辅助工具–-dir、help" class="headerlink" title="内置辅助工具– dir、help"></a>内置辅助工具– dir、help</h4><p>内置的 dir() 和 help() 函数可以用作交互式辅助工具，用于处理像 os 这样的大型模块，如 dir(os) ，help(os)</p>
<h3 id="文件通配符–-glob模块"><a href="#文件通配符–-glob模块" class="headerlink" title="文件通配符– glob模块"></a>文件通配符– glob模块</h3><p>glob 模块提供了在目录中使用通配符搜索文件列表的函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> glob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;*.py&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;primes.py&#x27;</span>, <span class="string">&#x27;random.py&#x27;</span>, <span class="string">&#x27;quote.py&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="获取命令行参数–-sys模块"><a href="#获取命令行参数–-sys模块" class="headerlink" title="获取命令行参数– sys模块"></a>获取命令行参数– sys模块</h3><p>使用 sys.argv 可以获得调用本模块时，命令行参数列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="直接终止脚本–-sys模块"><a href="#直接终止脚本–-sys模块" class="headerlink" title="直接终止脚本– sys模块"></a>直接终止脚本– sys模块</h3><p>使用 sys.exit() 直接终止脚本</p>
<h3 id="标准流–-sys模块"><a href="#标准流–-sys模块" class="headerlink" title="标准流– sys模块"></a>标准流– sys模块</h3><p>sys 模块还具有 stdin， stdout， stderr 的属性:</p>
<ul>
<li>sys.stdin     用于所有交互式输入，如 input() 的调用</li>
<li>sys.stdout    用于print函数和表达式语句的输出，以及用于 input 的提示符；交互模式下sys.stdout是行缓冲的，非交互情况下是块缓冲的</li>
<li>sys.stderr    解释器自身的提示符和它的错误消息都发往 stderr，即使stdout重定向后也能看到它们；任何情况下(python3.9版本以后)，sys.stderr是行缓冲的</li>
</ul>
<p>sys.__stdin__，sys.__stdout__， sys.__stderr__ 这些对象存有stdin、stderr 和 stdout 的初始值；如果要使用它们恢复已经损坏或无需再使用的实际文件对象，应该在原来流被替换前就显示保存(即使原来流被替换也不会改变这些初始值，但是便于程序的清晰，应该这么做)</p>
<p>这些流都是常规的文本文件，与open函数返回的对象一致</p>
<h3 id="字符串模式匹配–-re模块"><a href="#字符串模式匹配–-re模块" class="headerlink" title="字符串模式匹配– re模块"></a>字符串模式匹配– re模块</h3><p>re 模块提供正则表达式工具:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r&#x27;\bf[a-z]*&#x27;</span>, <span class="string">&#x27;which foot or hand fell fastest&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;foot&#x27;</span>, <span class="string">&#x27;fell&#x27;</span>, <span class="string">&#x27;fastest&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="数学–-math模块、random模块、statistics模块"><a href="#数学–-math模块、random模块、statistics模块" class="headerlink" title="数学– math模块、random模块、statistics模块"></a>数学– math模块、random模块、statistics模块</h3><h4 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h4><p>math 模块提供了对浮点数学的底层C库函数的访问</p>
<h4 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h4><p>random 模块提供随机选择工具，一般有一下就几种随机方式:</p>
<ul>
<li>选择序列内随机元素，如 random.choice([‘apple’,’pear’,’banana’])</li>
<li>返回[0.0, 1.0) 范围内下一个随机浮点数，如 random.random() </li>
<li>返回范围内随机整数，如 random.randrange(6, 20, 2)</li>
</ul>
<h4 id="statistics模块"><a href="#statistics模块" class="headerlink" title="statistics模块"></a>statistics模块</h4><p>statistics 模块计算数值数据的基本统计属性，有均值mean、中位数median、方差variance等函数</p>
<h3 id="互联网访问–-urllib-request模块、smtplib模块"><a href="#互联网访问–-urllib-request模块、smtplib模块" class="headerlink" title="互联网访问– urllib.request模块、smtplib模块"></a>互联网访问– urllib.request模块、smtplib模块</h3><p>互联网访问有许多模块，这里的两个最简单的模块， urllib.request 用于从URL检索数据， smtplib 用于发送邮件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> urlopen(<span class="string">&#x27;http://worldtimeapi.org/api/timezone/etc/UTC.txt&#x27;</span>) <span class="keyword">as</span> response:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> line <span class="keyword">in</span> response:</span><br><span class="line"><span class="meta">... </span>        line = line.decode()             <span class="comment"># Convert bytes to a str</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> line.startswith(<span class="string">&#x27;datetime&#x27;</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="built_in">print</span>(line.rstrip())         <span class="comment"># Remove trailing newline</span></span><br><span class="line">...</span><br><span class="line">datetime: <span class="number">2022</span>-01-01T01:<span class="number">36</span>:<span class="number">47.689215</span>+<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server = smtplib.SMTP(<span class="string">&#x27;localhost&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server.sendmail(<span class="string">&#x27;soothsayer@example.org&#x27;</span>, <span class="string">&#x27;jcaesar@example.org&#x27;</span>,</span><br><span class="line"><span class="meta">... </span><span class="string">&quot;&quot;&quot;To: jcaesar@example.org</span></span><br><span class="line"><span class="string"><span class="meta">... </span>From: soothsayer@example.org</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"><span class="meta">... </span>Beware the Ides of March.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server.quit()</span><br></pre></td></tr></table></figure>

<h3 id="日期和时间–-datetime模块"><a href="#日期和时间–-datetime模块" class="headerlink" title="日期和时间– datetime模块"></a>日期和时间– datetime模块</h3><p>datetime模块实现的重点是日期的格式化输出和操作，该模块还支持可感知时区的对象，有效类型有:</p>
<ul>
<li>class datetime.date       简单型日期，属性:year, month, day</li>
<li>class datetime.datetime   日期和时间的结合，属性：year, month, day, hour, minute, second, microsecond, and tzinfo.</li>
<li>class datetime.timedelta  表示两个date对象的时间间隔</li>
<li>class datetime.tzinfo     描述时区信息的抽象基类，用来给datetime时间调整概念</li>
<li>class datetime.timezone   实现了tzinfo的子类，表示相对于世界标准时间UTC的偏移量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 构建date对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = date.today()  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">datetime.date(<span class="number">2003</span>, <span class="number">12</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.strftime(<span class="string">&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;08-17-22. 17 Aug 2022 is a Wednesday on the 17 day of August.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 支持日历算数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>century21=date(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gotime=now-century21</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gotime, gotime.days</span><br><span class="line">(datetime.timedelta(days=<span class="number">8264</span>), <span class="number">8264</span>)</span><br></pre></td></tr></table></figure>

<h3 id="性能测量–-timeit-Timer模块，-cProfile模块"><a href="#性能测量–-timeit-Timer模块，-cProfile模块" class="headerlink" title="性能测量– timeit.Timer模块， cProfile模块"></a>性能测量– timeit.Timer模块， cProfile模块</h3><h4 id="timeit-Timer模块"><a href="#timeit-Timer模块" class="headerlink" title="timeit.Timer模块"></a>timeit.Timer模块</h4><p>timeit 模块颗粒度小，可以快速演示运行效率:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Timer(<span class="string">&#x27;t=a; a=b; b=t&#x27;</span>, <span class="string">&#x27;a=1; b=2&#x27;</span>).timeit()</span><br><span class="line"><span class="number">0.0754628999857232</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Timer(<span class="string">&#x27;a,b = b,a&#x27;</span>, <span class="string">&#x27;a=1; b=2&#x27;</span>).timeit()</span><br><span class="line"><span class="number">0.0371058000018820</span></span><br></pre></td></tr></table></figure>

<h4 id="cProfile模块"><a href="#cProfile模块" class="headerlink" title="cProfile模块"></a>cProfile模块</h4><p>cProfile 模块颗粒度大，可以识别较大代码块的关键部分:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line">pr = cProfile.Profile()</span><br><span class="line">pr.enable()</span><br><span class="line"><span class="comment"># ... do something ...</span></span><br><span class="line">pr.disable()</span><br><span class="line">pr.print_stats()</span><br></pre></td></tr></table></figure>

<p>使用上下文管理器(即使用 with 关键字):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line"><span class="keyword">with</span> cProfile.Profile() <span class="keyword">as</span> pr:</span><br><span class="line">    <span class="comment"># ... do something ...</span></span><br><span class="line">pr.print_stats()</span><br></pre></td></tr></table></figure>

<h3 id="质量控制–-doctest模块、-unittest模块"><a href="#质量控制–-doctest模块、-unittest模块" class="headerlink" title="质量控制– doctest模块、 unittest模块"></a>质量控制– doctest模块、 unittest模块</h3><h4 id="doctest模块"><a href="#doctest模块" class="headerlink" title="doctest模块"></a>doctest模块</h4><p>doctest 模块提供了一个工具，用于扫描模块并验证程序文档字符串中嵌入的测试:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">values</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算平均值.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(average([20, 30, 70]))</span></span><br><span class="line"><span class="string">    40.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(values) / <span class="built_in">len</span>(values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line">doctest.testmod()   <span class="comment"># 自动验证本所在脚本内嵌的测试</span></span><br></pre></td></tr></table></figure>

<p>在命令行可以使用  $python example.py -v  ，doctest会打印所尝试的详细日志，并打印出总结</p>
<h4 id="unittest模块"><a href="#unittest模块" class="headerlink" title="unittest模块"></a>unittest模块</h4><p>unittest 模块不像 doctest 模块那样易于使用，但它允许在一个单独的文件中维护更全面的测试集</p>
<p>此处不详细记录</p>
<h2 id="标准库简介-第二部分"><a href="#标准库简介-第二部分" class="headerlink" title="标准库简介-第二部分"></a>标准库简介-第二部分</h2><h3 id="字符串模板–-string-Template"><a href="#字符串模板–-string-Template" class="headerlink" title="字符串模板– string.Template"></a>字符串模板– string.Template</h3><p>string 模块包含一个通用的 Template 类，允许用户指定自己的字符串模板，这对于大文本来内容来说十分有用</p>
<p>这类格式化操作是通过占位符实现的，占位符有 $ 加上合法的标识符构成,其中 $ 是分隔符(分隔原文和占位符)；占位符后方需要留有空格和原文分开；如果使用花括号包围标识符部分则可以和其他部分无空连接。$$ 将被转义成单个字符 $ 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 变量替换占位符是使用 substitute 和 safe_substitute 方法实现</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=Template(<span class="string">&#x27;$&#123;village&#125;人民捐了$$10给$cause&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># substitute 方法；如果数据不完整则抛出 KeyError</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.substitute(village=<span class="string">&#x27;夏威夷&#x27;</span>,cause=<span class="string">&#x27;卡布奇诺&#x27;</span>)  </span><br><span class="line"><span class="string">&#x27;夏威夷人民捐了$10给卡布奇诺&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># safe_substitute 方法，允许未被替换的数据按占位符原文保留</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.safe_substitute(cause=<span class="string">&#x27;卡布奇诺&#x27;</span>) </span><br><span class="line"><span class="string">&#x27;$&#123;village&#125;人民捐了$10给卡布奇诺&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Template 的子类可以自定义分隔符，即修改 $ 的样式，以配合 input 等函数的使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">BatchRename</span>(<span class="title class_ inherited__">Template</span>):</span><br><span class="line">···     <span class="comment"># 分隔符还可以是符号&#x27;c&#x27;；使用字符&#x27;1&#x27;则不合法</span></span><br><span class="line"><span class="meta">... </span>    delimiter = <span class="string">&#x27;%&#x27;</span> </span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 改用 % 来表示占位符；注意这里打印 $ 不再需要转义</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=BatchRename(<span class="string">&#x27;%&#123;village&#125;人民在捐了$10给%&#123;cause&#125;&#x27;</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.substitute(village=<span class="string">&#x27;夏威夷&#x27;</span>,cause=<span class="string">&#x27;卡布奇诺&#x27;</span>)  </span><br><span class="line"><span class="string">&#x27;夏威夷人民捐了$10给卡布奇诺&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用二进制数据记录格式–-struct模块"><a href="#使用二进制数据记录格式–-struct模块" class="headerlink" title="使用二进制数据记录格式– struct模块"></a>使用二进制数据记录格式– struct模块</h3><p>struct 模块提供了 pack() 和 unpack() 函数，用于处理不定长度的二进制记录格式  </p>
<p>此处不详细记录</p>
<h3 id="多线程–-threading模块"><a href="#多线程–-threading模块" class="headerlink" title="多线程– threading模块"></a>多线程– threading模块</h3><p>多线程应用面临的主要挑战是，相互协调的多个线程之间需要共享数据或其他资源。threading 模块提供了多个同步操作原语，包括线程锁、事件、条件变量和信号量。</p>
<p>此处不详细记录</p>
<h3 id="弱引用–-weakref模块"><a href="#弱引用–-weakref模块" class="headerlink" title="弱引用– weakref模块"></a>弱引用– weakref模块</h3><p>weakref 模块提供的工具可以不必创建引用就能跟踪对象。 当对象不再需要时，它将自动从一个弱引用表中被移除，并为弱引用对象触发一个回调。</p>
<p>Python会自动进行内存管理，当某个对象的最后一个引用被移除后不久就会释放其所占用的内存；但是，存在需要持续跟踪对象的情况，跟踪它们将会创建一个令其永久化的引用。</p>
<p> 此处不详细记录</p>
<h3 id="用于操作列表的工具–-array模块、collections模块、heapq模块"><a href="#用于操作列表的工具–-array模块、collections模块、heapq模块" class="headerlink" title="用于操作列表的工具– array模块、collections模块、heapq模块"></a>用于操作列表的工具– array模块、collections模块、heapq模块</h3><h4 id="array模块"><a href="#array模块" class="headerlink" title="array模块"></a>array模块</h4><p>array 模块提供了一种高效的数值数组 array 对象，类似于列表，但要求存储类型一致，且存贮密集度更高:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 类型码 H 表示以两个字节为存储单元的无符号二进制数值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 对于普通列表来说，存储的 int 对象通常要占用16字节</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = array(<span class="string">&#x27;H&#x27;</span>, [<span class="number">4000</span>, <span class="number">10</span>, <span class="number">700</span>, <span class="number">22222</span>]) <span class="comment"># 注意，这里元素的类型不是 int</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(a)</span><br><span class="line"><span class="number">26932</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">array(<span class="string">&#x27;H&#x27;</span>, [<span class="number">10</span>, <span class="number">700</span>])</span><br></pre></td></tr></table></figure>
<h4 id="collections-模块"><a href="#collections-模块" class="headerlink" title="collections 模块"></a>collections 模块</h4><p>collections 模块提供了一种双向队列 deque 对象；可以使用列表来初始化 deque 对象。<br>有以下常见方法:</p>
<ul>
<li>append(<em>x</em>), appendletf(<em>x</em>)</li>
<li>pop(), popleft()</li>
<li>extend(<em>iterable</em>), extendleft(<em>iterable</em>)    使用迭代器扩展元素</li>
<li>index(<em>elem[, start[, stop]]</em>)</li>
<li>rotate(<em>n&#x3D;1</em>) 向右循环移动n步；享有循环1步等价于 d.appendleft(d.pop())</li>
<li>其他一般通用的 reverse(), clear(), copy(), count(<em>x</em>)</li>
</ul>
<p>实现队列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = deque([<span class="string">&quot;task1&quot;</span>, <span class="string">&quot;task2&quot;</span>, <span class="string">&quot;task3&quot;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.append(<span class="string">&quot;task4&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Handling&quot;</span>, d.popleft())</span><br><span class="line">Handling task1</span><br></pre></td></tr></table></figure>
<p>实现广度优先搜索树(要求结点作为元素):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unsearched = deque([starting_node])     </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">breadth_first_search</span>(<span class="params">unsearched</span>):</span><br><span class="line">    node = unsearched.popleft()</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> gen_moves(node):</span><br><span class="line">        <span class="keyword">if</span> is_goal(m):</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        unsearched.append(m)</span><br></pre></td></tr></table></figure>
<h4 id="bisec模块"><a href="#bisec模块" class="headerlink" title="bisec模块"></a>bisec模块</h4><p>bisec 模块使用了基本的二分(bisection)算法，定义了以下函数:</p>
<ul>
<li>bisect.bisect 家族，使用value搜索适合位置，然后返回适合插入元素的位置，value的类型很可能与列表元素不一致<ul>
<li>bisect.bisect(<em>a, value, key&#x3D;None</em>)     倾向于返回等值元素右侧位置，key指向一个比较函数用于提取比较键</li>
<li>bisect.bisect_left(…)    倾向于返回等值元素左侧位置</li>
<li>bisect.bisect_right(…)   倾向于返回等值元素右侧位置</li>
</ul>
</li>
<li>bisect.insort 家族，使用 item 搜索适合位置，然后后插入适合位置，相当于执行 bisec 和 insert；要注意到，这里实际使用的是elem的某个属性值(默认 e[0]，使用key后可以是e[1]或其他属性)<ul>
<li>bisect.insort(<em>a, item, key&#x3D;None</em>)     倾向于插在等值元素右侧</li>
<li>bisect.insort_left(…)   倾向于插在等值元素左侧</li>
<li>bisect.insort_left(…)   倾向于插在等值元素右侧</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> bisect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [(<span class="string">&#x27;red&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">8</span>), (<span class="string">&#x27;black&#x27;</span>, <span class="number">0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.sort(key=<span class="keyword">lambda</span> t: t[<span class="number">1</span>]) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">[(<span class="string">&#x27;black&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">8</span>)]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 使用 bisect.bisect 函数搜索位置；这里的搜索值要与key函数提取的值可比较</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bisect.bisect(data, <span class="number">7</span>, key=<span class="keyword">lambda</span> t:t[<span class="number">1</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 使用 bisect.insort 函数搜索后插入位置；里key函数的提值逻辑要求插入值 item 与顺序表元素都能满足，并且提值后可比较</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bisect.insort_left(data, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>), key=<span class="keyword">lambda</span> t:t[<span class="number">1</span>]) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">[(<span class="string">&#x27;black&#x27;</span>, <span class="number">0</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">8</span>)]</span><br></pre></td></tr></table></figure>

<h4 id="heap模块"><a href="#heap模块" class="headerlink" title="heap模块"></a>heap模块</h4><p>heap 模块提供了堆队列算法的实现，维护的是最小堆<br>堆是一个二叉树，它的每个父节点的值都只会小于或等于所有孩子节点的值，最小的结点总是在根结点 heap[0]，同时 heap.sort() 维护了堆的不变性</p>
<p>heapq 模块定义了以下函数:</p>
<ul>
<li>heapq.heapify(<em>list</em>)             将list原地转换成堆(线性时间内)；空列表然后进行 heappush 操作也可初始化堆</li>
<li>heapq.heappush(<em>heap, item</em>)      放入item元素并保持堆的不变性</li>
<li>heapq.heappop(<em>heap</em>)             访问并弹出最小元素</li>
<li>heapq.headpushpop(<em>heap.item</em>)    效果等价于先heappush后heappop，但效率更好 </li>
<li>heapq.heapreplace(<em>heap, item</em>)   效果等价于先heappop后heappush，但效率更好</li>
</ul>
<p>堆元素可以为元组，此时元素中第一个属性应该为数值类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">5</span>, <span class="string">&#x27;编写代码&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">7</span>, <span class="string">&#x27;发布产品&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">1</span>, <span class="string">&#x27;编写规范&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">3</span>, <span class="string">&#x27;创建测试&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h</span><br><span class="line">[(<span class="number">1</span>, <span class="string">&#x27;编写规范&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;创建测试&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;编写代码&#x27;</span>), (<span class="number">7</span>, <span class="string">&#x27;发布产品&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="十进制浮点数"><a href="#十进制浮点数" class="headerlink" title="十进制浮点数"></a>十进制浮点数</h3><p>decimal 模块提供了一种 Decimal 数据类型用于十进制浮点运算。相比内置的float，特别适用于:</p>
<ul>
<li>控制精度</li>
<li>控制四舍五入</li>
<li>跟踪有效小数位</li>
<li>手工计算和计算机计算匹配</li>
</ul>
<h2 id="虚拟环境和包"><a href="#虚拟环境和包" class="headerlink" title="虚拟环境和包"></a>虚拟环境和包</h2><p>用于创建和管理虚拟环境的模块称为 venv； venv 通常会安装你可用的最新版本的 Python，可以通过运行 python3 或您想要的任何版本来选择特定的Python版本。</p>
<p>创建虚拟环境:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m venv tutorial-env </span><br></pre></td></tr></table></figure>
<p>创建 tutorial-env 目录，并在其中创建包含 Python 解释器副本和各种支持文件的目录。</p>
<p>创建好虚拟环境后，可在在命令行激活<br>windows下，运行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tutorial-env\Scripts\activate.bat</span><br></pre></td></tr></table></figure>
<p>Unix或MacOS下，运行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> tutorial-env/bin/activate</span><br></pre></td></tr></table></figure>
<p>这将改变所用终端的提示符，并修改环境，可以使用 sys.path 命令查看相关信息</p>
<h2 id="使用pip管理包"><a href="#使用pip管理包" class="headerlink" title="使用pip管理包"></a>使用pip管理包</h2><p>默认情况下 pip 将从 Python Package Index <a href="https://pypi.org/">https://pypi.org</a> 安装软件包。<br>pip 有许多子命令:”install”,”uninstall”,”upgrade”,”freeze”等</p>
<p>指定包名，安装最新版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ python -m pip install novas</span><br></pre></td></tr></table></figure>

<p>提供包名和版本名:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ python -m pip install requests==2.6.0</span><br></pre></td></tr></table></figure>

<p>更新到最新版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ python -m pip install --upgrade requests</span><br></pre></td></tr></table></figure>

<p>卸载一个或多个包:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ python -m pip uninstall requests</span><br></pre></td></tr></table></figure>

<p>显示有关特定包的信息:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ pip show requests</span><br></pre></td></tr></table></figure>

<p>显示虚拟环境中安装的所有软件包:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tutorial-env) $ pip list</span><br></pre></td></tr></table></figure>

















<h2 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h2><h1 id="词法分析（暂时搁置）"><a href="#词法分析（暂时搁置）" class="headerlink" title="词法分析（暂时搁置）"></a>词法分析（暂时搁置）</h1><p>python读取程序文本转为Unicode代码点；编码声明用于指定源文件编码，默认为UTF-8</p>
<h2 id="行结构"><a href="#行结构" class="headerlink" title="行结构"></a>行结构</h2><ul>
<li>逻辑行：源代码经过编译后，代码所在一行。NEWLINE形式符表示结束逻辑行，单个语句不能超出逻辑行边界，除非语法支持。</li>
<li>物理行：编写的代码所在行。</li>
<li>注释使用井号(#)开头，在物理行末尾截止</li>
<li>显示指定编码，该注释会被当作编码上面，必须独占行在文件开始  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: &lt;encoding-name&gt; -*-</span></span><br></pre></td></tr></table></figure></li>
<li>显示拼接行：两个及两个以上的物理行可用反斜杠拼接为一个逻辑行  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1900</span> &lt; year &lt; <span class="number">2100</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= month &lt;= <span class="number">12</span> \</span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span> &lt;= day &lt;= <span class="number">31</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= hour &lt; <span class="number">24</span> \</span><br><span class="line"><span class="keyword">and</span> <span class="number">0</span> &lt;= minute &lt; <span class="number">60</span> \</span><br><span class="line"><span class="keyword">and</span> <span class="number">0</span> &lt;= second &lt; <span class="number">60</span>:   <span class="comment"># 以反斜杠结尾的行，不能加注释</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li>隐式拼接行：圆括号、方括号、花括号内的表达式可以分成多个物理行，不必使用反斜杠</li>
<li>缩进格式</li>
<li>标识格式：A-Z，0-9，下划线，但不能以数字开头，标识符区分大小写</li>
<li>关键字、软关键字、保留的标识符</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h4 id="数字字面值"><a href="#数字字面值" class="headerlink" title="数字字面值"></a>数字字面值</h4><p><em>（若要实现负数，则使一元运算符’-‘和字面值组成）</em><br>整数字面值，没有长度限制，甚至能占满内存：</p>
<ul>
<li>0   7    2156161          </li>
<li>100_1515  _61_151_55101   #下划线会被忽略</li>
<li>0xdea48151a   0X151aef9   #hex-digit</li>
<li>0o125151      0O15121561  #oct-digit</li>
<li>0b_1011_0111  #混用</li>
</ul>
<p>浮点数字面值:</p>
<ul>
<li>3.1415926</li>
<li><ol start="10">
<li>.001</li>
</ol>
</li>
<li>3.14e-10  3.14_159_3</li>
</ul>
<h4 id="字符串或字符串字面值合并"><a href="#字符串或字符串字面值合并" class="headerlink" title="字符串或字符串字面值合并"></a>字符串或字符串字面值合并</h4><p> 以空白符分隔的多个相邻字符串或字节串字面值，可用不同引号标注，等同于合并操作。因此，”hello” ‘world’ 等价于 “helloworld”。此功能不需要反斜杠，即可将长字符串分为多个物理行，还可以为不同部分的字符串添加注释，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.<span class="built_in">compile</span>(<span class="string">&quot;[A-Za-z_]&quot;</span>    <span class="comment"># </span></span><br><span class="line">        <span class="string">&quot;[A-Za-z0-9_]*&quot;</span>   <span class="comment"># 注意，此功能在句法层面定义，在编译时实现</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<h4 id="格式字符串"><a href="#格式字符串" class="headerlink" title="格式字符串"></a>格式字符串</h4><p><em>暂时只记录例子</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&quot;Fred&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;He said his name is <span class="subst">&#123;name!r&#125;</span>.&quot;</span></span><br><span class="line"><span class="string">&quot;He said his name is &#x27;Fred&#x27;.&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;He said his name is <span class="subst">&#123;<span class="built_in">repr</span>(name)&#125;</span>.&quot;</span>  <span class="comment"># repr() is equivalent to !r</span></span><br><span class="line"><span class="string">&quot;He said his name is &#x27;Fred&#x27;.&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>width = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>precision = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value = decimal.Decimal(<span class="string">&quot;12.34567&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;result: <span class="subst">&#123;value:&#123;width&#125;</span>.<span class="subst">&#123;precision&#125;</span>&#125;&quot;</span>  <span class="comment"># nested fields</span></span><br><span class="line"><span class="string">&#x27;result:      12.35&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today = datetime(year=<span class="number">2017</span>, month=<span class="number">1</span>, day=<span class="number">27</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;today:%B %d, %Y&#125;</span>&quot;</span>  <span class="comment"># using date format specifier</span></span><br><span class="line"><span class="string">&#x27;January 27, 2017&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;today=:%B %d, %Y&#125;</span>&quot;</span> <span class="comment"># using date format specifier and debugging</span></span><br><span class="line"><span class="string">&#x27;today=January 27, 2017&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number = <span class="number">1024</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;number:#0x&#125;</span>&quot;</span>  <span class="comment"># using integer format specifier</span></span><br><span class="line"><span class="string">&#x27;0x400&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123; foo = &#125;</span>&quot;</span> <span class="comment"># preserves whitespace</span></span><br><span class="line"><span class="string">&quot; foo = &#x27;bar&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">&quot;The mill&#x27;s closed&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;line = &#125;</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;line = &quot;The mill\&#x27;s closed&quot;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;line = :<span class="number">20</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&quot;line = The mill&#x27;s closed   &quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&quot;<span class="subst">&#123;line = !r:<span class="number">20</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;line = &quot;The mill\&#x27;s closed&quot; &#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="数据模型-x2F-执行模型-x2F-导入系统-x2F-表达式"><a href="#数据模型-x2F-执行模型-x2F-导入系统-x2F-表达式" class="headerlink" title="数据模型&#x2F;执行模型&#x2F;导入系统&#x2F;表达式"></a>数据模型&#x2F;执行模型&#x2F;导入系统&#x2F;表达式</h2><p><em>比较复杂，等看完基本语法部分后再看</em></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机科学一般知识记录</title>
    <url>/2022/07/12/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%80%E8%88%AC%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录一些常用的又零碎的计算机知识。<br><br>更新日志：</p>
<ul>
<li>2022-07-13 <ul>
<li>完成正则表达式基本整理</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><h3 id="回车CR、换行LF"><a href="#回车CR、换行LF" class="headerlink" title="回车CR、换行LF"></a>回车CR、换行LF</h3><p>CR: Carriage Return ，对应ASCII转义字符’\r’,表示回车<br>LF: Linefeed ，对应ASCII转义字符’\n’，表示换行<br>CRLF: Carriage Return &amp; Linefeed，对应ASCII转义字符 “\r\n”，表示回车并换行</p>
<p>windows系统下使用CRLF进行“换行”，即新行以”\r\n”存储<br>unix&#x2F;linux&#x2F;mac系统下，使用LF进行“换行”，即新行以’\n’存储</p>
<h1 id="非系统知识整理"><a href="#非系统知识整理" class="headerlink" title="非系统知识整理"></a>非系统知识整理</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p>
<h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h3><details class="note primary no-icon" open="">
<summary><p><strong>普通字符</strong></p>
</summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>[ABC]</td>
<td>1</td>
<td>匹配 <strong>A B C</strong> 中任意一个</td>
<td></td>
</tr>
<tr>
<td>[^ABC]</td>
<td>1</td>
<td>匹配除 <strong>A B C</strong> 以外任意字符</td>
<td></td>
</tr>
<tr>
<td>[A-C0-4]</td>
<td>1</td>
<td>匹配 **A B C  0 1 2 3 4 **任意一个</td>
<td></td>
</tr>
<tr>
<td>[.]</td>
<td>1</td>
<td>匹配除 <strong>\n \r</strong> 以外任意字符</td>
<td></td>
</tr>
<tr>
<td>[\s]</td>
<td>1</td>
<td>匹配单个空白符</td>
<td></td>
</tr>
<tr>
<td>[\S]</td>
<td>1</td>
<td>匹配单个非空白符</td>
<td></td>
</tr>
<tr>
<td>[\w]</td>
<td>1</td>
<td>匹配是字母，数字，下划线中任意一个字符</td>
<td>[A-Z0-9_]</td>
</tr>
<tr>
<td></detail></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<details class="note primary no-icon" open="">
<summary><p><strong>非打印</strong></p>
</summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>[\cx]</td>
<td>1</td>
<td>匹配由x指定的控制字符，识别失败则匹配 <strong>c</strong></td>
<td></td>
</tr>
<tr>
<td>[\f]</td>
<td>1</td>
<td>匹配一个换页符</td>
<td>[\x0c],  [\cL]</td>
</tr>
<tr>
<td>[\n]</td>
<td>1</td>
<td>匹配一个回车符</td>
<td>[\x0a], [\cJ]</td>
</tr>
<tr>
<td>[\r]</td>
<td>1</td>
<td>匹配一个换行符</td>
<td>[\x0d],  [\cM]</td>
</tr>
<tr>
<td>[\t]</td>
<td>1</td>
<td>匹配一个制表符</td>
<td>[\x09],  [\cI]</td>
</tr>
<tr>
<td>[\v]</td>
<td>1</td>
<td>匹配一个垂直制表符</td>
<td>[\x0b], [\cK]</td>
</tr>
<tr>
<td>[\s]</td>
<td>1</td>
<td>匹配任何空白字符,包括空格、制表、回车、换行、换页、垂直制表符</td>
<td>[ \t\n\r\f\v]</td>
</tr>
<tr>
<td>[\S]</td>
<td>1</td>
<td>匹配任意非空白字符</td>
<td>[^ \t\n\r\f\v]</td>
</tr>
<tr>
<td></detail></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<details class="note primary no-icon" open="">
<summary><p><strong>特殊字符</strong></p></summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>$</td>
<td>不确定</td>
<td>匹配输入字符串的结尾位置，注意 \r \n的匹配情况</td>
<td></td>
</tr>
<tr>
<td>()</td>
<td>-</td>
<td>标记一个子表达式,表示范围内为一个表达式</td>
<td></td>
</tr>
<tr>
<td>[</td>
<td>-</td>
<td>标记一个中括号表达式的开始</td>
<td></td>
</tr>
<tr>
<td>\</td>
<td>-</td>
<td>转义使用</td>
<td></td>
</tr>
<tr>
<td>^</td>
<td>-</td>
<td>匹配输入字符串的开始位置，在方括号内除外</td>
<td></td>
</tr>
<tr>
<td>[^ABC]</td>
<td>-</td>
<td>表示不接受该方括号表达式中的字符集合</td>
<td></td>
</tr>
<tr>
<td>{</td>
<td>-</td>
<td>标记限定符表达式的开始</td>
<td></td>
</tr>
<tr>
<td>|</td>
<td>-</td>
<td>指明两项中一项</td>
<td></td>
</tr>
</tbody></table>
</details>

<details class="note primary no-icon" open="">
<summary><p><strong>限定符</strong></p></summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>0,1,2,…</td>
<td>匹配前方子表达式0次或多次；它是贪婪</td>
<td></td>
</tr>
<tr>
<td>+</td>
<td>1,2,3,…</td>
<td>匹配前方子表达式1次或多次；它是贪婪</td>
<td></td>
</tr>
<tr>
<td>{n}</td>
<td>n</td>
<td>匹配前方子表达式n次</td>
<td></td>
</tr>
<tr>
<td>{n,}</td>
<td>n,n+1,…</td>
<td>匹配前方子表达式至少n次</td>
<td></td>
</tr>
<tr>
<td>{n,m}</td>
<td>n,n+1,…,m</td>
<td>匹配前方字表达式最少n次最多m次</td>
<td></td>
</tr>
</tbody></table>
<p><i> <strong>*</strong> 和 <i> <strong>+</strong>  是贪婪的，尽可能匹配多的字符，在它们的后面加上一个 <strong>?</strong> 就可以实现非贪婪或最小匹配。</i></p>
<p>对于<strong>&lt;h1&gt; abcdefg &lt;&#x2F;h1&gt;</strong>这个字符换，<br> <strong>&lt;.*&gt;</strong> 可以匹配这一行内容，但 <strong>&lt;.*?&gt;</strong> 仅匹配  &lt;h1&gt;这四个字符</p>
</details>

<details class="note primary no-icon" open="">
<summary><p><strong>定位符</strong></p></summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>匹配字符数量</th>
<th>描述</th>
<th>等价模式</th>
</tr>
</thead>
<tbody><tr>
<td>^xxx</td>
<td>尽可能少</td>
<td>匹配输入字符串的开始位置；在方括号内则表示<strong>非</strong>的意义</td>
<td></td>
</tr>
<tr>
<td>xxx$</td>
<td>尽可能少</td>
<td>匹配输入字符串的结尾位置</td>
<td></td>
</tr>
<tr>
<td>\bxxx , xxx\b</td>
<td>与x数目一致</td>
<td>匹配一个单词的边界，在不考虑此次输入开始或末尾的单词的情况下，相当于<strong>空格</strong>字符的意义</td>
<td></td>
</tr>
<tr>
<td>\Bxxx , xxx\B</td>
<td>与x数目一致</td>
<td>匹配非单词边界，在不考虑此次输入开始或末尾的单词的情况下，相当于 <strong>非空格</strong>字符的意义</td>
<td></td>
</tr>
</tbody></table>
<p>如： \bCha 匹配单词 <strong>Chapter</strong> 中开头三个字符， ter\b 匹配单词 <strong>Chapter</strong> 中末尾三个字符</p>
</details>


</details>

<details class="note primary no-icon" >
<summary><p><strong>选择符(复杂，若无必要一般不考虑)</strong></p></summary>

<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>(xxx)</td>
<td>捕获分组，可以表示内容为一个子表达式，同时把匹配的值保存起来，用(?:xxx)可以消除缓存</td>
</tr>
<tr>
<td>exp1(?&#x3D;exp2)</td>
<td>查找到exp2，然后仅匹配前方的exp1</td>
</tr>
<tr>
<td>(?&lt;&#x3D;exp2)exp1</td>
<td>查找到exp2，然后仅匹配后方的exp1</td>
</tr>
<tr>
<td>exp1(?!exp2)</td>
<td>查找到exp2，然后仅匹配后方的非exp1</td>
</tr>
<tr>
<td>(?&lt;!exp2)exp1</td>
<td>查找到exp2，然后仅匹配前方的非exp1</td>
</tr>
</tbody></table>
<p>如： runoob(?&#x3D;[\d+]) 匹配<strong>数字</strong>前面的<strong>runoob</strong> </p>
</details>

<p><br><br></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>日语基本语法学习与整理</title>
    <url>/2022/07/10/%E5%AD%A6%E4%B9%A0/%E6%97%A5%E8%AF%AD%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>记录《中日交流标准日本语》初级、中级常用语法</p>
<p>更新日志:</p>
<ul>
<li>2022-07-12 <ul>
<li>完成五十音的整理</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="《标准日本语》初级语法记录"><a href="#《标准日本语》初级语法记录" class="headerlink" title="《标准日本语》初级语法记录"></a>《标准日本语》初级语法记录</h1><h2 id="五十音"><a href="#五十音" class="headerlink" title="五十音"></a>五十音</h2><details class="note primary no-icon" open="" >
<summary><p><strong>平假名/片假名</strong></p></summary>

<table>
<thead>
<tr>
<th>a</th>
<th>i</th>
<th>u</th>
<th>e</th>
<th>o</th>
</tr>
</thead>
<tbody><tr>
<td>あア</td>
<td>いイ</td>
<td>うウ</td>
<td>えエ</td>
<td>おオ</td>
</tr>
<tr>
<td>かカ</td>
<td>きキ</td>
<td>くク</td>
<td>けケ</td>
<td>こコ</td>
</tr>
<tr>
<td>さサ</td>
<td>しシ</td>
<td>すス</td>
<td>せセ</td>
<td>そソ</td>
</tr>
<tr>
<td>たタ</td>
<td>ちチ</td>
<td>つツ</td>
<td>てテ</td>
<td>とト</td>
</tr>
<tr>
<td>なナ</td>
<td>に二</td>
<td>ぬヌ</td>
<td>ねネ</td>
<td>のノ</td>
</tr>
<tr>
<td>はハ</td>
<td>ひヒ</td>
<td>ふフ</td>
<td>ヘへ</td>
<td>ほホ</td>
</tr>
<tr>
<td>まマ</td>
<td>みミ</td>
<td>むム</td>
<td>めメ</td>
<td>もモ</td>
</tr>
<tr>
<td>やヤ</td>
<td>いイ</td>
<td>ゆユ</td>
<td>ええ</td>
<td>よヨ</td>
</tr>
<tr>
<td>らラ</td>
<td>りリ</td>
<td>るル</td>
<td>れレ</td>
<td>ろロ</td>
</tr>
<tr>
<td>わワ</td>
<td>いイ</td>
<td>うウ</td>
<td>えエ</td>
<td>おオ</td>
</tr>
<tr>
<td>んン</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>がガ</td>
<td>ぎギ</td>
<td>ぐグ</td>
<td>げゲ</td>
<td>ごゴ</td>
</tr>
<tr>
<td>ざザ</td>
<td>じジ</td>
<td>ずズ</td>
<td>ぜゼ</td>
<td>ぞゾ</td>
</tr>
<tr>
<td>だザ</td>
<td>ぢヂ</td>
<td>づヅ</td>
<td>でデ</td>
<td>どド</td>
</tr>
<tr>
<td>ばバ</td>
<td>びビ</td>
<td>ぶブ</td>
<td>べベ</td>
<td>ぼボ</td>
</tr>
<tr>
<td>ぱパ</td>
<td>ぴピ</td>
<td>ぷプ</td>
<td>ぺペ</td>
<td>ぽポ</td>
</tr>
</tbody></table>
</details>
<details class="note primary no-icon" open="" >
<summary><p><strong>平假名独表</strong></p></summary>

<table>
<thead>
<tr>
<th>a</th>
<th>i</th>
<th>u</th>
<th>e</th>
<th>o</th>
</tr>
</thead>
<tbody><tr>
<td>あ</td>
<td>い</td>
<td>う</td>
<td>え</td>
<td>お</td>
</tr>
<tr>
<td>か</td>
<td>き</td>
<td>く</td>
<td>け</td>
<td>こ</td>
</tr>
<tr>
<td>さ</td>
<td>し</td>
<td>す</td>
<td>せ</td>
<td>そ</td>
</tr>
<tr>
<td>た</td>
<td>ち</td>
<td>つ</td>
<td>て</td>
<td>と</td>
</tr>
<tr>
<td>な</td>
<td>に</td>
<td>ぬ</td>
<td>ね</td>
<td>の</td>
</tr>
<tr>
<td>は</td>
<td>ひ</td>
<td>ふ</td>
<td>ヘ</td>
<td>ほ</td>
</tr>
<tr>
<td>ま</td>
<td>み</td>
<td>む</td>
<td>め</td>
<td>も</td>
</tr>
<tr>
<td>や</td>
<td>い</td>
<td>ゆ</td>
<td>え</td>
<td>よ</td>
</tr>
<tr>
<td>ら</td>
<td>り</td>
<td>る</td>
<td>れ</td>
<td>ろ</td>
</tr>
<tr>
<td>わ</td>
<td>い</td>
<td>う</td>
<td>え</td>
<td>お</td>
</tr>
<tr>
<td>ん</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>が</td>
<td>ぎ</td>
<td>ぐ</td>
<td>げ</td>
<td>ご</td>
</tr>
<tr>
<td>ざ</td>
<td>じ</td>
<td>ず</td>
<td>ぜ</td>
<td>ぞ</td>
</tr>
<tr>
<td>だ</td>
<td>ぢ</td>
<td>づ</td>
<td>で</td>
<td>ど</td>
</tr>
<tr>
<td>ば</td>
<td>び</td>
<td>ぶ</td>
<td>べ</td>
<td>ぼ</td>
</tr>
<tr>
<td>ぱ</td>
<td>ぴ</td>
<td>ぷ</td>
<td>ぺ</td>
<td>ぽ</td>
</tr>
</tbody></table>
</details>
<details class="note primary no-icon" open="">
<summary><p><strong>片假名独表</strong></p></summary>

<table>
<thead>
<tr>
<th>a</th>
<th>i</th>
<th>u</th>
<th>e</th>
<th>o</th>
</tr>
</thead>
<tbody><tr>
<td>ア</td>
<td>イ</td>
<td>ウ</td>
<td>エ</td>
<td>オ</td>
</tr>
<tr>
<td>カ</td>
<td>キ</td>
<td>ク</td>
<td>ケ</td>
<td>コ</td>
</tr>
<tr>
<td>サ</td>
<td>シ</td>
<td>ス</td>
<td>セ</td>
<td>ソ</td>
</tr>
<tr>
<td>タ</td>
<td>チ</td>
<td>ツ</td>
<td>テ</td>
<td>ト</td>
</tr>
<tr>
<td>ナ</td>
<td>二</td>
<td>ヌ</td>
<td>ネ</td>
<td>ノ</td>
</tr>
<tr>
<td>ハ</td>
<td>ヒ</td>
<td>フ</td>
<td>へ</td>
<td>ホ</td>
</tr>
<tr>
<td>マ</td>
<td>ミ</td>
<td>ム</td>
<td>メ</td>
<td>モ</td>
</tr>
<tr>
<td>ヤ</td>
<td>イ</td>
<td>ユ</td>
<td>え</td>
<td>ヨ</td>
</tr>
<tr>
<td>ラ</td>
<td>リ</td>
<td>ル</td>
<td>レ</td>
<td>ロ</td>
</tr>
<tr>
<td>ワ</td>
<td>イ</td>
<td>ウ</td>
<td>エ</td>
<td>オ</td>
</tr>
<tr>
<td>ン</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ガ</td>
<td>ギ</td>
<td>グ</td>
<td>ゲ</td>
<td>ゴ</td>
</tr>
<tr>
<td>ザ</td>
<td>ジ</td>
<td>ズ</td>
<td>ゼ</td>
<td>ゾ</td>
</tr>
<tr>
<td>ザ</td>
<td>ヂ</td>
<td>ヅ</td>
<td>デ</td>
<td>ド</td>
</tr>
<tr>
<td>バ</td>
<td>ビ</td>
<td>ブ</td>
<td>ベ</td>
<td>ボ</td>
</tr>
<tr>
<td>パ</td>
<td>ピ</td>
<td>プ</td>
<td>ペ</td>
<td>ポ</td>
</tr>
</tbody></table>
</details>


<h2 id="形容词语法"><a href="#形容词语法" class="headerlink" title="形容词语法"></a>形容词语法</h2><p><em>两类形容词在作谓语时的肯定、否定、现在、过去的各种形式</em><br><strong>一类形容词</strong>: 词尾い段，以假名形式出现，不作为汉字的一部分。<br>一类形容词作谓语:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">            --现在肯定--&gt; 词尾后加です  </span><br><span class="line">词尾い      --过去肯定--&gt; かったです </span><br><span class="line">词尾い      --现在否定--&gt; くないです，くありません  </span><br><span class="line">词尾い      --过去否定--&gt; なっかです，ありませんでした  </span><br><span class="line"></span><br><span class="line">*いい       --现在肯定--&gt; いいです</span><br><span class="line"> いい       --过去肯定--&gt; よっかたです</span><br><span class="line"> いい       --现在否定--&gt; よくないです，よくありません  </span><br><span class="line"> いい       --过去否定--&gt; よっかたです，よくありませんでした  </span><br></pre></td></tr></table></figure>


<p><strong>二类形容词</strong>: 也叫形容动词，词尾非假名い段，如 嫌い(完整形式是嫌いだ)、綺麗 等就是二类形容词。<br>二类形容词作谓语:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">--现在肯定--&gt; 词尾后加です  </span><br><span class="line">--过去肯定--&gt; 词尾后加でしす </span><br><span class="line">--现在否定--&gt; 词尾后加ではありません </span><br><span class="line">--过去否定--&gt; 词尾后加ではありませんでした</span><br></pre></td></tr></table></figure>


<h2 id="动词语法"><a href="#动词语法" class="headerlink" title="动词语法"></a>动词语法</h2><p>一类动词：绝大部分去ます形い段尾部<br>二类动词：小部分去ます形い段尾部(okimaasu、miます)；去ます形え段尾部<br>三类动词：使用します的动词；特殊地，还有来ます、します<br><em>动词的ます形，て形，…等，分别用于不同情况</em></p>
<p><strong>动词ます形</strong></p>
<p><strong>动词去ます形</strong></p>
<p><strong>动词て形</strong>  </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">一类动词:</span><br><span class="line">    动词尾き       --&gt;　いて</span><br><span class="line">    动词尾ぎ       --&gt;　いで</span><br><span class="line">    动词尾び、み、に--&gt;　んて</span><br><span class="line">    动词尾ち、り、い--&gt;　って</span><br><span class="line">    动词尾し       --&gt;　して</span><br><span class="line">二类动词：</span><br><span class="line">    去ます后，加て</span><br><span class="line">三类动词：</span><br><span class="line">    します        --&gt;　して</span><br><span class="line">    来ます        --&gt;　来て</span><br><span class="line">特殊于以上几类:</span><br><span class="line">    行きます      --&gt;　行って</span><br></pre></td></tr></table></figure>
<p><a href="/assets/images/xxx" title="常用て形变换">!常用て形变换</a></p>
<p><strong>动词ない形</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">一类动词:</span><br><span class="line">    把尾音变为a段，再加nai；如果尾音i段，则把i变为wa，再加nai</span><br><span class="line">二类动词：</span><br><span class="line">    去ます后，加nai</span><br><span class="line">三类动词：</span><br><span class="line">    把ます变成nai(注意，尽管变化的形式与二类动词一样，但意义不同)；shimasu变成shinai</span><br></pre></td></tr></table></figure>
<p><a href="/assets/images/xxx" title="常用ない形变换">!常用ない形变换</a></p>
<p><strong>动词基本形</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">一类动词:</span><br><span class="line">    去masu形尾音u段     </span><br><span class="line">二类动词:</span><br><span class="line">    去masu形</span><br><span class="line">三类动词:</span><br><span class="line">    去masu形尾部为ki</span><br><span class="line">    去masu形尾部为shi   --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="数量词的搭配使用（13）"><a href="#数量词的搭配使用（13）" class="headerlink" title="数量词的搭配使用（13）"></a>数量词的搭配使用（13）</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title>JMeter学习笔记</title>
    <url>/2022/07/10/%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/JMeter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>更新日志：</p>
<ul>
<li>2022-08-08<ul>
<li>完成观看视频的同步学习记录</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="初学笔记"><a href="#初学笔记" class="headerlink" title="初学笔记"></a>初学笔记</h1><h2 id="观看《JMeter-2021-Masterclass》学习并记录"><a href="#观看《JMeter-2021-Masterclass》学习并记录" class="headerlink" title="观看《JMeter 2021 Masterclass》学习并记录"></a>观看《JMeter 2021 Masterclass》学习并记录</h2><h3 id="开始一个JMeter测试计划"><a href="#开始一个JMeter测试计划" class="headerlink" title="开始一个JMeter测试计划"></a>开始一个JMeter测试计划</h3><ol>
<li>点击根目录下&#x2F;bin&#x2F;jmeter.bat ，打开GUI界面</li>
<li>右击Test Plan,添加Thread-Thread Group <ol>
<li>设置线程数</li>
<li>设置爬坡时间(Ramp-up period)</li>
<li>设置循环次数</li>
<li>其余默认</li>
</ol>
</li>
<li>右击已创建线程组,添加Simpler-HTTP Request<ol>
<li>Protocol留空，即默认http协议</li>
<li>Server Name or IP 设置要测试的网站，不要添加http(s)的前缀</li>
<li>Port Number留空</li>
<li>选择需要测试url的方法和路径</li>
<li>点击下方Add添加所需参数</li>
</ol>
</li>
<li>右击已创建线程组,添加 Listener-View Results Tree和View Results Tree</li>
<li>点击绿色箭头start,开始测试,测试结果可在两个监听器中看到</li>
</ol>
<h3 id="监听器Listener"><a href="#监听器Listener" class="headerlink" title="监听器Listener"></a>监听器Listener</h3><p>主要监听器:</p>
<ul>
<li>View Results in Table</li>
<li>View Results Tree</li>
<li>Aggregate Report</li>
<li>Graph Results</li>
<li>Summary Report</li>
<li>Simple Data Writer</li>
</ul>
<h3 id="断言Assertions"><a href="#断言Assertions" class="headerlink" title="断言Assertions"></a>断言Assertions</h3><p><em>注意，不同位置的Assertion适用的采样器范围不同</em><br>当请求不满足断言条件，则会被判断为fail</p>
<h3 id="HTTP-s-测试的脚本记录器"><a href="#HTTP-s-测试的脚本记录器" class="headerlink" title="HTTP(s)测试的脚本记录器"></a>HTTP(s)测试的脚本记录器</h3><!-- [脚本记录器debug]( /source/assets/WorkImages/JMeterScriptRecorder.png "脚本记录器") -->

<p><img src="/assets/WorkImages/JMeterScriptRecorder.png" alt="脚本记录器" title="脚本记录器"><br>步骤:</p>
<ol>
<li>给测试计划添加测试脚本记录器Test Script Recorder，并在脚本记录器上添加监听器</li>
<li>给测试计划添加线程组</li>
<li>给线程组添加记录控制器Recording Controllor，配置端口和渔民，并添加监听器</li>
<li>给火狐浏览器设置手动代理，并导入JMeter根目录的证书(如果没有则需要start一下会生成临时证书)</li>
<li>开始测试计划</li>
</ol>
<p>模板的使用:</p>
<h3 id="Blazemeter"><a href="#Blazemeter" class="headerlink" title="Blazemeter"></a>Blazemeter</h3><p><em>用于在云端运行性能测试的工具，相比使用JMeter内置脚本记录器，更加简便)</em></p>
<p>视频内容:</p>
<ol>
<li>create Blazemeter account</li>
<li>get Blazemeter extension</li>
<li>login </li>
<li>record test</li>
<li>save jmx</li>
<li>add JMX in JMeter and Run</li>
</ol>
<p>使用方法：</p>
<ol>
<li>使用扩展，开始记录，在网页上进行操作，完成记录，</li>
<li>Run，然后自动跳转至Blazemeter Dashbord</li>
<li>Edit</li>
<li>Save，下载指定JMX文件，可以导入到JMeter文件，只要再加两个监听器即可直接运行</li>
</ol>
<h3 id="关联CSV数据"><a href="#关联CSV数据" class="headerlink" title="关联CSV数据"></a>关联CSV数据</h3><p>步骤：</p>
<ol>
<li>添加CSV Data Set Config，和线程组同级别意味着可以用于该线程组</li>
<li>在CSV Data Set Config添加CSV文件，使之文件关联到JMeter</li>
<li>使用语法${FeatureName}引用对应特征名的变量</li>
<li>其他设置，如重命名特征名，文件编码，是否识别第一行，文件分隔符，到达EOF后停止或循环或结束线程</li>
</ol>
<h3 id="HTTP-Web测试中的设置元素-（其他类型的可到官方文档查看）"><a href="#HTTP-Web测试中的设置元素-（其他类型的可到官方文档查看）" class="headerlink" title="HTTP Web测试中的设置元素 （其他类型的可到官方文档查看）"></a>HTTP Web测试中的设置元素 （其他类型的可到官方文档查看）</h3><p><em>结果树监听器View Results Tree Listener消耗内存，调试测试测试计划时可以使用，但真正要测性能时要禁用</em></p>
<p><em>使用Blazemeter录制完保存为jmx文件后，导入到JMeter，会生成完整的配置元素和采样器</em></p>
<p>demo app - <a href="https://opensource-demo.orangehrmlive.com/">https://opensource-demo.orangehrmlive.com/</a></p>
<p>有以下几种设置元素:</p>
<ul>
<li>用户定义变量</li>
<li>HTTP头管理器</li>
<li>HTTP请求默认设置</li>
<li>DNS缓存管理器</li>
<li>HTTP认证（Authorization）管理器</li>
<li>HTTP Cookie管理器</li>
<li>HTTP缓存管理器</li>
</ul>
<h3 id="一般设置元素"><a href="#一般设置元素" class="headerlink" title="一般设置元素"></a>一般设置元素</h3><ul>
<li>Counter 可以存储迭代变量， ${num} 使用它，默认循环</li>
<li>JDBC Connection Config 用于连接，JDBC Request不负责连接 </li>
<li>Keystore 配置密钥，如何加载密钥，加载哪个由它配置</li>
<li>Random Variable 产生随机值，有必要看看要不要配置随机值</li>
<li>SImple Config Element 组建多对“变量名-值”的组合</li>
<li>User Defined Variable</li>
</ul>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>好处：</p>
<ul>
<li>没有图形界面的资源消耗</li>
<li>能与任何外部CI&#x2F;CD进行整合在一起</li>
</ul>
<p>视频内容</p>
<ol>
<li><p>进入bin文件夹，在命令行运行测试	<br>jmeter -n -t “测试文件.jmx -l “结果文件.csv”<br>jmeter或jmeter.bat<br>-n  no gui<br>-t  必须给出测试计划的地址<br>-l  必须给出结果文件位置<br>sh jmeter -n -t “测试文件位置”  -l “结果文件位置”</p>
</li>
<li><p>查看命令行帮助和选项 jmeter -h</p>
</li>
<li><p>添加环境变量，在任何系统位置运行</p>
</li>
</ol>
<h3 id="从命令行或GUI界面生成HTML报告"><a href="#从命令行或GUI界面生成HTML报告" class="headerlink" title="从命令行或GUI界面生成HTML报告"></a>从命令行或GUI界面生成HTML报告</h3><p>内容：</p>
<ul>
<li>从命令行创建html仪表盘报告</li>
<li>从脱机的cvs结果文件创建html仪表盘报告</li>
<li>学习html仪表盘报告</li>
<li>GUI生成html仪表盘报告</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>创建测试计划</p>
</li>
<li><p>在bin文件夹打开命令行</p>
</li>
<li><p>运行命令 jmeter -n -t “testfile.jmx” -l “resualtfile.csv”  -e -o “reports foler”<br> -e  生成html报告或仪表盘报告<br> -o  </p>
<p> 使用已有csv结果文件生成报告<br> jmeter -g “resualtfile.csv”   -o “reports foler”</p>
</li>
<li><p>Tools-Gnenrate HTML report在可视化界面生成HTML报告</p>
</li>
</ol>
<h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><p>内容:寻找、安装、卸载、升级插件</p>
<ol>
<li>从<a href="https://jmeter-plugins.org/wiki/PluginsManager/%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8jar%EF%BC%8C%E6%94%BE%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95/lib/ext">https://jmeter-plugins.org/wiki/PluginsManager/下载插件管理器jar，放到指定目录/lib/ext</a></li>
<li>在GUI界面OPTIONS-Plugins Manager里可以管理JMeter</li>
<li>寻找其他插件 <a href="https://jmeter-plugins.org/">https://jmeter-plugins.org/</a>   <a href="https://jmeter-plugins.org/wiki/Start/">https://jmeter-plugins.org/wiki/Start/</a></li>
</ol>
<h3 id="测试REST-API"><a href="#测试REST-API" class="headerlink" title="测试REST API"></a>测试REST API</h3><ul>
<li>REST API：Representational State Transfer，需要了解一下概念</li>
<li>网址reqres.in，这里有一些用于测试的简单 REST API</li>
<li>REST API在浏览器上的表现形式似乎与一般HTTP报文并无区别，测试时当成普通HTTP报文即可（待日后研究）</li>
<li>使用POST方法，交换的json数据需要编辑在在body</li>
</ul>
<h3 id="测试SOAP-API"><a href="#测试SOAP-API" class="headerlink" title="测试SOAP API"></a>测试SOAP API</h3><ol>
<li>请求采样器</li>
<li>添加Headers</li>
<li>添加Authorisation</li>
<li>添加body</li>
<li>添加断言</li>
<li>运行和检查结果</li>
</ol>
<p>测试网站 dneonline.com&#x2F;calculator.asmx<br>SOAP API 都是POST方式，内容为SOAP格式文档<br>可以扩展wizdler查看SOAP文档内容</p>
<p>视频过程：</p>
<ol>
<li><p>使用模板 Building a SOAP WebService Test Plan 构建一个SOAP API测试<br> 其中 SOAP Request 的Body Data部分是SOAP格式文档<br> 需要调整HTTP头管理器<br> 可选添加Authorization管理器</p>
</li>
<li><p>不使用模板，自己手动建立一个SOAP API测试计划</p>
<ol>
<li>添加HTTP请求采样器，方法需要设置为POST，body需要添加SOAP格式内容<br> 视频中在body里添加了 SOAP Envelope 元素下内容(这里传送数据)</li>
<li>添加头管理器，跳转其内容，包括 Content-Type , SOAPAction（这里告诉服务器对接收道德数据的进行什么行为）</li>
<li>添加了Authorization管理器，但测试网站没有认证需要</li>
<li>添加了Response断言，断言了 SOAP内容下的一个元素，如 <AddResult>5</AddResult></li>
<li>添加监视器以查看结果，View Results Tree，Assertion Results</li>
</ol>
</li>
</ol>
<h3 id="函数-JMeter内置-和变量的使用"><a href="#函数-JMeter内置-和变量的使用" class="headerlink" title="函数(JMeter内置)和变量的使用"></a>函数(JMeter内置)和变量的使用</h3><p>Funtions句法:<br>    ${_funcName}<br>    ${_funcName(var1,var2,…)}<br>Variable句法:<br>    ${VarName}</p>
<p>视频过程:</p>
<ol>
<li>添加Java Request</li>
<li>点击 Function Helper Dialog	，可以找些一些JMeter的内置函数，如 log，time，threadNum等</li>
<li>一个函数可以使用别的函数返回的变量，如 存在函数 ${_intSum(2,3,result)}，则在别的请求中可以使用 ${result}，也可以当作一个函数内的参数<br>所有函数可以参考官方文档 <a href="https://jmeter.apache.org/usermanual/functions.html">https://jmeter.apache.org/usermanual/functions.html</a></li>
</ol>
<h2 id="JMeter官方文档阅读笔记"><a href="#JMeter官方文档阅读笔记" class="headerlink" title="JMeter官方文档阅读笔记"></a>JMeter官方文档阅读笔记</h2><h3 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h3><ul>
<li>线程组是测试计划的起点，所有控制器和采样器必须位于线程组下，监听器可以与线程组同级；</li>
<li>每个线程完全独立；</li>
<li>爬坡时间指定要用多少时间完成所有线程，一定程度上指定了延迟，下限必须足够长以免负载过大</li>
<li>可以指定线程生存周期，包括持续时间和启动延迟</li>
</ul>
<h4 id="采样器"><a href="#采样器" class="headerlink" title="采样器"></a>采样器</h4><p>采样器告诉JMeter向服务器发送请求并等待响应。<br>包括 FTP、HTTP、JDBC、Java Object、JMS、JUnit Test、LDAP、Mail、OS Process、TCP 这些请求种类的采样器</p>
<h4 id="逻辑控制器"><a href="#逻辑控制器" class="headerlink" title="逻辑控制器"></a>逻辑控制器</h4><p>逻辑控制器允许自定义如何发送请求，指定发送时间，发送顺序<br>测试计划</p>
<ul>
<li>线程组<ul>
<li>仅一次控制器</li>
<li>登录请求（HTTP 请求)</li>
<li>加载搜索页面（HTTP 采样器）</li>
<li>交错控制器</li>
<li>搜索“A”（HTTP采样器）</li>
<li>搜索“B”（HTTP采样器）</li>
<li>HTTP 默认请求（配置元素）</li>
<li>HTTP 默认请求（配置元素）</li>
<li>饼干管理器（配置元素）</li>
</ul>
</li>
</ul>
<h4 id="特殊的控制器-测试片段"><a href="#特殊的控制器-测试片段" class="headerlink" title="特殊的控制器-测试片段"></a>特殊的控制器-测试片段</h4><p>这个元素仅仅用于测试计划中重用代码</p>
<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>所有的监听器都保存相同的数据，唯一的区别在于选择显示方式和选择的显示内容。</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>指定其范围内采样器之间的延迟时间，多个计时器的时间会相加</p>
<h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>断言检验返回请求是否符合自定义规则（文本、返回头等），否则视为失败，记录于监听器</p>
<h3 id="配置元素"><a href="#配置元素" class="headerlink" title="配置元素"></a>配置元素</h3><p>配置元素与采样器紧密协作，它可以添加或修改请求，作用范围为所在控制器内部；<br>子分支中的配置元素优先级高于父分支中配置元素</p>
<h3 id="预处理后处理元件"><a href="#预处理后处理元件" class="headerlink" title="预处理后处理元件"></a>预处理后处理元件</h3><p>在发出采样器请求之前和之后执行某些操作</p>
<h2 id="组件作用范围与执行顺序"><a href="#组件作用范围与执行顺序" class="headerlink" title="组件作用范围与执行顺序"></a>组件作用范围与执行顺序</h2><h3 id="范围界定规则"><a href="#范围界定规则" class="headerlink" title="范围界定规则"></a>范围界定规则</h3><p>分层结构（监听器、配置元素、预处理器、后处理器、断言、计时器内部）<br>同级有序结构（逻辑控制器、采样器之间）<br>同级无序结构（监听器、配置元素、预处理器、后处理器、断言、计时器之间）</p>
<p><img src="/assets/WorkImages/scoping-rules.png" alt="范围界定示例" title="范围界定示例"></p>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>单个采样器运行的前后环境顺序：</p>
<ol>
<li>配置元素</li>
<li>预处理器</li>
<li>定时器</li>
<li>采样器</li>
<li>后处理器</li>
<li>断言</li>
<li>监听器</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
        <category>测试工具</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/08/%E9%80%9A%E7%94%A8%E7%B1%BB/%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>更新日志：</p>
<ul>
<li>2022-06-11 完成</li>
</ul>
<span id="more"></span>












<p>#—<br>#title: 模板<br>#categories:<br>#- 父类名称<br>#- 子类名称  #如不需要该子类可删除本行<br>#- 子类名称  #根据需要再新建子类<br>#tags: 展示    #设置任意值后，本贴会在首页展示，若不需要展示则在tags:后留空<br>#discription: #简短描述本帖意义或内容<br>#top: 0       #只有在首页展示top才有设置意义，取值0<del>100；其中设置为1</del>100会置顶，同样的置顶文章，值越大越上面<br>#date: 2022-07-07 14:31:05  #帖子创建时间，不设定也不影响正常发帖<br>#—<br>#前言部分，会在首页展示中预览；<br>#更新日志：</p>
<h1 id="2022-07-11-完成xxxx"><a href="#2022-07-11-完成xxxx" class="headerlink" title="2022-07-11 完成xxxx"></a>2022-07-11 完成xxxx</h1><h1 id="2022-07-15-完成xxxx"><a href="#2022-07-15-完成xxxx" class="headerlink" title="2022-07-15 完成xxxx"></a>2022-07-15 完成xxxx</h1><p>#<!-- more --><br>#正文部分，需要使用Markdown语法编辑</p>
]]></content>
      <categories>
        <category>通用类</category>
      </categories>
  </entry>
</search>
